<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zeros on XIZERO</title>
    <link>http://127.0.0.1/zero/index.xml</link>
    <description>Recent content in Zeros on XIZERO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Nov 2016 08:39:53 +0800</lastBuildDate>
    <atom:link href="http://127.0.0.1/zero/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>关于未来 2016/11</title>
      <link>http://127.0.0.1/zero/2016-11-21/</link>
      <pubDate>Mon, 21 Nov 2016 08:39:53 +0800</pubDate>
      
      <guid>http://127.0.0.1/zero/2016-11-21/</guid>
      <description>&lt;p&gt;11月21日 2016 :cloud:&lt;/p&gt;

&lt;p&gt;这几周一直在迷茫，明知自己没有多少东西，但还是提不起劲来。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“意识到了自己没有办法成为 top 1% 的程序员，还应该选择程序员的道路么？”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看到这句话的时候，的确很震惊，这不就是我的未来吗？&lt;/p&gt;

&lt;p&gt;从二流的大学生成为二流的程序员……&lt;/p&gt;

&lt;p&gt;瞬间秒杀掉了我所有的希望。&lt;/p&gt;

&lt;p&gt;可是，没有人天生就是 NO1 ，你为什么不能成为那个 top 1%?&lt;/p&gt;

&lt;p&gt;平地起高台，万事从头来。&lt;/p&gt;

&lt;p&gt;你需要是一个一个的小目标，在不经意间你就会发现，原来那个遥不可及的目标已经没那么困难了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我的小目标：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;总结整理 java web 基础&lt;/li&gt;
&lt;li&gt;总结整理 java web 框架&lt;/li&gt;
&lt;li&gt;学习计算机网络&lt;/li&gt;
&lt;li&gt;学习操作系统&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;一个2017的目标&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;阅读 Spring 源码&lt;/li&gt;
&lt;li&gt;开始新的生活&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>一个想法</title>
      <link>http://127.0.0.1/zero/%E4%B8%80%E4%B8%AA%E6%83%B3%E6%B3%95/</link>
      <pubDate>Sun, 20 Nov 2016 12:19:55 +0800</pubDate>
      
      <guid>http://127.0.0.1/zero/%E4%B8%80%E4%B8%AA%E6%83%B3%E6%B3%95/</guid>
      <description>&lt;p&gt;自己做了一个小东西，一个简单的 &lt;a href=&#34;http://hao.xizero.com&#34;&gt;网址索引&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;因为要显示每个网站的favicon，google一下，找到了一些还能用公共的api。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;google：&lt;a href=&#34;http://www.google.com/s2/favicons?domain=&#34;&gt;http://www.google.com/s2/favicons?domain=&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;BYI_API：&lt;a href=&#34;https://api.byi.pw/favicon/&#34;&gt;https://api.byi.pw/favicon/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他的都不能用了，谷歌还要翻墙，最后就用了BYI_API。&lt;/p&gt;

&lt;p&gt;一直都挺好的，被墙的网站也能返回，直到前几天（估计在11月12日左右），崩了（&amp;gt;_&amp;lt;）。&lt;/p&gt;

&lt;p&gt;面对满页的XX，我换了另一个。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://f.ydr.me/?url=&#34;&gt;http://f.ydr.me/?url=&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是，满页的ie图标是要干啥（不支持的被墙的网站）&lt;/p&gt;

&lt;p&gt;后来，看到了一个问答，大概是通过判断图片的MD5来判断是不是小地球（获取失败时返回），我灵感一动，两天的折磨……&lt;/p&gt;

&lt;p&gt;前段框架用的是刚学的vue.js 2，用过滤器 filters 不就可以了吗？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
{{data_url  | filter}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只要我把前面的链接获取到，然后判断那个图标是不是小地球，再来调用其他的api，不就可以了吗。&lt;/p&gt;

&lt;p&gt;但是 vue 不支持在绑定属性中使用过滤器，（&amp;gt;_&amp;lt;），好，再google，(⊙o⊙)哦，要用计算属性 computed 啊！？&lt;/p&gt;

&lt;p&gt;但是计算属性不能传参，（&amp;gt;_&amp;lt;），好，只能再找了，可以用 methods 。&lt;/p&gt;

&lt;p&gt;之前学习了fetch，用fetch下图标，然后直接返回图片，这儿遇到点问题，主要是图片的处理和到最后也没有解决的跨域问题。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
fetch(img_url)
.then(function(res){
    return res.blob();
})
.then(function(imageBlob){
    img_src = window.URL.createObjectURL(imageBlob);
    //more
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是一个简单的fetch获取图片的例子，复刻官网上的，本地图片可以加载。&lt;/p&gt;

&lt;p&gt;但是favicon api是不支持跨域请求，所以一直在做挣扎。&lt;/p&gt;

&lt;p&gt;在这段时间之中，把这个方法放到了mounted，想让图片直接在加载时判断。&lt;/p&gt;

&lt;p&gt;主要是因为好好的看了一下js的闭包，之前有过卡在这儿的经历，还好征服了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
for(var i=0;i&amp;lt;json.length;i++){
    (function(i){
        for(var j=0;j&amp;lt;json[i].list.length;j++){
            (function(j){
                fetch(
                &#39;https://s2.googleusercontent.com/s2/favicons?domain=&#39;
                +json[i].list[j].url,
                    {
                        mode:&amp;quot;cors&amp;quot;,
                        headers:{
                        &#39;Access-Control-Allow-Origin&#39;:&#39;*&#39;
                        }
                    }
                )
                .then(function(res){
                    return res.blob();
                })
                .then(function(imageBlob){
                    json[i].list[j].img
                    =window.URL.createObjectURL(imageBlob);
                })
            })(j);
        }
    })(i);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;痛苦的是解决fetch 的跨域问题&lt;/p&gt;

&lt;p&gt;fetch 的response 中有个mode的属性，可取值4个，包括 cors、no-cors等。&lt;/p&gt;

&lt;p&gt;默认为cors，但在请求图片时，浏览器会提醒跨域问题。
当设置为 no-cors 时， 虽然不会报错，但是你并不能获取resquest 中的data，所以然并软。&lt;/p&gt;

&lt;p&gt;还曾引入过fetch-jsonp.js，但是就像no-cors，获取不到内容。&lt;/p&gt;

&lt;p&gt;设置请求头中的Access-Control-Allow-Origin，会提示服务器不支持。&lt;/p&gt;

&lt;p&gt;就当我要放弃时，我又突发奇想，等网页加载完，判断下载本地的图片。&lt;/p&gt;

&lt;p&gt;不能直接获取图片的MD5，找到了别人写的代码，先变成Base64.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function getBase64Image(img) {
    var canvas = document.createElement(&amp;quot;canvas&amp;quot;);
    canvas.width = img.width;
    canvas.height = img.height;

    var ctx = canvas.getContext(&amp;quot;2d&amp;quot;);
    ctx.drawImage(img, 0, 0, img.width, img.height);

    var dataURL = canvas.toDataURL(&amp;quot;image/png&amp;quot;);
    return dataURL

    // return dataURL.replace(&amp;quot;data:image/png;base64,&amp;quot;, &amp;quot;&amp;quot;);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来，用SparkMD5，讲Base64编码，再比较。&lt;/p&gt;

&lt;p&gt;小心翼翼地试了下，好像可以。&lt;/p&gt;

&lt;p&gt;但是，当我写好了代码，请求时，浏览器报错传到函数里面的不是一个HTMLElement。
我想是不是因为图片还没有加载完成，获取不到节点，那就判断一下。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
if (img.complete) {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是，&lt;strong&gt;canvas&lt;/strong&gt; 不支持跨域 ！&lt;/p&gt;

&lt;p&gt;所以，我放弃了。&lt;/p&gt;

&lt;p&gt;我又重新看了一下开始的API，好像能用了，那就切换回来好了。&lt;/p&gt;

&lt;p&gt;看到他的代码开源，想要自己整一个,以防万一。&lt;/p&gt;

&lt;p&gt;（&amp;gt;_&amp;lt;）为什么是 拍X片 PHP ？？？&lt;/p&gt;

&lt;p&gt;结束&lt;/p&gt;

&lt;p&gt;后记&lt;/p&gt;

&lt;p&gt;当我兴致勃勃的去用java写一个api时，我卡在了线程同步……&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>