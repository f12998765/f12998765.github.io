<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>XIZERO</title>
    <link>https://www.xizero.com/index.xml</link>
    <description>Recent content on XIZERO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Jan 2017 19:15:00 +0800</lastBuildDate>
    <atom:link href="https://www.xizero.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Github Pages 配置 https</title>
      <link>https://www.xizero.com/note/Github%20Pages%20%E9%85%8D%E7%BD%AE%20https/</link>
      <pubDate>Fri, 06 Jan 2017 19:15:00 +0800</pubDate>
      
      <guid>https://www.xizero.com/note/Github%20Pages%20%E9%85%8D%E7%BD%AE%20https/</guid>
      <description>

&lt;h1 id=&#34;github-pages-配置-https&#34;&gt;Github Pages 配置 https&lt;/h1&gt;

&lt;p&gt;Github Pages 不支持自定义域名https，虽然使用第三方的解析代理可以实现，但是却不稳定也并不知道什么时候失效，凡事要靠自己来。&lt;/p&gt;

&lt;p&gt;搜索查找，知道使用 &lt;strong&gt;Nginx 反向代理&lt;/strong&gt; 可以实现。&lt;/p&gt;

&lt;p&gt;下面是一些简单的笔记，需要一个ubuntu环境的云服务器，其他环境自行查找。&lt;/p&gt;

&lt;h2 id=&#34;安装-nginx&#34;&gt;安装 Nginx&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;apt-get install nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;域名解析&#34;&gt;域名解析&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;删除 Github Pages 上的 CNAME ，不使用自定义域名。&lt;/li&gt;
&lt;li&gt;在域名解析商那，将自定义域名用A解析到云服务器&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;申请证书&#34;&gt;申请证书&lt;/h2&gt;

&lt;p&gt;可以搜索 Let’s Encrypt&lt;/p&gt;

&lt;h2 id=&#34;nginx-配置&#34;&gt;Nginx 配置&lt;/h2&gt;

&lt;p&gt;如果默认安装，&lt;code&gt;/etc/nginx/conf.d&lt;/code&gt; 目录是自定义配置文件的存放的地方，新建一个 &lt;code&gt;.conf&lt;/code&gt; 文件，文件名随意。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;xxx.com 表示你的自定义域名&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;添加一个虚拟主机，监听 80 ，让 http 跳转到 https&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
        listen 80 ;
        server_name xxx.com;
        rewrite ^(.*)$  https://xxx.com$1 permanent;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加一个虚拟主机，监听 443 ，&lt;code&gt;location /&lt;/code&gt; 设置反向代理 Github pages，&lt;code&gt;ssl_certificate&lt;/code&gt;等设置证书，最后的 &lt;code&gt;location&lt;/code&gt; 设置缓存时间。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;添加证书的时候，注意路径，使用 &lt;code&gt;nginx -t xxx.conf&lt;/code&gt; 查看配置文件是否错误，多看看日志&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;server {
        listen 443 ssl;
        server_name xxx.com;
        ssl on;
        ssl_certificate conf.d/xxx.com_bundle.crt;
        ssl_certificate_key conf.d/xxx.com.key;
        location / {
                proxy_pass https://xxx.github.io/;
                proxy_redirect     off;
                proxy_set_header   X-Real-IP  $remote_addr;
                proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
        }
        location ~ /purge(/.*){
            expires 10m;
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;运行-nginx&#34;&gt;运行 nginx&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;service nginx start
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://imciel.com/2016/05/09/github-pages-reverse-proxy-https/&#34;&gt;反向代理 GitHub Pages 并配置博客 HTTPS 访问&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://taozj.org/201603/blog-site-under-https.html#&#34;&gt;我的博客用上HTTPS啦&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://echo.pm/lnmp-nginx-ssl-https&#34;&gt;在 Nginx（LNMP）上配置 NameCheap SSL 证书并开启强制 HTTPS 的方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/q/1010000006614489&#34;&gt;nginx ssl强制跳转&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>java 泛型 TKVE 含义</title>
      <link>https://www.xizero.com/java/java-%E6%B3%9B%E5%9E%8B-TKVE/</link>
      <pubDate>Thu, 24 Nov 2016 15:55:43 +0800</pubDate>
      
      <guid>https://www.xizero.com/java/java-%E6%B3%9B%E5%9E%8B-TKVE/</guid>
      <description>

&lt;h2 id=&#34;java-泛型经常使用的符号的含义&#34;&gt;Java 泛型经常使用的符号的含义&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;T &amp;ndash; Type / java 类&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;K &amp;ndash; Key / 键&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;V &amp;ndash; Value / 值&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;E &amp;ndash; Element / 集合中的元素&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;? &amp;ndash; 通配符&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;S、U、V &amp;ndash; 2nd、3rd、4th types&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考连接&#34;&gt;参考连接&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;www.hollischuang.com/archives/252&#34;&gt;Java泛型中K T V E ？ object等的含义&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Java 序列化</title>
      <link>https://www.xizero.com/java/java-%E5%BA%8F%E5%88%97%E5%8C%96/</link>
      <pubDate>Wed, 23 Nov 2016 16:28:21 +0800</pubDate>
      
      <guid>https://www.xizero.com/java/java-%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
      <description>

&lt;h2 id=&#34;什么是序列化&#34;&gt;什么是序列化？&lt;/h2&gt;

&lt;p&gt;序列化是为了保存对象的状态，将对象的状态装换为字节数组，反序列化就是重构对象。&lt;/p&gt;

&lt;p&gt;就像是冰冻魔法&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;实际上，序列化的思想是 “冻结” 对象状态，传输对象状态（写到磁盘、通过网络传输等等），然后 “解冻” 状态，重新获得可用的 Java 对象。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;相关API&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;java.io.Serializable&lt;/li&gt;
&lt;li&gt;java.io.Externalizable&lt;/li&gt;
&lt;li&gt;ObjectOutput&lt;/li&gt;
&lt;li&gt;ObjectInput&lt;/li&gt;
&lt;li&gt;ObjectOutputStream&lt;/li&gt;
&lt;li&gt;ObjectInputStream&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;怎么用&#34;&gt;怎么用？&lt;/h2&gt;

&lt;p&gt;只要一个类实现了 &lt;code&gt;java.io.Serializable&lt;/code&gt; 接口就能被序列化,该接口仅作为一个标识，标识这个类可以进行序列化。&lt;/p&gt;

&lt;p&gt;ObjectOutputStream.writeObject(Object); 将对象入输出流，序列化&lt;/p&gt;

&lt;p&gt;ObjectInputStream.readObject(); 从流中读取对象，反序列化&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;标识:在进行序列化时，在 writeObject() 中会检测 obj instanceof Serializable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;例&#34;&gt;例&lt;/h3&gt;

&lt;p&gt;序列化对象&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.io.Serializable;

public class Cat implements Serializable {
    private String name;
    private String age;
    private static final long serialVersionUID = 1L;
    public Cat() {
    }

    public Cat(String name, String age) {

        this.name = name;
        this.age = age;
    }

   //get() set()

    @Override
    public String toString() {
        return &amp;quot;Cat{&amp;quot; +
                &amp;quot;name=&#39;&amp;quot; + name + &#39;\&#39;&#39; +
                &amp;quot;, age=&#39;&amp;quot; + age + &#39;\&#39;&#39; +
                &#39;}&#39;;
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;序列化过程&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.x.model.Cat;

import java.io.*;

public class Main {

    public static void main(String[] args) {
        Cat cat = new Cat(&amp;quot;huang&amp;quot;,&amp;quot;5&amp;quot;);
        System.out.println(cat);



        try (FileOutputStream file = new FileOutputStream(&amp;quot;he&amp;quot;); ObjectOutputStream oos =  new ObjectOutputStream(file);){
            oos.writeObject(cat);
        } catch (IOException e) {
            e.printStackTrace();
        }

        try (FileInputStream file = new FileInputStream(&amp;quot;he&amp;quot;);ObjectInputStream ois = new ObjectInputStream(file)) {
            Cat cat1 = (Cat)ois.readObject();
            System.out.println(cat1);
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;备注&#34;&gt;备注&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用 Externalizable 接口，需要重写 writeExternal() 和 readExternal() ，可自定义序列化。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;序列化ID(private static final long serialVersionUID)不同，反序列化报java.io.InvalidClassException异常。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;静态变量不会序列化。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用 transient 关键字的变量不会序列化。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;序列化中继承&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;父类实现序列化，子类默认继承&lt;/li&gt;
&lt;li&gt;子类实现序列化，若父类变量也要保存则需要父类序列化；不需要父类序列化，反序列化时调用父类的无参构造函数。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考连接&#34;&gt;参考连接&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hollischuang.com/archives/1150&#34;&gt;Java对象的序列化与反序列化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/cn/java/j-5things1/&#34;&gt;关于 Java 对象序列化您不知道的 5 件事&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/cn/java/j-lo-serial/&#34;&gt;Java 序列化的高级认识&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>String 相关</title>
      <link>https://www.xizero.com/java/String%20%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Tue, 22 Nov 2016 08:36:39 +0800</pubDate>
      
      <guid>https://www.xizero.com/java/String%20%E7%9B%B8%E5%85%B3/</guid>
      <description>

&lt;h2 id=&#34;string-成员变量&#34;&gt;String 成员变量&lt;/h2&gt;

&lt;p&gt;String 是典型的&lt;a href=&#34;http://www.cnblogs.com/java-my-life/archive/2012/05/08/2487757.html&#34;&gt;不变模式设计&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8u40-b25/java/lang/String.java?av=f&#34;&gt;JDK 8 源码地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b27/java/lang/String.java?av=f&#34;&gt;JDK 6 源码地址&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
//JDK 1.8
public final class String implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence {
	//The value is used for character storage.
	private final char value[];

	//Cache the hash code for the string
	private int hash; // Default to 0
}

//JDK1.6
public final class String implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence{
	//The value is used for character storage.
	private final char value[];

	//The offset is the first index of the storage that is used.
	private final int offset;

	//The count is the number of characters in the String.
	private final int count;

	//Cache the hash code for the string
	private int hash; // Default to 0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;常量池&#34;&gt;常量池&lt;/h2&gt;

&lt;p&gt;java编译时会生成常量池（Constant pool），保存字面常量和符号引用（类名、方法名、接口名和字段名等）。&lt;/p&gt;

&lt;h3 id=&#34;创建字符串对象&#34;&gt;创建字符串对象&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;new 运算符&lt;/li&gt;
&lt;li&gt;字符串常量&lt;/li&gt;
&lt;li&gt;&amp;rdquo;+&amp;ldquo;连接的表达式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;相同的字符串常量或结果相同的字符串常量表达式创建字符串对象时，
如果常量池中已经存在，相同序列的字符串，则该对象直接指向；不存在时，会在常量池创建一个新的字符串。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String a1 = &amp;quot;abc&amp;quot;;
String a2 = &amp;quot;abc&amp;quot;;
String a3 = &amp;quot;a&amp;quot;+&amp;quot;bc&amp;quot;;
System,out.println(a1==a2+&amp;quot;\t&amp;quot;+a2==a3); //true true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为字符串序列相同，指向的常量池中同一个字符串，所以为true。&lt;/p&gt;

&lt;p&gt;使用 new 创建字符串对象时，会在堆中创建一个新的String对象，并且该String对象的char value[]会指向常量池中的字符串，不存在则创建。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
String b1 = new String(&amp;quot;abc&amp;quot;);
String b2 = new String(&amp;quot;abc&amp;quot;);
System.out.println(b1==b2); //false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用new会在堆中创建新的对象,地址当然不同.&lt;/p&gt;

&lt;h3 id=&#34;string&#34;&gt;String +&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&amp;rdquo; &amp;ldquo;+[String] 或 [String]+[String]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;会在编译时,调用StringBuilder的append()和toString(),最终指向的是堆上新创建的String对象.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String c1 = &amp;quot;abc&amp;quot;;
String c2 = &amp;quot;123&amp;quot;+c1;
String c3 = &amp;quot;123abc&amp;quot;;
System.out.println(c2==c3); //false
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&amp;rdquo; &amp;ldquo;+&amp;rdquo; &amp;ldquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[final String]+[final String] 或 [final String]+&amp;rdquo; &amp;ldquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当final修饰的对象发生连接动作时，虚拟机会进行优化，将表达式结果直接赋值给目标变量.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final String a = &amp;quot;hello &amp;quot;;
final String b = &amp;quot;world&amp;quot;;
String c = a + &amp;quot;world&amp;quot;;
String d = &amp;quot;hello world&amp;quot;;
System.out.println(c==d); //true
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;string-intern&#34;&gt;String.intern()&lt;/h2&gt;

&lt;p&gt;是一个 Native 方法，调用 C++的 StringTable::intern&lt;/p&gt;

&lt;p&gt;如果常量池中已经存在该字符串，则返回池中的字符串；否则将此字符串添加到常量池中，并返回引用。&lt;/p&gt;

&lt;h2 id=&#34;string-substring&#34;&gt;String.substring()&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//JDK1.6
public String substring(int beginIndex) {
	return substring(beginIndex, count);
}
public String substring(int beginIndex, int endIndex) {
	if (beginIndex &amp;lt; 0) {
		throw new StringIndexOutOfBoundsException(beginIndex);
	}
	if (endIndex &amp;gt; count) {
		throw new StringIndexOutOfBoundsException(endIndex);
	}
	if (beginIndex &amp;gt; endIndex) {
		throw new StringIndexOutOfBoundsException(endIndex - beginIndex);
	}
	return ((beginIndex == 0) &amp;amp;&amp;amp; (endIndex == count)) ? this :
		new String(offset + beginIndex, endIndex - beginIndex, value);
}

String(int offset, int count, char value[]) {
	this.value = value;
	this.offset = offset;
	this.count = count;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JDK1.6 中的实现只是调整了 offset 和 count ,使用的是共享的字符数组。&lt;/p&gt;

&lt;p&gt;当使用substring截取一个很长的字符串的2个字符时，会占用这个长字符串，不能垃圾回收。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//JDK 1.8
public String substring(int beginIndex) {
        if (beginIndex &amp;lt; 0) {
            throw new StringIndexOutOfBoundsException(beginIndex);
        }
        int subLen = value.length - beginIndex;
		if (subLen &amp;lt; 0) {
            throw new StringIndexOutOfBoundsException(subLen);
        }
        return (beginIndex == 0) ? this : new String(value, beginIndex, subLen);
}

public String substring(int beginIndex, int endIndex) {
		if (beginIndex &amp;lt; 0) {
			throw new StringIndexOutOfBoundsException(beginIndex);
		}
		if (endIndex &amp;gt; value.length) {
			throw new StringIndexOutOfBoundsException(endIndex);
		}
		int subLen = endIndex - beginIndex;
		if (subLen &amp;lt; 0) {
			throw new StringIndexOutOfBoundsException(subLen);
		}
		return ((beginIndex == 0) &amp;amp;&amp;amp; (endIndex == value.length)) ? this : new String(value, beginIndex, subLen);
}

public String(char value[], int offset, int count) {
		if (offset &amp;lt; 0) {
			throw new StringIndexOutOfBoundsException(offset);
		}
		if (count &amp;lt; 0) {
			throw new StringIndexOutOfBoundsException(count);
		}
		// Note: offset or count might be near -1&amp;gt;&amp;gt;&amp;gt;1.
		if (offset &amp;gt; value.length - count) {
			throw new StringIndexOutOfBoundsException(offset + count);
		}
		this.value = Arrays.copyOfRange(value, offset, offset+count);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;分析一下 substring 源码&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;报StringIndexOutOfBoundsException异常

&lt;ul&gt;
&lt;li&gt;beginIndex &amp;lt; 0&lt;/li&gt;
&lt;li&gt;endIndex &amp;gt; value.length&lt;/li&gt;
&lt;li&gt;subLen &amp;lt; 0&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;subLen 是新的字符串的长度&lt;/li&gt;
&lt;li&gt;endIndex的意义不明确

&lt;ul&gt;
&lt;li&gt;理解为 beginIndex + subLen&lt;/li&gt;
&lt;li&gt;beginIndex &amp;lt;= endIndex &amp;lt;= value.length&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;当截取范围与原字符串相同返回this，否则 new 一个新的String对象,在构造方法中复制生成了新的 value。&lt;/li&gt;
&lt;li&gt;substring(1,1)

&lt;ul&gt;
&lt;li&gt;&amp;rdquo;&amp;ldquo;==s.substring(1,1) //true&lt;/li&gt;
&lt;li&gt;&amp;rdquo;&amp;ldquo;.equals(s.substring(1,1)) //false&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;备注&#34;&gt;备注&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;通过反射机制可以对String进行修改&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;== 和 equals()&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;== 比较引用是否指向堆内存中的同一个String对象&lt;/li&gt;
&lt;li&gt;equals() 比较的是字符串的内容是否相同&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;String StringBuilder StringBuffer 区别&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;String是不可变(final)类，每次在String对象上的操作都会生成一个新的对象；&lt;/li&gt;
&lt;li&gt;StringBuffer和StringBuilder是可变的，它允许在原来对象上进行操作，而不用每次增加对象；&lt;/li&gt;
&lt;li&gt;StringBuffer是线程安全的，但效率较低，而StringBuilder则不是线程安全的，效率最高&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;参考连接&#34;&gt;参考连接&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.importnew.com/21711.html&#34;&gt;浅谈Java String内幕（上）&lt;/a&gt; &amp;ndash; javap 查看字节码&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hollischuang.com/archives/99&#34;&gt;Java 7 源码学习系列（一）——String&lt;/a&gt; &amp;ndash; 看源码解释&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://brokendreams.iteye.com/blog/2260870&#34;&gt;关于Java String的一些总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>关于未来 2016/11</title>
      <link>https://www.xizero.com/zero/2016-11-21/</link>
      <pubDate>Mon, 21 Nov 2016 08:39:53 +0800</pubDate>
      
      <guid>https://www.xizero.com/zero/2016-11-21/</guid>
      <description>&lt;p&gt;11月21日 2016 :cloud:&lt;/p&gt;

&lt;p&gt;这几周一直在迷茫，明知自己没有多少东西，但还是提不起劲来。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“意识到了自己没有办法成为 top 1% 的程序员，还应该选择程序员的道路么？”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看到这句话的时候，的确很震惊，这不就是我的未来吗？&lt;/p&gt;

&lt;p&gt;从二流的大学生成为二流的程序员……&lt;/p&gt;

&lt;p&gt;瞬间秒杀掉了我所有的希望。&lt;/p&gt;

&lt;p&gt;可是，没有人天生就是 NO1 ，你为什么不能成为那个 top 1%?&lt;/p&gt;

&lt;p&gt;平地起高台，万事从头来。&lt;/p&gt;

&lt;p&gt;你需要是一个一个的小目标，在不经意间你就会发现，原来那个遥不可及的目标已经没那么困难了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我的小目标：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;总结整理 java web 基础&lt;/li&gt;
&lt;li&gt;总结整理 java web 框架&lt;/li&gt;
&lt;li&gt;学习计算机网络&lt;/li&gt;
&lt;li&gt;学习操作系统&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;一个2017的目标&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;阅读 Spring 源码&lt;/li&gt;
&lt;li&gt;开始新的生活&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>一个想法</title>
      <link>https://www.xizero.com/zero/%E4%B8%80%E4%B8%AA%E6%83%B3%E6%B3%95/</link>
      <pubDate>Sun, 20 Nov 2016 12:19:55 +0800</pubDate>
      
      <guid>https://www.xizero.com/zero/%E4%B8%80%E4%B8%AA%E6%83%B3%E6%B3%95/</guid>
      <description>&lt;p&gt;自己做了一个小东西，一个简单的 &lt;a href=&#34;http://hao.xizero.com&#34;&gt;网址索引&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;因为要显示每个网站的favicon，google一下，找到了一些还能用公共的api。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;google：&lt;a href=&#34;http://www.google.com/s2/favicons?domain=&#34;&gt;http://www.google.com/s2/favicons?domain=&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;BYI_API：&lt;a href=&#34;https://api.byi.pw/favicon/&#34;&gt;https://api.byi.pw/favicon/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他的都不能用了，谷歌还要翻墙，最后就用了BYI_API。&lt;/p&gt;

&lt;p&gt;一直都挺好的，被墙的网站也能返回，直到前几天（估计在11月12日左右），崩了（&amp;gt;_&amp;lt;）。&lt;/p&gt;

&lt;p&gt;面对满页的XX，我换了另一个。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://f.ydr.me/?url=&#34;&gt;http://f.ydr.me/?url=&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是，满页的ie图标是要干啥（不支持的被墙的网站）&lt;/p&gt;

&lt;p&gt;后来，看到了一个问答，大概是通过判断图片的MD5来判断是不是小地球（获取失败时返回），我灵感一动，两天的折磨……&lt;/p&gt;

&lt;p&gt;前段框架用的是刚学的vue.js 2，用过滤器 filters 不就可以了吗？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
{{data_url  | filter}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只要我把前面的链接获取到，然后判断那个图标是不是小地球，再来调用其他的api，不就可以了吗。&lt;/p&gt;

&lt;p&gt;但是 vue 不支持在绑定属性中使用过滤器，（&amp;gt;_&amp;lt;），好，再google，(⊙o⊙)哦，要用计算属性 computed 啊！？&lt;/p&gt;

&lt;p&gt;但是计算属性不能传参，（&amp;gt;_&amp;lt;），好，只能再找了，可以用 methods 。&lt;/p&gt;

&lt;p&gt;之前学习了fetch，用fetch下图标，然后直接返回图片，这儿遇到点问题，主要是图片的处理和到最后也没有解决的跨域问题。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
fetch(img_url)
.then(function(res){
    return res.blob();
})
.then(function(imageBlob){
    img_src = window.URL.createObjectURL(imageBlob);
    //more
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是一个简单的fetch获取图片的例子，复刻官网上的，本地图片可以加载。&lt;/p&gt;

&lt;p&gt;但是favicon api是不支持跨域请求，所以一直在做挣扎。&lt;/p&gt;

&lt;p&gt;在这段时间之中，把这个方法放到了mounted，想让图片直接在加载时判断。&lt;/p&gt;

&lt;p&gt;主要是因为好好的看了一下js的闭包，之前有过卡在这儿的经历，还好征服了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
for(var i=0;i&amp;lt;json.length;i++){
    (function(i){
        for(var j=0;j&amp;lt;json[i].list.length;j++){
            (function(j){
                fetch(
                &#39;https://s2.googleusercontent.com/s2/favicons?domain=&#39;
                +json[i].list[j].url,
                    {
                        mode:&amp;quot;cors&amp;quot;,
                        headers:{
                        &#39;Access-Control-Allow-Origin&#39;:&#39;*&#39;
                        }
                    }
                )
                .then(function(res){
                    return res.blob();
                })
                .then(function(imageBlob){
                    json[i].list[j].img
                    =window.URL.createObjectURL(imageBlob);
                })
            })(j);
        }
    })(i);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;痛苦的是解决fetch 的跨域问题&lt;/p&gt;

&lt;p&gt;fetch 的response 中有个mode的属性，可取值4个，包括 cors、no-cors等。&lt;/p&gt;

&lt;p&gt;默认为cors，但在请求图片时，浏览器会提醒跨域问题。
当设置为 no-cors 时， 虽然不会报错，但是你并不能获取resquest 中的data，所以然并软。&lt;/p&gt;

&lt;p&gt;还曾引入过fetch-jsonp.js，但是就像no-cors，获取不到内容。&lt;/p&gt;

&lt;p&gt;设置请求头中的Access-Control-Allow-Origin，会提示服务器不支持。&lt;/p&gt;

&lt;p&gt;就当我要放弃时，我又突发奇想，等网页加载完，判断下载本地的图片。&lt;/p&gt;

&lt;p&gt;不能直接获取图片的MD5，找到了别人写的代码，先变成Base64.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function getBase64Image(img) {
    var canvas = document.createElement(&amp;quot;canvas&amp;quot;);
    canvas.width = img.width;
    canvas.height = img.height;

    var ctx = canvas.getContext(&amp;quot;2d&amp;quot;);
    ctx.drawImage(img, 0, 0, img.width, img.height);

    var dataURL = canvas.toDataURL(&amp;quot;image/png&amp;quot;);
    return dataURL

    // return dataURL.replace(&amp;quot;data:image/png;base64,&amp;quot;, &amp;quot;&amp;quot;);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来，用SparkMD5，讲Base64编码，再比较。&lt;/p&gt;

&lt;p&gt;小心翼翼地试了下，好像可以。&lt;/p&gt;

&lt;p&gt;但是，当我写好了代码，请求时，浏览器报错传到函数里面的不是一个HTMLElement。
我想是不是因为图片还没有加载完成，获取不到节点，那就判断一下。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
if (img.complete) {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是，&lt;strong&gt;canvas&lt;/strong&gt; 不支持跨域 ！&lt;/p&gt;

&lt;p&gt;所以，我放弃了。&lt;/p&gt;

&lt;p&gt;我又重新看了一下开始的API，好像能用了，那就切换回来好了。&lt;/p&gt;

&lt;p&gt;看到他的代码开源，想要自己整一个,以防万一。&lt;/p&gt;

&lt;p&gt;（&amp;gt;_&amp;lt;）为什么是 拍X片 PHP ？？？&lt;/p&gt;

&lt;p&gt;结束&lt;/p&gt;

&lt;p&gt;后记&lt;/p&gt;

&lt;p&gt;当我兴致勃勃的去用java写一个api时，我卡在了线程同步……&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://www.xizero.com/about/</link>
      <pubDate>Sat, 19 Nov 2016 19:22:33 +0800</pubDate>
      
      <guid>https://www.xizero.com/about/</guid>
      <description>

&lt;h1 id=&#34;1月2日-2017&#34;&gt;1月2日，2017 🌤&lt;/h1&gt;

&lt;p&gt;元旦放假这几天，重新修改了主题，做了一些变化&lt;/p&gt;

&lt;p&gt;调整了网站的结构，分类归档&lt;/p&gt;

&lt;p&gt;今年，充满挑战和机遇，我应该怎么做？&lt;/p&gt;

&lt;p&gt;🐳&lt;/p&gt;

&lt;h1 id=&#34;11月19日-2016&#34;&gt;11月19日，2016.&lt;/h1&gt;

&lt;p&gt;早晨来了一场大雪，或许在深夜便开始了。&lt;/p&gt;

&lt;p&gt;这两天，学着别人的模板主题，自己拙略地仿写了一个，虽然粗糙，但毕竟费了一番心血。&lt;/p&gt;

&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;http://music.163.com/outchain/player?type=2&amp;id=28757341&amp;auto=1&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;现在的我，没有什么。&lt;/p&gt;

&lt;p&gt;轨迹也是这个时代的缩影，随着人潮和催促而蹉跎。&lt;/p&gt;

&lt;p&gt;这个网站是个开始。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Centos 配置</title>
      <link>https://www.xizero.com/note/Centos%20%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 18 Nov 2016 18:20:00 +0800</pubDate>
      
      <guid>https://www.xizero.com/note/Centos%20%E9%85%8D%E7%BD%AE/</guid>
      <description>

&lt;h2 id=&#34;ssh-配置修改&#34;&gt;SSH 配置修改&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#修改ssh配置
vim /etc/ssh/sshd_config

#使用第二代通讯协定
Protocol 2

#不容许空白密码
PermitEmptyPasswords no

#禁止root 使用SSH 登入
PermitRootLogin no

#重新启动sshd
systemctl restart sshd.service
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;更新系统和软件&#34;&gt;更新系统和软件&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum update &amp;amp;&amp;amp; yum upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;创建用户赋予权限&#34;&gt;创建用户赋予权限&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#创建用户，修改密码
useradd [username]
passwd [username]

#修改权限
EDITOR=nano visudo
#修改 %wheel ALL=(ALL) ALL

#修改用户组
usermod -aG wheel [username]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;更改计算机的名称&#34;&gt;更改计算机的名称&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo hostnamectl --static set-hostname &amp;lt;host-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;安装-mysql&#34;&gt;安装 MySQL&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#添加源
wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm

#安装软件包
rpm -ivh mysql-community-release-el7-5.noarch.rpm

#yum 安装
yum install mysql-server

#启动 mysql
systemctl start mysql

#修改root密码
mysqladmin -u root password &amp;quot;newpassword&amp;quot;

#本地登录
mysql -u root -p

#查看用户
mysql &amp;gt; select host,user from user;

#添加远程用户
mysql &amp;gt; Grant all privileges on *.* to &#39;zero&#39;@&#39;%&#39; identified by &#39;zero&#39; with grant option;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Git 常用命令</title>
      <link>https://www.xizero.com/note/Git%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 18 Nov 2016 18:20:00 +0800</pubDate>
      
      <guid>https://www.xizero.com/note/Git%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>

&lt;h2 id=&#34;设置配置文件&#34;&gt;设置配置文件&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git config [--global] user.name &amp;quot;[name]&amp;quot;
git config [--global] user.email &amp;quot;[email]&amp;quot;
git config --global color.ui true
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;生成ssh-key&#34;&gt;生成SSH Key&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 检查是否存在
cd ~/.ssh
# 生成SSH Key，在id_rsa.pub中
ssh-keygen -t rsa -C &amp;quot;your_email@example.com&amp;quot;
# 测试
ssh -T git@github.com
ssh -T git@git.coding.net
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;https-方式记住密码&#34;&gt;HTTPS 方式记住密码&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git config credential.helper store
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;初始化仓库&#34;&gt;初始化仓库&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 初始化仓库
git init [project-name]
# 克隆远程仓库
git clone [project-URL]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;查看当前状态&#34;&gt;查看当前状态&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;添加到暂存区&#34;&gt;添加到暂存区&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add [-A/.]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;提交代码&#34;&gt;提交代码&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git commit -m &amp;quot;edit message&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;创建分支&#34;&gt;创建分支&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 列出所有本地分支
git branch

# 新建一个分支，但依然停留在当前分支
git branch [branch-name]
# 新建一个分支，并切换到该分支
git checkout -b [branch]

# 切换到指定分支，并更新工作区
git checkout [branch-name]

# 删除分支
git branch -d [branch-name]

# 合并指定分支到当前分支
git merge [branch]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;远程仓库&#34;&gt;远程仓库&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 增加一个新的远程仓库，并命名
git remote add [name] [url]

# 查看当前的远程仓库
git remote -v
# 需要多个远程仓库时，再添加一个新的远程仓库
git remote set-url --add [name] [url]
# 推送多个远程仓库
git push all --all
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;推送&#34;&gt;推送&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 完整命令
git push origin [localbranch]:[remotebranch]
# 忽略远程分支，代表远程分支与本地分支名相同
git push origin [localbranch]
# 忽略本地分支，代表删除远程分支
git push origin :[remotebranch]
# 忽略分支，默认本地分支与远程分支关联
git push
# 设置分支关联
git push --set-upstream origin [remotebranch]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;拉取&#34;&gt;拉取&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 从远程仓库下载分支
git fetch origin master
# 合并分支到当前分支
git merge origin/master
# 拉取远程仓库分支，与当前分支合并
git pull origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;待补充……&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java IO</title>
      <link>https://www.xizero.com/java/java-io/</link>
      <pubDate>Fri, 18 Nov 2016 18:20:00 +0800</pubDate>
      
      <guid>https://www.xizero.com/java/java-io/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;关于 Java IO 还没有一个整体的结构，所以先写一点常用的东西&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;h3 id=&#34;io常执行的操作&#34;&gt;IO常执行的操作：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;文件的创建、删除、移动、复制&lt;/li&gt;
&lt;li&gt;对文件或网络套字节中读取和写入&lt;/li&gt;
&lt;li&gt;把对象序列化到持久储存中，并获取保存的对象&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;一点历史&#34;&gt;一点历史：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;JDK 1.0 ，Java 以 java.io 包中的 I/O API 的形式提供支持 I/O&lt;/li&gt;
&lt;li&gt;JDK 1.4 ，添加了 java.nio&lt;/li&gt;
&lt;li&gt;JDK 1.7 ，引入 NIO.2 的包来补充&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;注意&#34;&gt;注意：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;新的版本中，Path 接口是 java.io.File 类的升级&lt;/li&gt;
&lt;li&gt;JDK 1.7 中添加了 java.lang.AutoCloseable 接口，实现了 try-with-resources&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;文件系统-路径和一些工具类&#34;&gt;文件系统、路径和一些工具类&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/nio/file/Path.html&#34;&gt;Interface Path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/nio/file/FileSystem.html&#34;&gt;Class FileSystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/nio/file/Paths.html&#34;&gt;Class Paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/nio/file/FileSystems.html&#34;&gt;Class FileSystems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;创建一个路径&#34;&gt;创建一个路径&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Paths 的静态方法 get()&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Modifier and Type&lt;/th&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;static Path&lt;/td&gt;
&lt;td&gt;get(String first, String&amp;hellip; more)&lt;/td&gt;
&lt;td&gt;Converts a path string, or a sequence of strings that when joined form a path string, to a Path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;static Path&lt;/td&gt;
&lt;td&gt;get(URI uri)&lt;/td&gt;
&lt;td&gt;Converts the given URI to a Path object.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Path p = Paths.get(&amp;quot;C:/temp&amp;quot;);
Path p_ = Paths.get(&amp;quot;/home&amp;quot;,&amp;quot;user&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;FileSystem 的成员方法 getPath()&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;可以通过 FileSystems 的静态方法 getDefault()获取默认的FileSystem&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Modifier and Type&lt;/th&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;abstract Path&lt;/td&gt;
&lt;td&gt;getPath(String first, String&amp;hellip; more)&lt;/td&gt;
&lt;td&gt;Converts a path string, or a sequence of strings that when joined form a path string, to a Path.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Path p =FileSystes.getDefault().getPath(&amp;quot;/home&amp;quot;,&amp;quot;user&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;interface-path&#34;&gt;Interface Path&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/nio/file/Path.html&#34;&gt;JDK API : Interface Path&lt;/a&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Modifier and Type&lt;/th&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Path&lt;/td&gt;
&lt;td&gt;normalize()&lt;/td&gt;
&lt;td&gt;路径普通化 Returns a path that is this path with redundant name elements eliminated.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Path&lt;/td&gt;
&lt;td&gt;subpath(int beginIndex, int endIndex)&lt;/td&gt;
&lt;td&gt;截取子路径 Returns a relative Path that is a subsequence of the name elements of this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;判断路径开头和结尾&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;startsWith(Path other)&lt;/td&gt;
&lt;td&gt;Tests if this path starts with the given path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;startsWith(String other)&lt;/td&gt;
&lt;td&gt;Tests if this path starts with a Path, constructed by converting the given path string, in exactly the manner specified by the startsWith(Path) method.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;endsWith(Path other)&lt;/td&gt;
&lt;td&gt;Tests if this path ends with the given path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;endsWith(String other)&lt;/td&gt;
&lt;td&gt;Tests if this path ends with a Path, constructed by converting the given path string, in exactly the manner specified by the endsWith(Path) method.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;获取路径的相关信息&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Path&lt;/td&gt;
&lt;td&gt;getFileName()&lt;/td&gt;
&lt;td&gt;Returns the name of the file or directory denoted by this path as a Path object.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;FileSystem&lt;/td&gt;
&lt;td&gt;getFileSystem()&lt;/td&gt;
&lt;td&gt;Returns the file system that created this object.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Path&lt;/td&gt;
&lt;td&gt;getName(int index)&lt;/td&gt;
&lt;td&gt;Returns a name element of this path as a Path object.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;getNameCount()&lt;/td&gt;
&lt;td&gt;Returns the number of name elements in the path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Path&lt;/td&gt;
&lt;td&gt;getParent()&lt;/td&gt;
&lt;td&gt;Returns the parent path, or null if this path does not have a parent.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Path&lt;/td&gt;
&lt;td&gt;getRoot()&lt;/td&gt;
&lt;td&gt;Returns the root component of this path as a Path object, or null if this path does not have a root component.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Path to Path&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Path&lt;/td&gt;
&lt;td&gt;relativize(Path other)&lt;/td&gt;
&lt;td&gt;Constructs a relative path between this path and a given path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;路径替换拼接&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Path&lt;/td&gt;
&lt;td&gt;resolve(Path other)&lt;/td&gt;
&lt;td&gt;Resolve the given path against this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Path&lt;/td&gt;
&lt;td&gt;resolve(String other)&lt;/td&gt;
&lt;td&gt;Converts a given path string to a Path and resolves it against this Path in exactly the manner specified by the resolve method.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Path&lt;/td&gt;
&lt;td&gt;resolveSibling(Path other)&lt;/td&gt;
&lt;td&gt;Resolves the given path against this path&amp;rsquo;s parent path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Path&lt;/td&gt;
&lt;td&gt;resolveSibling(String other)&lt;/td&gt;
&lt;td&gt;Converts a given path string to a Path and resolves it against this path&amp;rsquo;s parent path in exactly the manner specified by the resolveSibling method.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;转换&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;isAbsolute()&lt;/td&gt;
&lt;td&gt;Tells whether or not this path is absolute.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Path&lt;/td&gt;
&lt;td&gt;toAbsolutePath()&lt;/td&gt;
&lt;td&gt;Returns a Path object representing the absolute path of this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;File&lt;/td&gt;
&lt;td&gt;toFile()&lt;/td&gt;
&lt;td&gt;Returns a File object representing this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Path&lt;/td&gt;
&lt;td&gt;toRealPath(LinkOption&amp;hellip; options)&lt;/td&gt;
&lt;td&gt;Returns the real path of an existing file.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;URI&lt;/td&gt;
&lt;td&gt;toUri()&lt;/td&gt;
&lt;td&gt;Returns a URI to represent this path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;toString()&lt;/td&gt;
&lt;td&gt;Returns the string representation of this path.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;*deleteIfExists(Path)  删除不存在path时，不会报 NoSuchFileException 异常 *&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java 修饰符</title>
      <link>https://www.xizero.com/java/java-%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link>
      <pubDate>Fri, 18 Nov 2016 18:20:00 +0800</pubDate>
      
      <guid>https://www.xizero.com/java/java-%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid>
      <description>

&lt;h2 id=&#34;分类&#34;&gt;分类&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;访问修饰符 &lt;code&gt;public&lt;/code&gt;、&lt;code&gt;private&lt;/code&gt;、&lt;code&gt;protected&lt;/code&gt;、default&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;非访问修饰符 &lt;code&gt;static&lt;/code&gt;、&lt;code&gt;final&lt;/code&gt;、&lt;code&gt;abstract&lt;/code&gt;、&lt;code&gt;synchronized&lt;/code&gt;、&lt;code&gt;transient&lt;/code&gt;、&lt;code&gt;volatile&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;访问修饰符&#34;&gt;访问修饰符&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;保护对类、变量、方法和构造方法的访问&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;公有访问修饰符-public&#34;&gt;公有访问修饰符 &amp;ndash; public&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;被声明为 public 的类、方法、构造方法和接口能够被任何其他类访问&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不同的包中，则需要导入相应 public 类所在的包。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;由于类的继承性，类所有的公有方法和变量都能被其子类继承&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;私有访问修饰符-private&#34;&gt;私有访问修饰符 &amp;ndash; private&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;被声明为 private 的方法、变量和构造方法只能被所属类访问&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;类和接口不能声明为 private&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;声明为私有访问类型的变量只能通过类中公共的 Getter\/Setter 方法被外部类访问&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;保护访问修饰符-protected&#34;&gt;保护访问修饰符 &amp;ndash; protected&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;被声明为 protected 的变量、方法和构造器能被同一个包中的任何其他类访问，也能够被不同包中的子类访问。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Protected 访问修饰符不能修饰类和接口，方法和成员变量能够声明为 protected，但是接口的成员变量和成员方法不能声明为 protected&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;子类能访问 Protected 修饰符声明的方法和变量&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;默认访问修饰符&#34;&gt;默认访问修饰符&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;接口里的变量都隐式声明为 public static final, 而接口里的方法默认情况下访问权限为 public&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;权限比较&#34;&gt;权限比较&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;访问修饰符&lt;/th&gt;
&lt;th&gt;所属类&lt;/th&gt;
&lt;th&gt;所属包的其他类&lt;/th&gt;
&lt;th&gt;子类&lt;/th&gt;
&lt;th&gt;其他包的其他类&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;public&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;protected&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;default&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;private&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;访问控制与继承&#34;&gt;访问控制与继承&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;继承中，子类的权限不能小于父类的。&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;父类中声明为 public 的方法在子类中也必须为 public。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;父类中默认修饰符声明的方法，能够在子类中声明为 protected。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;父类中声明为 private 的方法，不能够被继承。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;非访问修饰符&#34;&gt;非访问修饰符&lt;/h2&gt;

&lt;h3 id=&#34;static-修饰符&#34;&gt;static 修饰符&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;被 static 修饰的成员变量和成员方法独立于该类的任何对象，被所有对象共享。&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;静态变量&#34;&gt;静态变量&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;用static修饰的成员变量称为静态变量，其他的称为实例变量&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;静态变量在加载类的过程中完成空间分配，只有一份拷贝，可以直接用类名访问。&lt;/p&gt;

&lt;p&gt;实例变量在对象实例化时分配内存。&lt;/p&gt;

&lt;h4 id=&#34;静态方法&#34;&gt;静态方法&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;静态方法中不能用 this 和 super 关键字，不能直接访问所属类的实例变量和实例方法，只能访问所属类的静态成员变量和成员方法&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;静态代码块&#34;&gt;静态代码块&lt;/h4&gt;

&lt;p&gt;请看代码块相关内容。&lt;/p&gt;

&lt;h4 id=&#34;静态导入&#34;&gt;静态导入&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 导入某个特定的静态方法
import static packageName.className.methonName;

// 导入类中的所有静态成员
import static packageName.className.*;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以在当前类中直接用方法名调用静态方法，不必再通过类名来访问。&lt;/p&gt;

&lt;h3 id=&#34;final-修饰符&#34;&gt;final 修饰符&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;最终的，不可改变&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;final-变量&#34;&gt;final 变量&lt;/h4&gt;

&lt;p&gt;final 变量即常量，仅可以赋值一次。&lt;/p&gt;

&lt;p&gt;final 修饰的成员变量，要显示初始化，如果没有只能在构造函数中进行一次赋值&lt;/p&gt;

&lt;p&gt;当变量为引用类型的时候，不可以改变引用对象，但可以改变对象的属性等。&lt;/p&gt;

&lt;h4 id=&#34;final-方法&#34;&gt;final 方法&lt;/h4&gt;

&lt;p&gt;final 可以被子类继承，但不可以覆盖。&lt;/p&gt;

&lt;h4 id=&#34;final-类&#34;&gt;final 类&lt;/h4&gt;

&lt;p&gt;final 类不可继承。&lt;/p&gt;

&lt;h4 id=&#34;final-static&#34;&gt;final static&lt;/h4&gt;

&lt;p&gt;成员变量，必须显示初始化，不可以修改，成员方法不可覆盖，可以通过类名直接访问。&lt;/p&gt;

&lt;h3 id=&#34;abstract-修饰符&#34;&gt;Abstract 修饰符&lt;/h3&gt;

&lt;p&gt;用来定义抽象方法和抽象类。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;abstract 不可以 与 final , private , static 共存&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Abstract 修饰后，必须通过类继承或者接口实现来重写，否则就是摆设。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;final 修饰的类 \ 方法 \ 属性均不可再次更改，故而不可以被重写。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;private 修饰的类只可以定义在内部类；private 修饰的方法 \ 属性只可以在类中调用，重写时是访问不到这些方法和属性的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;static 静态的，其修饰的方法 \ 属性，是随着类的创建而创建，类的消亡而消亡，在编译时就已经确定的东西；但是 abstract 是 dynamic（动态）的，其必须通过类继承或接口实现来动态重写 abstract 方法。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;synchronized-修饰符&#34;&gt;Synchronized 修饰符&lt;/h3&gt;

&lt;p&gt;Synchronized 关键字声明的方法同一时间只能被一个线程访问&lt;/p&gt;

&lt;h3 id=&#34;transient-修饰符&#34;&gt;Transient 修饰符&lt;/h3&gt;

&lt;p&gt;序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机 (JVM) 跳过该特定的变量。&lt;/p&gt;

&lt;p&gt;该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。&lt;/p&gt;

&lt;h3 id=&#34;volatile-修饰符&#34;&gt;Volatile 修饰符&lt;/h3&gt;

&lt;p&gt;Volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。&lt;/p&gt;

&lt;p&gt;一个 volatile 对象引用可能是 null。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java 反射</title>
      <link>https://www.xizero.com/java/java-%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Fri, 18 Nov 2016 18:20:00 +0800</pubDate>
      
      <guid>https://www.xizero.com/java/java-%E5%8F%8D%E5%B0%84/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;反射是将java 类中的各种成分映射成相应的类。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。&lt;/p&gt;

&lt;h2 id=&#34;class-name&#34;&gt;Class Name&lt;/h2&gt;

&lt;h3 id=&#34;获取完整类名&#34;&gt;获取完整类名&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String className = class.getName();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;获取不包含包名的类名&#34;&gt;获取不包含包名的类名&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String simpleClassName = class.getWSimpleName();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;class-modifies&#34;&gt;Class Modifies&lt;/h2&gt;

&lt;h3 id=&#34;获取修饰class-对象的访问修饰符&#34;&gt;获取修饰Class 对象的访问修饰符&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;int modifiers = class.getModifiers();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;检查修饰符&#34;&gt;检查修饰符&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import  java.lang.reflect.Modifier;

Modifier.isAbstract(int modifiers)
Modifier.isFinal(int modifiers)
Modifier.isInterface(int modifiers)
Modifier.isNative(int modifiers)
Modifier.isPrivate(int modifiers)
Modifier.isProtected(int modifiers)
Modifier.isPublic(int modifiers)
Modifier.isStatic(int modifiers)
Modifier.isStrict(int modifiers)
Modifier.isSynchronized(int modifiers)
Modifier.isTransient(int modifiers)
Modifier.isVolatile(int modifiers)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;package-info&#34;&gt;Package Info&lt;/h2&gt;

&lt;p&gt;获取包的相关信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Package package = class.getPackage();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;superclass&#34;&gt;Superclass&lt;/h2&gt;

&lt;p&gt;获取超类&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Class superclass = class.getSuperclass();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;implemented-interfaces&#34;&gt;Implemented Interfaces&lt;/h2&gt;

&lt;p&gt;获得类实现的接口的列表&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Class[] interfaces = class.getInterfaces();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要获取一个给定类的完整的所实现接口的列表，需要递归查询该类以及它的超类。&lt;/p&gt;

&lt;h2 id=&#34;constructors&#34;&gt;Constructors&lt;/h2&gt;

&lt;h3 id=&#34;获得构造函数&#34;&gt;获得构造函数&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Constructor[] constructors = class.getConstructors();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;获取指定参数的构造函数&#34;&gt;获取指定参数的构造函数&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Constructor constructor = class.getConstructor(new Class[]{String.class});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;获取构造函数的参数&#34;&gt;获取构造函数的参数&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Class[] parameterTypes = constructor.getParameterTypes();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;调用构造函数-实例化对象&#34;&gt;调用构造函数，实例化对象&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Constructor constructor = MyObject.class.getConstructor(String.class);
MyObject myObject = (MyObject) constructor.newInstance(&amp;quot;参数&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;methods&#34;&gt;Methods&lt;/h2&gt;

&lt;h3 id=&#34;获取类中的公共方法&#34;&gt;获取类中的公共方法&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Method[] method = class.getMethods();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;获取指定的方法&#34;&gt;获取指定的方法&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//不存在与参数匹配的方法时，报 NoSuchMethodException 异常
Method method = class.getMethod(&amp;quot;doSomething&amp;quot;, new Class[]{String.class});
Method method = aClass.getMethod(&amp;quot;doSomething&amp;quot;, null);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;获取方法的参数&#34;&gt;获取方法的参数&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Class[] parameterTypes = method.getParameterTypes();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;获取方法的返回值类型&#34;&gt;获取方法的返回值类型&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Class returnType = method.getReturnType();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;调用方法&#34;&gt;调用方法&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Method.invoke(Object target, Object... parameters)
//参数  target  是要调用方法的对象
//静态方法需要提供null作为参数，非静态方法需要提供对象的实例。

Method method = MyObject.class.getMethod(&amp;quot;doSomething&amp;quot;, String.class);
Object returnValue = method.invoke(null, &amp;quot;parameter-value1&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;fields&#34;&gt;Fields&lt;/h2&gt;

&lt;h3 id=&#34;获取类的公共字段&#34;&gt;获取类的公共字段&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Field[] fields = class.getFields();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;获取指定字段名的字段&#34;&gt;获取指定字段名的字段&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Field field = class.getField(&amp;quot;字段名&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;根据字段获取字段名&#34;&gt;根据字段获取字段名&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String fieldName = field.getName();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;根据字段获取字段类型&#34;&gt;根据字段获取字段类型&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Class fieldType = field.getType();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;通过字段获取设置字段的值&#34;&gt;通过字段获取设置字段的值&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//参数objectInstance必须是拥有该字段的实例
Class  class_  = MyObject.class
Field field = class_.getField(&amp;quot;字段名&amp;quot;);
MyObject objectInstance = new MyObject();
Object value = field.get(objectInstance);
field.set(objetInstance, value);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;annotations&#34;&gt;Annotations&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Annotation[] annotations = class.getAnnotations();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;关于私有成员&#34;&gt;关于私有成员&lt;/h2&gt;

&lt;h3 id=&#34;私有字段&#34;&gt;私有字段&lt;/h3&gt;

&lt;p&gt;获得私有字段，仅仅在当前类中&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Field field = class.getDeclaredField(String name);

Field[] fields = class.getDeclaredFields();

field.setAccessible(true); //关闭对特定的Field实例的访问检查
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;私有方法&#34;&gt;私有方法&lt;/h3&gt;

&lt;p&gt;获得私有方法，仅仅在当前类中&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Method  method = class.getDeclaredMethod(String name, Class[ ] parameterTypes);

Method[] method = class.getDeclaredMethods();

method.setAccessible(true); //关闭对特定的Method实例的访问检查
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;数组&#34;&gt;数组&lt;/h2&gt;

&lt;h3 id=&#34;创建数组&#34;&gt;创建数组&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.lang.reflect.Array;

int[] intArray = (int[]) Array.newInstance(int.class, 3);
//第一个参数int.class指定了数组类型。
//第二个参数声明了数组大小。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;get-和-set&#34;&gt;get 和 set&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Array.get(数组实例,序列);

Array.set(数组实例,序列,值);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;获取数组的类型&#34;&gt;获取数组的类型&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Class class_ = class.getComponentType();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#参考
- &lt;a href=&#34;http://www.cnblogs.com/penghongwei/p/3299688.html&#34;&gt;Java 反射 【译】&lt;/a&gt;
- &lt;a href=&#34;http://tutorials.jenkov.com/java-reflection/index.html&#34;&gt;java-reflection [英] &lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java 异常</title>
      <link>https://www.xizero.com/java/java-%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Fri, 18 Nov 2016 18:20:00 +0800</pubDate>
      
      <guid>https://www.xizero.com/java/java-%E5%BC%82%E5%B8%B8/</guid>
      <description>

&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;

&lt;p&gt;编译错误和运行时错误&lt;/p&gt;

&lt;h2 id=&#34;捕获异常&#34;&gt;捕获异常&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;try {
//会产生异常的代码
} catch (Exception e){
//处理异常的代码
}
finally {
//不管是否产生异常都会执行的代码
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;捕获多个异常&#34;&gt;捕获多个异常&lt;/h2&gt;

&lt;p&gt;1.7 支持单一的catch语句中捕获多个异常，每个异常之间使用管道符号 &lt;code&gt;|&lt;/code&gt;隔开&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;catch (excepetion-1 | exception-2 ... e) {
    // 相同的处理代码
}
catch (excepetion-n e) {
    //其他的处理代码
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;try-with-resource&#34;&gt;try-with-resource&lt;/h2&gt;

&lt;p&gt;1.7 之前的关闭资源时，会使用 finally ，但是关闭时产生异常会嵌套很多层。
1.7 添加 try-with-resource 语句，但是只用实现了 java.lang.AutoCloseable 的类才能关掉。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//try ( resource ) { }
try (Statement stmt = con.createStatement()) { }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;java-lang-exception&#34;&gt;java.lang.Exception&lt;/h2&gt;

&lt;p&gt;Exception 覆盖了 toString () , 返回对异常的说明。
printStackTrace 方法 对 Exception 追踪，打印出对异常的描述。&lt;/p&gt;

&lt;p&gt;catch 语句的顺序很重要，JVM 根据其顺序来匹配异常，Exception 的 catch 语句必须放在最后。&lt;/p&gt;

&lt;h3 id=&#34;throw-和-throws&#34;&gt;throw 和 throws&lt;/h3&gt;

&lt;p&gt;throw : 用于抛出一个异常对象。
throws：用于方法名之后，表示该方法可能抛出异常的类型。&lt;/p&gt;

&lt;h3 id=&#34;自定义异常&#34;&gt;自定义异常&lt;/h3&gt;

&lt;p&gt;通过继承异常类，可以自定义异常。通过throw来抛出自定义异常。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java 排序</title>
      <link>https://www.xizero.com/java/java-%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Fri, 18 Nov 2016 18:20:00 +0800</pubDate>
      
      <guid>https://www.xizero.com/java/java-%E6%8E%92%E5%BA%8F/</guid>
      <description>

&lt;h1 id=&#34;comparable-vs-comparator&#34;&gt;Comparable vs Comparator&lt;/h1&gt;

&lt;h2 id=&#34;comparable&#34;&gt;Comparable&lt;/h2&gt;

&lt;p&gt;Comparable 需要比较的对象类继承该接口，并实现 &lt;code&gt;compareTo(Object obj)&lt;/code&gt; 方法。&lt;/p&gt;

&lt;h3 id=&#34;api-http-tool-oschina-net-uploads-apidocs-jdk-zh-java-lang-comparable-html&#34;&gt;&lt;a href=&#34;http://tool.oschina.net/uploads/apidocs/jdk-zh/java/lang/Comparable.html&#34;&gt;API&lt;/a&gt;&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;摘要&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;int    compareTo(T o)&lt;/td&gt;
&lt;td&gt;比较此对象与指定对象的顺序。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;注意使用泛型&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class 类名 implements Comparable&amp;lt;类名&amp;gt;{
    //……
    @Override
    public int compareTo(类名 o) {
        //大于返回正数，小于返回负数，等于返回0
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;备注&#34;&gt;备注&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;java.util.Collections.sort(List)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.util.Arrays.sort(Object[])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;comparator&#34;&gt;Comparator&lt;/h2&gt;

&lt;p&gt;Comparator 需要创建一个比较器（类），来继承该接口，并实现 &lt;code&gt;compare(Object o1, Objecto2)&lt;/code&gt; 方法。&lt;/p&gt;

&lt;p&gt;适合定义多种比较属性。&lt;/p&gt;

&lt;h3 id=&#34;api-http-tool-oschina-net-uploads-apidocs-jdk-zh-java-util-comparator-html&#34;&gt;&lt;a href=&#34;http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/Comparator.html&#34;&gt;API&lt;/a&gt;&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;摘要&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;int    compare(T o1, T o2)&lt;/td&gt;
&lt;td&gt;比较用来排序的两个参数。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;例&#34;&gt;例&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class EmComparable implements Comparator&amp;lt;类名&amp;gt; {
    @Override
    public int compare(类名 o1,类名 o2) {
        //大于返回正数，小于返回负数，等于返回0
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;备注-1&#34;&gt;备注&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;java.util.Collections.sort(List, Comparator)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.util.Arrays.sort(Object[], Comparator)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://fuxueliang.com/tech/2013/05/26/java-sorting-comparator-vs-comparable-tutorial/&#34;&gt;Java排序: Comparator vs Comparable 入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hollischuang.com/archives/1292&#34;&gt;简单介绍Java中Comparable和Comparator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Java 接口 抽象类 多态</title>
      <link>https://www.xizero.com/java/java-%E6%8E%A5%E5%8F%A3-%E6%8A%BD%E8%B1%A1%E7%B1%BB-%E5%A4%9A%E6%80%81/</link>
      <pubDate>Fri, 18 Nov 2016 18:20:00 +0800</pubDate>
      
      <guid>https://www.xizero.com/java/java-%E6%8E%A5%E5%8F%A3-%E6%8A%BD%E8%B1%A1%E7%B1%BB-%E5%A4%9A%E6%80%81/</guid>
      <description>

&lt;h2 id=&#34;什么是接口&#34;&gt;什么是接口？&lt;/h2&gt;

&lt;p&gt;接口是一种服务提供者与服务使用者之间的协议。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;接口的定义&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;访问修饰符 interface  接口名 extends  父接口列表{

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;接口的实现&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;访问修饰符 class 类名 extends 父类 implements  接口列表{

}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;接口中的成员&#34;&gt;接口中的成员&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;字段&lt;/strong&gt;
* 必须初始化
* 默认：&lt;code&gt;public&lt;/code&gt; &lt;code&gt;static&lt;/code&gt; &lt;code&gt;final&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;抽象方法&lt;/strong&gt;
* 默认为： &lt;code&gt;public abstract&lt;/code&gt;
* 没有主体，由分号结束&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;静态方法和默认方法&lt;/strong&gt;
* Java 8 支持在接口中定义静态方法和默认方法&lt;/p&gt;

&lt;h1 id=&#34;抽象类&#34;&gt;抽象类&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;抽象类和抽象方法有 &lt;code&gt;abstract&lt;/code&gt; 修饰符修饰。&lt;/li&gt;
&lt;li&gt;包含抽象方法的类必须定义为抽象类。&lt;/li&gt;
&lt;li&gt;抽象类不能被实例化，抽象方法必须在子类中被实现。&lt;/li&gt;
&lt;li&gt;只有通过子类继承抽象类并覆盖了抽象类中的&lt;strong&gt;所有&lt;/strong&gt;抽象方法后，该子类才可以实例化。否则，该子类还是一个抽象类。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;什么时候使用抽象类和接口&#34;&gt;什么时候使用抽象类和接口？&lt;/h1&gt;

&lt;p&gt;接口：
* 实现多重继承&lt;/p&gt;

&lt;p&gt;抽象类：
* 成员方法需要默认实现
* 基本方法不断改变&lt;/p&gt;

&lt;h1 id=&#34;多态&#34;&gt;多态&lt;/h1&gt;

&lt;p&gt;多态是同一个行为具有多个不同表现形式或形态的能力。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;父类引用指向子类对象，调用重写的方法&lt;/strong&gt;
&lt;strong&gt;接口引用指向实现类对象，调用实现的方法&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;条件&#34;&gt;条件&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;继承超类或实现接口&lt;/li&gt;
&lt;li&gt;方法的重写&lt;/li&gt;
&lt;li&gt;父类引用指向子类对象或接口引用指向实现类对象&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>