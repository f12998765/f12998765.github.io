<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>XIZERO</title>
    <link>http://hugo.xizero.com/index.xml</link>
    <description>Recent content on XIZERO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Feb 2017 20:35:59 +0800</lastBuildDate>
    <atom:link href="http://hugo.xizero.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CORS</title>
      <link>http://hugo.xizero.com/javaee/cors/</link>
      <pubDate>Mon, 27 Feb 2017 20:35:59 +0800</pubDate>
      
      <guid>http://hugo.xizero.com/javaee/cors/</guid>
      <description>

&lt;h1 id=&#34;cors&#34;&gt;CORS&lt;/h1&gt;

&lt;p&gt;跨域资源共享 ，Cross-Origin Resource Sharing ，简称 CORS。&lt;/p&gt;

&lt;p&gt;使用 XMLHttpRequest 对象和Fetch发起 HTTP 请求就必须遵守同源策略，CORS 是HTML5 的跨域解决方案。&lt;/p&gt;

&lt;p&gt;了解更多，参阅：&lt;a href=&#34;https://www.w3.org/TR/cors/&#34;&gt;https://www.w3.org/TR/cors/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;关于跨域请求&#34;&gt;关于跨域请求&lt;/h2&gt;

&lt;p&gt;理解上，跨域请求不是被服务器拒绝，而是&lt;strong&gt;返回结果被浏览器拦截&lt;/strong&gt;了，被拒绝的结果可以在浏览器的开发者工具中查看。&lt;/p&gt;

&lt;p&gt;其它，有些浏览器不允许从HTTPS的域跨域访问HTTP，比如Chrome和Firefox，会在请求发出前拦截。&lt;/p&gt;

&lt;p&gt;常用的跨域请求场景是：使用 XMLHttpRequest 或 Fetch发起跨站 HTTP 请求。&lt;/p&gt;

&lt;h2 id=&#34;cors-过程理解&#34;&gt;CORS 过程理解&lt;/h2&gt;

&lt;p&gt;首先明确，&lt;strong&gt;CORS 的关键是服务器&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;最简单的过程：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;浏览器发送 CORS 请求，在 header 中添加一个 &lt;code&gt;Origin&lt;/code&gt; 字段，其值为请求源（协议+地址+端口）&lt;/li&gt;
&lt;li&gt;服务器响应，并在 header 中添加 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 字段&lt;/li&gt;
&lt;li&gt;浏览器接收，判断 header 来确定是否拦截&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;cors-请求&#34;&gt;CORS 请求&lt;/h2&gt;

&lt;p&gt;浏览器将 CORS 请求分为两类，简单请求和预请求。&lt;/p&gt;

&lt;h3 id=&#34;简单请求&#34;&gt;简单请求&lt;/h3&gt;

&lt;p&gt;简单请求的定义：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;只使用 GET, HEAD 或者 POST 请求方法。&lt;/li&gt;
&lt;li&gt;使用 POST  请求时，数据类型(Content-Type)只能是 application/x-www-form-urlencoded, multipart/form-data 或 text/plain中的一种。&lt;/li&gt;
&lt;li&gt;不会使用自定义请求头&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;简单请求的响应就是最简单的过程，通过使用 Origin 和 Access-Control-Allow-Origin 就可以完成最简单的跨站请求。&lt;/p&gt;

&lt;h3 id=&#34;预请求&#34;&gt;预请求&lt;/h3&gt;

&lt;p&gt;预请求就是非简单请求。&lt;/p&gt;

&lt;p&gt;预请求的重点是必须发送一个 &lt;code&gt;OPTIONS&lt;/code&gt; 请求，来确定是否支持 CORS。浏览器确认之后，才会发送正式请求。原因是会对服务器的数据造成破坏。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;请求过程：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;发送一个 &lt;code&gt;OPEIONS&lt;/code&gt; 请求。一同发送的还包括三个请求头：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Origin - 源地址&lt;/li&gt;
&lt;li&gt;Access-Control-Request-Method - 跨域请求的 HTTP 方法列表&lt;/li&gt;
&lt;li&gt;Access-Control-Request-Headers - 跨域请求将发送的自定义头信息&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;服务器处理请求，返回响应。并且返回了相应的响应头：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Access-Control-Allow-Origin&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Methods&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Headers&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Credentials&lt;/li&gt;
&lt;li&gt;Access-Control-Max-Age&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之后的正常请求，与简单请求相同。&lt;/p&gt;

&lt;h2 id=&#34;http-请求头&#34;&gt;HTTP 请求头&lt;/h2&gt;

&lt;h3 id=&#34;origin&#34;&gt;Origin&lt;/h3&gt;

&lt;p&gt;请求的源地址，包含请求的协议，地址，以及端口&lt;/p&gt;

&lt;p&gt;不限于 CORS 请求，普通请求也会携带&lt;/p&gt;

&lt;p&gt;当 Origin 的值为 null 时，表示请求地址为本地&lt;/p&gt;

&lt;h3 id=&#34;access-control-request-method&#34;&gt;Access-Control-Request-Method&lt;/h3&gt;

&lt;p&gt;在发送预请求中携带&lt;/p&gt;

&lt;p&gt;告诉服务器在正式请求时使用的 HTTP 方法&lt;/p&gt;

&lt;h3 id=&#34;access-control-request-headers&#34;&gt;Access-Control-Request-Headers&lt;/h3&gt;

&lt;p&gt;在发送预请求中携带&lt;/p&gt;

&lt;p&gt;告诉服务器在正式请求时会携带的自定义头信息。&lt;/p&gt;

&lt;p&gt;多个值，使用逗号分开&lt;/p&gt;

&lt;h2 id=&#34;http-响应头&#34;&gt;HTTP 响应头&lt;/h2&gt;

&lt;h3 id=&#34;access-control-allow-origin&#34;&gt;Access-Control-Allow-Origin&lt;/h3&gt;

&lt;p&gt;服务器响应的响应&lt;/p&gt;

&lt;p&gt;允许请求的 URL&lt;/p&gt;

&lt;p&gt;当值为 &lt;code&gt;*&lt;/code&gt; 时，接受任意地址的请求&lt;/p&gt;

&lt;h3 id=&#34;access-control-expose-headers&#34;&gt;Access-Control-Expose-Headers&lt;/h3&gt;

&lt;p&gt;允许请求的自定义头&lt;/p&gt;

&lt;h3 id=&#34;access-control-max-age&#34;&gt;Access-Control-Max-Age&lt;/h3&gt;

&lt;p&gt;预请求结果的有效期，在有效期内，发送非简单请求，不需要再发送预请求。&lt;/p&gt;

&lt;h3 id=&#34;access-control-allow-credentials&#34;&gt;Access-Control-Allow-Credentials&lt;/h3&gt;

&lt;p&gt;是否允许发送 Cookie和HTTP认证信息&lt;/p&gt;

&lt;p&gt;首先，在请求中设置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;xhr.withCredentials = true;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使得 Cookies 能随请求一同发送&lt;/p&gt;

&lt;p&gt;服务器接收响应，在响应头中包含 &lt;code&gt;Access-Control-Allow-Credentials: true&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;如果响应头中没有该字段，浏览器会把响应结果丢弃，保证信息安全。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;特别注意：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;发送 Cookie 时，必须指定允许请求的域名。&lt;/p&gt;

&lt;p&gt;不能设置为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Access-Control-Allow-Origin: * 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;access-control-allow-methods&#34;&gt;Access-Control-Allow-Methods&lt;/h3&gt;

&lt;p&gt;在预请求的响应中携带&lt;/p&gt;

&lt;p&gt;在正式请求时可使用的 HTTP 方法&lt;/p&gt;

&lt;h3 id=&#34;access-control-allow-headers&#34;&gt;Access-Control-Allow-Headers&lt;/h3&gt;

&lt;p&gt;在预请求的响应中携带&lt;/p&gt;

&lt;p&gt;在正式请求时可使用的自定义HTTP请求头&lt;/p&gt;

&lt;h2 id=&#34;在服务器端支持-cors&#34;&gt;在服务器端支持 CORS&lt;/h2&gt;

&lt;p&gt;相关信息，参阅 &lt;a href=&#34;https://enable-cors.org/index.html&#34;&gt;enable cross-origin resource sharing&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;在-tomcat-中设置-cors&#34;&gt;在 tomcat 中设置 CORS&lt;/h3&gt;

&lt;p&gt;在项目的 web.xml 中添加过滤器：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;filter&amp;gt;
  &amp;lt;filter-name&amp;gt;CorsFilter&amp;lt;/filter-name&amp;gt;
  &amp;lt;filter-class&amp;gt;org.apache.catalina.filters.CorsFilter&amp;lt;/filter-class&amp;gt;
&amp;lt;/filter&amp;gt;
&amp;lt;filter-mapping&amp;gt;
  &amp;lt;filter-name&amp;gt;CorsFilter&amp;lt;/filter-name&amp;gt;
  &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;
&amp;lt;/filter-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更多参数，请看 &lt;a href=&#34;http://tomcat.apache.org/tomcat-7.0-doc/config/filter.html#CORS_Filter&#34;&gt;http://tomcat.apache.org/tomcat-7.0-doc/config/filter.html#CORS_Filter&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;在-nginx-中设置-cors&#34;&gt;在 nginx 中设置 CORS&lt;/h3&gt;

&lt;p&gt;请直接参阅，&lt;a href=&#34;https://enable-cors.org/server_nginx.html&#34;&gt;https://enable-cors.org/server_nginx.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;在-java-web-项目中自定义-cors-过滤器&#34;&gt;在 java web 项目中自定义 CORS 过滤器&lt;/h3&gt;

&lt;p&gt;一个简单的 CORS 过滤器&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.x.filter;
import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletResponse;
import org.springframework.stereotype.Component;

@Component
public class SimpleCORSFilter implements Filter {

    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {
        HttpServletResponse response = (HttpServletResponse) res;
        response.setHeader(&amp;quot;Access-Control-Allow-Origin&amp;quot;, &amp;quot;*&amp;quot;);
        response.setHeader(&amp;quot;Access-Control-Allow-Credentials&amp;quot;, &amp;quot;true&amp;quot;);
        response.setHeader(&amp;quot;Access-Control-Allow-Methods&amp;quot;, &amp;quot;POST, GET, OPTIONS, DELETE&amp;quot;);
        response.setHeader(&amp;quot;Access-Control-Max-Age&amp;quot;, &amp;quot;3600&amp;quot;);
        response.setHeader(&amp;quot;Access-Control-Allow-Headers&amp;quot;, &amp;quot;Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers,Authorization&amp;quot;);
        chain.doFilter(req, res);
    }

    public void init(FilterConfig filterConfig) {}

    public void destroy() {}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;记得在 web.xml 中配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;  &amp;lt;!--CORS 过滤器--&amp;gt;
  &amp;lt;filter&amp;gt;
    &amp;lt;filter-name&amp;gt;CORSFilter&amp;lt;/filter-name&amp;gt;
    &amp;lt;filter-class&amp;gt;com.x.filter.SimpleCORSFilter&amp;lt;/filter-class&amp;gt;
  &amp;lt;/filter&amp;gt;
  &amp;lt;filter-mapping&amp;gt;
    &amp;lt;filter-name&amp;gt;CORSFilter&amp;lt;/filter-name&amp;gt;
    &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;
  &amp;lt;/filter-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS&#34;&gt;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2016/04/cors.html&#34;&gt;跨域资源共享 CORS 详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/cors/&#34;&gt;https://www.w3.org/TR/cors/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Swagger</title>
      <link>http://hugo.xizero.com/javaee/swagger/</link>
      <pubDate>Mon, 27 Feb 2017 20:34:55 +0800</pubDate>
      
      <guid>http://hugo.xizero.com/javaee/swagger/</guid>
      <description>

&lt;h1 id=&#34;swagger&#34;&gt;Swagger&lt;/h1&gt;

&lt;p&gt;官网：&lt;a href=&#34;http://swagger.io/&#34;&gt;http://swagger.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github：&lt;a href=&#34;https://github.com/swagger-api&#34;&gt;https://github.com/swagger-api&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;THE WORLD&amp;rsquo;S MOST POPULAR API FRAMEWORK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;世界上最流行的API框架&lt;/p&gt;

&lt;p&gt;Swagger is a powerful open source framework backed by a large ecosystem of tools that helps you design, build, document, and consume your RESTful APIs.&lt;/p&gt;

&lt;p&gt;Swagger是一个强大的开源框架，有工具生态系统支持，可帮助您设计，构建，记录和使用RESTful API。&lt;/p&gt;

&lt;p&gt;Swagger 官方提供了三个工具，分别用于 Design、Build和Document：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Swagger Editor

&lt;ul&gt;
&lt;li&gt;一个设计或编辑 API 的编辑器，能根据 Swagger 规范进行直观的反馈。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Swagger Codegen

&lt;ul&gt;
&lt;li&gt;将 Swagger 文档转换成代码。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Swagger UI

&lt;ul&gt;
&lt;li&gt;在浏览器中浏览测试 REST API 。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;swagger-editor&#34;&gt;Swagger Editor&lt;/h2&gt;

&lt;p&gt;Swagger Editor 是一个可视化的 API 编辑器，能根据 Swagger 规范实时校验文档。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ox.xizero.com/uploads/2017/02/swagger_editor.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;

&lt;p&gt;Swagger 提供了在线版的 Swagger Editor ：&lt;a href=&#34;http://editor.swagger.io/#/&#34;&gt;http://editor.swagger.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;也可以在 Github 上下载项目，在本地服务器（Nginx 或 npm http-server）上运行。&lt;/p&gt;

&lt;p&gt;Github地址：&lt;a href=&#34;https://github.com/swagger-api/swagger-editor&#34;&gt;https://github.com/swagger-api/swagger-editor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;也可以直接在拉取 docker 镜像，运行。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull swaggerapi/swagger-editor
docker run -p 80:8080 swaggerapi/swagger-editor
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;

&lt;p&gt;Swagger 的文档需要符合 OpenAPI Specification ，使用 json 或者 yaml 描述 API。&lt;/p&gt;

&lt;h3 id=&#34;openapi-specification&#34;&gt;OpenAPI Specification&lt;/h3&gt;

&lt;p&gt;查看官方文档之前，推荐阅读：&lt;a href=&#34;https://www.gitbook.com/book/huangwenchao/swagger/details&#34;&gt;《如何编写基于OpenAPI规范的API文档》&lt;/a&gt;，可以对文档结构有个了解。&lt;/p&gt;

&lt;p&gt;官方文档：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Swagger 官网上的：&lt;a href=&#34;http://swagger.io/specification/&#34;&gt;http://swagger.io/specification/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github上的：&lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md&#34;&gt;https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;国内关于 Swagger 的中文文档较少，简单地翻译了一下  OpenAPI Specification ，水平有限，见谅！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OpenAPI Specification 中文：&lt;a href=&#34;https://www.xizero.com/mixin/OpenAPISpecificationZh/&#34;&gt;https://www.xizero.com/mixin/OpenAPISpecificationZh/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Arnaud Lauret 大神的 OpenAPI Specification Visual Documentation ，可以对文档结构有个清晰了解。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenAPI Specification Visual Documentation：&lt;a href=&#34;http://openapi-specification-visual-documentation.apihandyman.io/&#34;&gt;http://openapi-specification-visual-documentation.apihandyman.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在 Github 上开源地址：&lt;a href=&#34;https://github.com/arno-di-loreto/openapi-specification-visual-documentation&#34;&gt;https://github.com/arno-di-loreto/openapi-specification-visual-documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;并且大神在其博客上写了一个系列教程：Writing OpenAPI (fka Swagger) Specification tutorial&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;大神的博客：&lt;a href=&#34;http://apihandyman.io/&#34;&gt;API Handyman - http://apihandyman.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;教程的地址：&lt;a href=&#34;http://apihandyman.io/writing-openapi-swagger-specification-tutorial-part-1-introduction/&#34;&gt;http://apihandyman.io/writing-openapi-swagger-specification-tutorial-part-1-introduction/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;相关&#34;&gt;相关&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JSON Schema&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&#34;http://json-schema.org/&#34;&gt;http://json-schema.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github：&lt;a href=&#34;https://github.com/json-schema-org/json-schema-spec&#34;&gt;https://github.com/json-schema-org/json-schema-spec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;YAML&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Official YAML Web Site：&lt;a href=&#34;http://www.yaml.org/&#34;&gt;http://www.yaml.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;阮一峰-YAML 语言教程：&lt;a href=&#34;http://www.ruanyifeng.com/blog/2016/07/yaml.html&#34;&gt;http://www.ruanyifeng.com/blog/2016/07/yaml.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Google Java Style Guide&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://google.github.io/styleguide/javaguide.html&#34;&gt;https://google.github.io/styleguide/javaguide.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://huangwenchao.gitbooks.io/swagger/content/&#34;&gt;如何编写基于OpenAPI规范的API文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://swagger.io/specification/&#34;&gt;SWAGGER SPECIFICATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/arno-di-loreto/openapi-specification-visual-documentation&#34;&gt;OpenAPI Specification Visual Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;swagger-codegen&#34;&gt;Swagger Codegen&lt;/h2&gt;

&lt;p&gt;Swagger Codegen 是一个代码生成工具，根据符合 Swagger 规范的 API 文档生成 API clients 、Server stubs 或者其他类型的文档，还有其他(JMeter)。支持的语言/框架，如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API clients: ActionScript, Bash, C# (.net 2.0, 4.0 or later), C++ (cpprest, Qt5, Tizen), Clojure, Dart, Elixir, Go, Groovy, Haskell, Java (Jersey1.x, Jersey2.x, OkHttp, Retrofit1.x, Retrofit2.x, Feign), Node.js (ES5, ES6, AngularJS with Google Closure Compiler annotations) Objective-C, Perl, PHP, Python, Ruby, Scala, Swift (2.x, 3.x), Typescript (Angular1.x, Angular2.x, Fetch, Node)&lt;/li&gt;
&lt;li&gt;Server stubs: C# (ASP.NET Core, NancyFx), Erlang, Go, Haskell, Java (MSF4J, Spring, Undertow, JAX-RS: CDI, CXF, Inflector, RestEasy), PHP (Lumen, Slim, Silex, Zend Expressive), Python (Flask), NodeJS, Ruby (Sinatra, Rails5), Scala (Finch, Scalatra)&lt;/li&gt;
&lt;li&gt;API documentation generators: HTML, Confluence Wiki&lt;/li&gt;
&lt;li&gt;Others: JMeter&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;安装-1&#34;&gt;安装&lt;/h2&gt;

&lt;h3 id=&#34;环境要求&#34;&gt;环境要求&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Java 7 or 8&lt;/li&gt;
&lt;li&gt;Apache maven 3.3.3 or greater&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;安装及配置环境，可以看  &lt;a href=&#34;https://www.xizero.com/tool/Java%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%81%A2%E5%A4%8D%E6%89%8B%E5%86%8C/&#34;&gt;《Java 开发环境恢复手册》&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;下载&#34;&gt;下载&lt;/h3&gt;

&lt;p&gt;本地环境是 win10 ，关于&lt;a href=&#34;https://github.com/swagger-api/swagger-codegen#os-x-users&#34;&gt; OS X&lt;/a&gt;、&lt;a href=&#34;https://github.com/swagger-api/swagger-codegen#docker&#34;&gt;docker&lt;/a&gt;下的使用，暂不了解。&lt;/p&gt;

&lt;p&gt;可以下载项目，自己编译运行，也可以直接下载 jar 文件执行。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;克隆编译，生成的 &lt;code&gt;swagger-codegen-cli.jar&lt;/code&gt; 文件在 &lt;code&gt;modules/swagger-codegen-cli/target/&lt;/code&gt; 下&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/swagger-api/swagger-codegen cd swagger
 -codegen 
mvn clean package 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;直接下载

&lt;ul&gt;
&lt;li&gt;Github ：&lt;a href=&#34;https://github.com/swagger-api/swagger-codegen/releases&#34;&gt;https://github.com/swagger-api/swagger-codegen/releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Maven ：&lt;a href=&#34;https://mvnrepository.com/artifact/io.swagger/swagger-codegen&#34;&gt;https://mvnrepository.com/artifact/io.swagger/swagger-codegen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;使用-1&#34;&gt;使用&lt;/h3&gt;

&lt;p&gt;编译生成的 &lt;code&gt;swagger-codegen-cli.jar&lt;/code&gt; 文件在 &lt;code&gt;modules/swagger-codegen-cli/target/&lt;/code&gt; 下 ，使用时要注意路径。&lt;/p&gt;

&lt;p&gt;而且克隆项目下的 &lt;code&gt;bin&lt;/code&gt; 目录中有很多脚本，可以很方便地使用。初学的话，也可以借鉴很多。&lt;/p&gt;

&lt;p&gt;下面，解释一下相关的命令：&lt;/p&gt;

&lt;h4 id=&#34;java-jar-swagger-codegen-cli-2-2-1-jar-help&#34;&gt;&lt;code&gt;java -jar swagger-codegen-cli-2.2.1.jar help&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;查看帮助信息&lt;/p&gt;

&lt;p&gt;命令格式：&lt;code&gt;swagger-codegen-cli &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意在 win 下使用，应该是 &lt;code&gt;java -jar swagger-codegen-cli-2.2.1.jar  &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]&lt;/code&gt;，其他地方相同不另做声明&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可以使用 &lt;code&gt;swagger-codegen-cli help &amp;lt;command&amp;gt;&lt;/code&gt; 查看相关命令的更多信息。&lt;/p&gt;

&lt;p&gt;常用的命令：
- config-help&lt;br /&gt;
    - 所选语言的配置帮助
- generate&lt;br /&gt;
    - 生成所选语言的代码
- help&lt;br /&gt;
    - 显示帮助信息
- langs&lt;br /&gt;
    - 显示支持的语言
- meta&lt;br /&gt;
    - MetaGenerator. Generator for creating a new template set and configuration for Co the language you specify, and includes default templates to include.
    - 用于自定义模板，暂不了解&lt;/p&gt;

&lt;h4 id=&#34;config-help&#34;&gt;&lt;code&gt;config-help&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;查看 &lt;code&gt;config-help&lt;/code&gt; 命令的使用：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;`java -jar swagger-codegen-cli-2.2.1.jar help config-help`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;config-help&lt;/code&gt; 命令格式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;swagger-codegen-cli config-help (-l &amp;lt;language&amp;gt; | --lang &amp;lt;language&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;config-help&lt;/code&gt; 命令参数：
- language - 所选语言&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config-help&lt;/code&gt; 命令样例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -jar swagger-codegen-cli-2.2.1.jar config-help -l spring
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取 &lt;code&gt;spring&lt;/code&gt; 的配置帮助，注意 &lt;code&gt;spring&lt;/code&gt; 的默认模板是 &lt;code&gt;spring-boot&lt;/code&gt;，若要生成 &lt;code&gt;spring-mvc&lt;/code&gt; ，需要在 &lt;code&gt;generate&lt;/code&gt; 中指定 &lt;code&gt;library&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 部分执行结果
library
    library template (sub-template) to use (Default: spring-boot)
        spring-boot - Spring-boot Server application using the SpringFox integration.
        spring-mvc - Spring-MVC Server application using the SpringFox integration.
        spring-cloud - Spring-Cloud-Feign client with Spring-Boot auto-configured settings.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;langs&#34;&gt;&lt;code&gt;langs&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;查看支持的语言和框架&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -jar swagger-codegen-cli-2.2.1.jar langs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行结果&lt;/p&gt;

&lt;p&gt;Available languages: [android, aspnet5, async-scala, cwiki, csharp, cpprest, dart, flash, python-flask, go, groovy, java, jaxrs, jaxrs-cxf, jaxrs-resteasy, jaxrs-spec, inflector, javascript, javascript-closure-angular, jmeter, nancyfx, nodejs-server, objc, perl, php, python, qt5cpp, ruby, scala, scalatra, silex-PHP, sinatra, rails5, slim, spring, dynamic-html, html, html2, swagger, swagger-yaml, swift, tizen, typescript-angular2, typescript-angular, typescript-node, typescript-fetch, akka-scala, CsharpDotNet2, clojure, haskell, lumen, go-server]&lt;/p&gt;

&lt;p&gt;了解相关语言的配置帮助，可使用 &lt;code&gt;config-help&lt;/code&gt; 命令。&lt;/p&gt;

&lt;h4 id=&#34;generate&#34;&gt;&lt;code&gt;generate&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;generate&lt;/code&gt; 的作用是根据 API 文档生成代码，是&lt;strong&gt;最重要的命令&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;首先查看 &lt;code&gt;generate&lt;/code&gt; 命令的帮助信息：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ java -jar swagger-codegen-cli-2.2.1.jar help generate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;概要，参数 &lt;code&gt;-i&lt;/code&gt; 和 &lt;code&gt;-l&lt;/code&gt; 是必要参数，其他参数可选。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;swagger-codegen-cli generate
        [(-a &amp;lt;authorization&amp;gt; | --auth &amp;lt;authorization&amp;gt;)]
        [--additional-properties &amp;lt;additional properties&amp;gt;]
        [--api-package &amp;lt;api package&amp;gt;] [--artifact-id &amp;lt;artifact id&amp;gt;]
        [--artifact-version &amp;lt;artifact version&amp;gt;]
        [(-c &amp;lt;configuration file&amp;gt; | --config &amp;lt;configuration file&amp;gt;)]
        [-D &amp;lt;system properties&amp;gt;] [--git-repo-id &amp;lt;git repo id&amp;gt;]
        [--git-user-id &amp;lt;git user id&amp;gt;] [--group-id &amp;lt;group id&amp;gt;]
        [--http-user-agent &amp;lt;http user agent&amp;gt;]
        (-i &amp;lt;spec file&amp;gt; | --input-spec &amp;lt;spec file&amp;gt;)
        [--import-mappings &amp;lt;import mappings&amp;gt;]
        [--instantiation-types &amp;lt;instantiation types&amp;gt;]
        [--invoker-package &amp;lt;invoker package&amp;gt;]
        (-l &amp;lt;language&amp;gt; | --lang &amp;lt;language&amp;gt;)
        [--language-specific-primitives &amp;lt;language specific primitives&amp;gt;]
        [--library &amp;lt;library&amp;gt;] [--model-name-prefix &amp;lt;model name prefix&amp;gt;]
        [--model-name-suffix &amp;lt;model name suffix&amp;gt;]
        [--model-package &amp;lt;model package&amp;gt;]
        [(-o &amp;lt;output directory&amp;gt; | --output &amp;lt;output directory&amp;gt;)]
        [--release-note &amp;lt;release note&amp;gt;] [(-s | --skip-overwrite)]
        [(-t &amp;lt;template directory&amp;gt; | --template-dir &amp;lt;template directory&amp;gt;)]
        [--type-mappings &amp;lt;type mappings&amp;gt;] [(-v | --verbose)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;部分参数解释&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-i &amp;lt;spec file&amp;gt;, --input-spec &amp;lt;spec file&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;必须&lt;/strong&gt; Swagger 规范文件的位置，可以是 url 也可以是文件的路径。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-l &amp;lt;language&amp;gt;, --lang &amp;lt;language&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;必须&lt;/strong&gt; 所选的语言或框架&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-o &amp;lt;output directory&amp;gt;, --output &amp;lt;output directory&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;生成项目的位置，默认是当前目录&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--library &amp;lt;library&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;指定子模板，库模板&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-c &amp;lt;configuration file&amp;gt;, --config &amp;lt;configuration file&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;设置配置文件的路径，文件格式为 json ，如 &lt;code&gt;{&amp;quot;optionKey&amp;quot;:&amp;quot;optionValue&amp;quot;, &amp;quot;optionKey1&amp;quot;:&amp;quot;optionValue1&amp;quot;...}&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;不同语言的配置信息不同，使用 &lt;code&gt;config-help -l {lang}&lt;/code&gt; 了解更多。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--api-package &amp;lt;api package&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;设置 api 类的包名&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--artifact-id &amp;lt;artifact id&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;设置 pom.xml 中的 artifactId&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--artifact-version &amp;lt;artifact version&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;设置生成 pom.xml 中的 artifact version&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--model-package &amp;lt;model package&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;设置 models 的包名&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--model-name-prefix &amp;lt;model name prefix&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;model 的前缀，默认为空字符串&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--model-name-suffix &amp;lt;model name suffix&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;model 的后缀，默认为空字符串&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--instantiation-types &amp;lt;instantiation types&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;设置实例化类型的映射。格式为 &lt;code&gt;type=instantiatedType&lt;/code&gt;，多个映射之间用逗号 &lt;code&gt;,&lt;/code&gt; 隔开。&lt;/p&gt;

&lt;p&gt;java 的一个例子: &lt;code&gt;array=ArrayList,map=HashMap&lt;/code&gt;，&lt;code&gt;array&lt;/code&gt; 类型在生成的代码中会实例化为 &lt;code&gt;ArrayList&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--type-mappings &amp;lt;type mappings&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;设置swagger规范类型和生成的代码类型之间的映射。例如 &lt;code&gt;array=List,map=Map,string=String&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;不了解 &lt;code&gt;instantiation-types&lt;/code&gt; 和 &lt;code&gt;type-mappings&lt;/code&gt; 的区别，待解。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;样例：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Github wiki 上的 &lt;a href=&#34;https://github.com/swagger-api/swagger-codegen/wiki/Server-stub-generator-HOWTO&#34;&gt;《Server stub generator HOWTO》&lt;/a&gt;，列举了生成多种语言框架 server 的命令。但是一些并不那么好使，比如 spring-mvc。&lt;/p&gt;

&lt;p&gt;wiki 例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate \
  -i http://petstore.swagger.io/v2/swagger.json \
  -l spring-mvc \
  -o samples/server/petstore/spring-mvc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是实际上，在 Swagger codegen v2.2.0 中 spring-mvc 被删掉了，但是作为了 spring 的一个非默认库，spring-boot 作为其默认库。&lt;/p&gt;

&lt;p&gt;具体细节&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;更新日志 &lt;a href=&#34;https://github.com/swagger-api/swagger-codegen/releases/tag/v2.2.0&#34;&gt;https://github.com/swagger-api/swagger-codegen/releases/tag/v2.2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/swagger-api/swagger-codegen/pull/3133&#34;&gt;[Spring] put spring-mvc and spring-boot under the same language gen #3133&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现在创建 spring-mvc ，应该这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -jar swagger-codegen-cli-2.2.1.jar generate -i swagger.yaml -l spring --library spring-mvc
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;swagger-codegen-总结&#34;&gt;Swagger codegen 总结&lt;/h3&gt;

&lt;p&gt;Swagger codegen 作用就是根据 json 或 yaml 格式的 API 文档来生成代码。&lt;/p&gt;

&lt;p&gt;基本掌握级别是会使用 &lt;code&gt;generate&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;其他进阶，如自定义模板、添加新的语言框架、工作流集成等等，可以看Github 上的 &lt;a href=&#34;https://github.com/swagger-api/swagger-codegen/blob/master/README.md&#34;&gt;README&lt;/a&gt; 或 &lt;a href=&#34;https://github.com/swagger-api/swagger-codegen/wiki&#34;&gt;wiki&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;当然最简单的生成，可以在 Swagger Editore 中使用 Generate Server 和 Generate Client。只是不如命令操作仔细。还有，在 Swagger codegen 的 Github 项目中 &lt;code&gt;bin&lt;/code&gt; 目录下有很多可用的脚本，可根据需要修改使用。&lt;/p&gt;

&lt;h3 id=&#34;参考-1&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/swagger-api/swagger-codegen&#34;&gt;Swagger Codegen Gtihub 项目&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/swagger-api/swagger-codegen/wiki&#34;&gt;Swagger Codegen Gtihub Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://javaarm.com/faces/display.xhtml;jsessionid=dkH9tZqNyijEI4XCAbpWtmV0?tid=3915&#34;&gt;Swagger Code Generator v2.1.5 README 中文翻译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/swagger-api/swagger-codegen/pull/3133&#34;&gt;[Spring] put spring-mvc and spring-boot under the same language gen #3133&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/wangjunjun2008/article/details/53200437&#34;&gt;swagger-codegen生成java客户端代码（其他语言类似）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;swagger-ui&#34;&gt;Swagger UI&lt;/h2&gt;

&lt;p&gt;Swagger UI  将 API 文档在浏览器中可视化。&lt;/p&gt;

&lt;p&gt;官方的 Demo ，地址：&lt;a href=&#34;http://petstore.swagger.io/&#34;&gt;http://petstore.swagger.io/&lt;/a&gt;。截图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ox.xizero.com/uploads/2017/02/swagger_ui.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;安装-2&#34;&gt;安装&lt;/h3&gt;

&lt;p&gt;可以从 &lt;a href=&#34;https://github.com/swagger-api/swagger-ui&#34;&gt;Github&lt;/a&gt; 下载项目，打开 &lt;code&gt;./dist/index.html&lt;/code&gt; 直接运行。&lt;/p&gt;

&lt;p&gt;关于 &lt;code&gt;Build&lt;/code&gt; 项目和在 &lt;code&gt;docker&lt;/code&gt;  中运行，暂不了解。&lt;/p&gt;

&lt;p&gt;可以编辑 &lt;code&gt;index.html&lt;/code&gt; ，对 &lt;code&gt;swaggerUi&lt;/code&gt; 对象自定义属性。&lt;/p&gt;

&lt;p&gt;相关属性，参阅 ： &lt;a href=&#34;https://github.com/swagger-api/swagger-ui#swaggerui&#34;&gt;https://github.com/swagger-api/swagger-ui#swaggerui&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;重要属性解释：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;url  设置默认文档路径&lt;/li&gt;
&lt;li&gt;docExpansion 控制列表显示：默认 none - 完全隐藏；list - 显示路径的操作列表；full - 完全展开&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;中文翻译设置，在 &lt;code&gt;index.html&lt;/code&gt; 中 30 行左右，去掉注释代码，修改为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#39;lang/translator.js&#39; type=&#39;text/javascript&#39;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&#39;lang/zh-cn.js&#39; type=&#39;text/javascript&#39;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cors-支持&#34;&gt;CORS 支持&lt;/h3&gt;

&lt;p&gt;关于 CORS 请看另一篇。&lt;/p&gt;

&lt;h3 id=&#34;参考-2&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/swagger-api/swagger-ui&#34;&gt;https://github.com/swagger-api/swagger-ui&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;学习-swagger-的总结&#34;&gt;学习 Swagger 的总结&lt;/h2&gt;

&lt;p&gt;Saggger 是世界上最流行的的 API 框架，提供了 API 设计、构建和展示的工具。但是相关的资料也有限，大概入了个门。&lt;/p&gt;

&lt;p&gt;关于 Swagger 的更多相关开源项目，可以在 &lt;a href=&#34;http://swagger.io/open-source-integrations/&#34;&gt;http://swagger.io/open-source-integrations/&lt;/a&gt; 查看。&lt;/p&gt;

&lt;p&gt;下一篇，学习如何从代码生成 API 文档 - SPringFox。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenAPI Specification</title>
      <link>http://hugo.xizero.com/mixin/OpenAPISpecificationZh/</link>
      <pubDate>Tue, 21 Feb 2017 19:04:12 +0800</pubDate>
      
      <guid>http://hugo.xizero.com/mixin/OpenAPISpecificationZh/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;v2.1 水平有限，见谅！关于安全和xml对象部分，并未翻译。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;openapi-规范&#34;&gt;OpenAPI 规范&lt;/h1&gt;

&lt;h2 id=&#34;fka-swagger-restful-api文档规范&#34;&gt;(fka Swagger RESTful API文档规范)&lt;/h2&gt;

&lt;h4 id=&#34;2-0-版本&#34;&gt;2.0 版本&lt;/h4&gt;

&lt;p&gt;这些关键词： &amp;ldquo;MUST&amp;rdquo;, &amp;ldquo;MUST NOT&amp;rdquo;, &amp;ldquo;REQUIRED&amp;rdquo;, &amp;ldquo;SHALL&amp;rdquo;, &amp;ldquo;SHALL NOT&amp;rdquo;, &amp;ldquo;SHOULD&amp;rdquo;, &amp;ldquo;SHOULD NOT&amp;rdquo;, &amp;ldquo;RECOMMENDED&amp;rdquo;, &amp;ldquo;MAY&amp;rdquo;, and &amp;ldquo;OPTIONAL&amp;rdquo; 在本文中按&lt;a href=&#34;http://www.ietf.org/rfc/rfc2119.txt&#34;&gt;RFC 2119&lt;/a&gt; 所描述的解释。&lt;/p&gt;

&lt;p&gt;Swagger 规范遵循&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;The Apache License, Version 2.0&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;

&lt;p&gt;Swagger™  是一个用于描述和记录 RESTful APIs 的项目。&lt;/p&gt;

&lt;p&gt;Swagger 规范定义了描述 API 所需的文件。这些文件可以被Swagger-UI项目用来显示API，也可以被Swagger-Codegen用来生成各种语言的客户端。其他程序也可以，如测试工具。&lt;/p&gt;

&lt;h2 id=&#34;修订记录&#34;&gt;修订记录&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;时间&lt;/th&gt;
&lt;th&gt;记录&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;2014-09-08&lt;/td&gt;
&lt;td&gt;发布Swagger 2.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1.2&lt;/td&gt;
&lt;td&gt;2014-03-14&lt;/td&gt;
&lt;td&gt;初步发布正式文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1.1&lt;/td&gt;
&lt;td&gt;2012-08-22&lt;/td&gt;
&lt;td&gt;发布 Swagger 1.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;2011-08-10&lt;/td&gt;
&lt;td&gt;首次发布 Swagger 规范&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;

&lt;h5 id=&#34;a-name-pathtemplating-a-path-templating-路径模板&#34;&gt;&lt;a name=&#34;pathTemplating&#34;&gt;&lt;/a&gt;Path Templating / 路径模板&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;路径模板是指用大括号({})标记的一段URL路径代替参数的用法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;a-name-mimetypes-a-mime-类型&#34;&gt;&lt;a name=&#34;mimeTypes&#34;&gt;&lt;/a&gt;Mime 类型&lt;/h5&gt;

&lt;p&gt;Mime 类型的定义分布在多个资源，minm 类型的定义应该符合&lt;a href=&#34;http://tools.ietf.org/html/rfc6838&#34;&gt;RFC 6838&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;一些 Minme 类型的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  text/plain; charset=utf-8
  application/json
  application/vnd.github+json
  application/vnd.github.v3+json
  application/vnd.github.v3.raw+json
  application/vnd.github.v3.text+json
  application/vnd.github.v3.html+json
  application/vnd.github.v3.full+json
  application/vnd.github.v3.diff
  application/vnd.github.v3.patch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types&#34;&gt;MDN-MIME 类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E5%AA%92%E4%BD%93%E7%B1%BB%E5%9E%8B&#34;&gt;维基百科-互联网媒体类型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;a-name-httpcodes-a-http-status-codes-http-状态码&#34;&gt;&lt;a name=&#34;httpCodes&#34;&gt;&lt;/a&gt;HTTP Status Codes / HTTP 状态码&lt;/h5&gt;

&lt;p&gt;HTTP 状态码是用来表示执行操作的状态。 可用的状态码由&lt;a href=&#34;http://tools.ietf.org/html/rfc7231#section-6&#34;&gt;RFC 7231&lt;/a&gt; 在 &lt;a href=&#34;http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml&#34;&gt;IANA Status Code Registry&lt;/a&gt; 中描述.&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81&#34;&gt;维基百科-HTTP状态码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;规范&#34;&gt;规范&lt;/h2&gt;

&lt;h3 id=&#34;格式&#34;&gt;格式&lt;/h3&gt;

&lt;p&gt;根据 Swagger 规范描述 RESTful API 的文档表示为一个 JSON 对象，并且符合 JSON 标准。YAML，作为 JSON 的超集，也可以用于 Swager 规范文件。&lt;/p&gt;

&lt;p&gt;例如：如果一个字段是数组变量，用 JSON 数组可以表示为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
   &amp;quot;field&amp;quot; : [...]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;虽然 API 使用JSON 描述，但是并不强制API使用JSON输入或输出。&lt;/p&gt;

&lt;p&gt;规范中的所有字段名都 &lt;strong&gt;区分大小写&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;模式包括两种字段，有声明名称的固定字段，和用正则表达式声明字段名的 Patterned 字段。Patterned 字段可以多次使用，每个都有唯一名称。&lt;/p&gt;

&lt;h3 id=&#34;文件结构&#34;&gt;文件结构&lt;/h3&gt;

&lt;p&gt;描述 API 的文件是一个单独文件。但是，定义部分可以由用户分割成多个独立文件。
用&lt;a href=&#34;http://json-schema.org&#34;&gt;JSON Schema&lt;/a&gt; 定义的&lt;code&gt;$ref&lt;/code&gt; 引入使用。&lt;/p&gt;

&lt;p&gt;按照惯例，Swagger规范文件被命名为&lt;code&gt;swagger.json&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;数据类型&#34;&gt;数据类型&lt;/h3&gt;

&lt;p&gt;Swagger规范中的基本数据类型基于&lt;a href=&#34;http://json-schema.org/latest/json-schema-core.html#anchor8&#34;&gt;JSON-Schema Draft 4&lt;/a&gt;. 使用JSON Schema Draft 4的子集&lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt;来描述模型。&lt;/p&gt;

&lt;p&gt;数据类型 &lt;code&gt;&amp;quot;file&amp;quot;&lt;/code&gt; 用于在&lt;a href=&#34;#parameterObject&#34;&gt;Parameter Object&lt;/a&gt; 设置参数类型，以及在 &lt;a href=&#34;#responseObject&#34;&gt;Response Object&lt;/a&gt; 响应返回一个文件。&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;dataTypeFormat&#34;&gt;&lt;/a&gt;数据有一个可选的修饰属性  &lt;code&gt;format&lt;/code&gt;. Swagger 使用规定好的 format 来更准确地确定使用的数据类型。 但是，&lt;code&gt;format&lt;/code&gt; 的值可以是任意的&lt;code&gt;string&lt;/code&gt;,可以用任意值来支持文档需要。像&lt;code&gt;&amp;quot;email&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;uuid&amp;quot;&lt;/code&gt; 等等，尽管它们没有在规范中定义但是仍可以使用。&lt;code&gt;format&lt;/code&gt;没有规定的类型遵循 JSON 标准中的定义(除了上面明确的 &lt;code&gt;file&lt;/code&gt; 类型). Swagger规范定义的格式如下：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;#dataTypeType&#34;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;#dataTypeFormat&#34;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;注释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int32&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;有符号32位&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;有符号64位&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;double&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;byte&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;byte&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;base64 编码字符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;binary&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;binary&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任何字节序列&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;date&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;full-date&lt;/code&gt; - &lt;a href=&#34;http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14&#34;&gt;RFC3339&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dateTime&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date-time&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date-time&lt;/code&gt; - &lt;a href=&#34;http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14&#34;&gt;RFC3339&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;password&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;password&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于提示隐藏输入&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;schema-模式&#34;&gt;Schema / 模式&lt;/h3&gt;

&lt;h4 id=&#34;a-name-swaggerobject-a-swagger-object&#34;&gt;&lt;a name=&#34;swaggerObject&#34;&gt;&lt;/a&gt;Swagger Object&lt;/h4&gt;

&lt;p&gt;这是 API 规范的根节点。它是以前Resource Listing和API声明(1.2版本及更早)的结合。&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;swaggerSwagger&#34;&gt;&lt;/a&gt;swagger&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; 指定使用的 Swagger 规范版本，Swagger UI 和其他客户端根据它来解释API文档。值必须是&lt;code&gt;&amp;quot;2.0&amp;quot;&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;swaggerInfo&#34;&gt;&lt;/a&gt;info&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#infoObject&#34;&gt;Info Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; 提供 API 的相关信息。如果需要，可以被客户端使用&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;swaggerHost&#34;&gt;&lt;/a&gt;host&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;提供 API 服务的 host 或 ip。必须是 host，不包括访问协议(http/https等)或子路径。可能包含端口。如果未定义，将使用文档所在的服务器，包括端口。不支持 &lt;a href=&#34;#pathTemplating&#34;&gt;path templating&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;swaggerBasePath&#34;&gt;&lt;/a&gt;basePath&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;提供相对于&lt;a href=&#34;#swaggerHost&#34;&gt;&lt;code&gt;host&lt;/code&gt;&lt;/a&gt;的基本路径。如果没有定义，API则直接在&lt;code&gt;host&lt;/code&gt;下服务。值必须以右斜杠(&lt;code&gt;/&lt;/code&gt;)开头. &lt;code&gt;basePath&lt;/code&gt; 不支持&lt;a href=&#34;#pathTemplating&#34;&gt;path templating&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;swaggerSchemes&#34;&gt;&lt;/a&gt;schemes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;code&gt;string&lt;/code&gt;]&lt;/td&gt;
&lt;td&gt;API 的传输协议。值必须在这个列表中：&lt;code&gt;&amp;quot;http&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;https&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;ws&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;wss&amp;quot;&lt;/code&gt;。 如果没有定义，默认使用访问 Swagger 的协议。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;swaggerConsumes&#34;&gt;&lt;/a&gt;consumes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;code&gt;string&lt;/code&gt;]&lt;/td&gt;
&lt;td&gt;API 可以使用的MIME 类型。 全局设置，但在特殊的API调用上可以覆盖。值必须是 &lt;a href=&#34;#mimeTypes&#34;&gt;Mime Types&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;swaggerProduces&#34;&gt;&lt;/a&gt;produces&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;code&gt;string&lt;/code&gt;]&lt;/td&gt;
&lt;td&gt;API 可以生成返回的MIME 类型。 全局设置，但在特殊的API调用上可以覆盖。值必须是 &lt;a href=&#34;#mimeTypes&#34;&gt;Mime Types&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;swaggerPaths&#34;&gt;&lt;/a&gt;paths&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#pathsObject&#34;&gt;Paths Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; API 访问路径。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;swaggerDefinitions&#34;&gt;&lt;/a&gt;definitions&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#definitionsObject&#34;&gt;Definitions Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义操作中的参数对象和响应对象，可在其他地方引用。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;swaggerParameters&#34;&gt;&lt;/a&gt;parameters&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#parametersDefinitionsObject&#34;&gt;Parameters Definitions Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义参数对象。该属性*不会*为全部操作定义全局参数。(相对于操作中的parameters)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;swaggerResponses&#34;&gt;&lt;/a&gt;responses&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#responsesDefinitionsObject&#34;&gt;Responses Definitions Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义响应对象。该属性*不会*为全部操作定义全局响应。(相对于操作中的responses)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;swaggerSecurityDefinitions&#34;&gt;&lt;/a&gt;securityDefinitions&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#securityDefinitionsObject&#34;&gt;Security Definitions Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义规范中使用的安全方案。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;swaggerSecurity&#34;&gt;&lt;/a&gt;security&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;a href=&#34;#securityRequirementObject&#34;&gt;Security Requirement Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A declaration of which security schemes are applied for the API as a whole. The list of values describes alternative security schemes that can be used (that is, there is a logical OR between the security requirements). Individual operations can override this definition.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;swaggerTags&#34;&gt;&lt;/a&gt;tags&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;a href=&#34;#tagObject&#34;&gt;Tag Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;A list of tags used by the specification with additional metadata. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the &lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt; must be declared. The tags that are not declared may be organized randomly or based on the tools&amp;rsquo; logic. Each tag name in the list MUST be unique.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;swaggerExternalDocs&#34;&gt;&lt;/a&gt;externalDocs&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#externalDocumentationObject&#34;&gt;External Documentation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;外部文档&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;patterned-objects&#34;&gt;Patterned Objects&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;swaggerExtensions&#34;&gt;&lt;/a&gt;^x-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Allows extensions to the Swagger Schema. The field name MUST begin with &lt;code&gt;x-&lt;/code&gt;, for example, &lt;code&gt;x-internal-id&lt;/code&gt;. The value can be &lt;code&gt;null&lt;/code&gt;, a primitive, an array or an object. See &lt;a href=&#34;#vendorExtensions&#34;&gt;Vendor Extensions&lt;/a&gt; for further details.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;a-name-infoobject-a-info-object&#34;&gt;&lt;a name=&#34;infoObject&#34;&gt;&lt;/a&gt;Info Object&lt;/h4&gt;

&lt;p&gt;提供 API 的相关信息。如果需要，可以被客户端使用，为了方便可以在Swagger-UI中呈现。&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-1&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;infoTitle&#34;&gt;&lt;/a&gt;title&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; 文档的标题&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;infoDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;关于文档简短描述，支持 Markdown &lt;a href=&#34;https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown&#34;&gt;GFM syntax&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;infoTermsOfService&#34;&gt;&lt;/a&gt;termsOfService&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;API 的服务条款&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;infoContact&#34;&gt;&lt;/a&gt;contact&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#contactObject&#34;&gt;Contact Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;API的联系信息&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;infoLicense&#34;&gt;&lt;/a&gt;license&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#licenseObject&#34;&gt;License Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;API的许可信息&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;infoVersion&#34;&gt;&lt;/a&gt;version&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; API 的版本，不要与规范的版本混淆&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;patterned-objects-1&#34;&gt;Patterned Objects&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;infoExtensions&#34;&gt;&lt;/a&gt;^x-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Allows extensions to the Swagger Schema. The field name MUST begin with &lt;code&gt;x-&lt;/code&gt;, for example, &lt;code&gt;x-internal-id&lt;/code&gt;. The value can be &lt;code&gt;null&lt;/code&gt;, a primitive, an array or an object. See &lt;a href=&#34;#vendorExtensions&#34;&gt;Vendor Extensions&lt;/a&gt; for further details.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;info-object-example&#34;&gt;Info Object Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;title&amp;quot;: &amp;quot;Swagger Sample App&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;This is a sample server Petstore server.&amp;quot;,
  &amp;quot;termsOfService&amp;quot;: &amp;quot;http://swagger.io/terms/&amp;quot;,
  &amp;quot;contact&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;API Support&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;http://www.swagger.io/support&amp;quot;,
    &amp;quot;email&amp;quot;: &amp;quot;support@swagger.io&amp;quot;
  },
  &amp;quot;license&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;Apache 2.0&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;http://www.apache.org/licenses/LICENSE-2.0.html&amp;quot;
  },
  &amp;quot;version&amp;quot;: &amp;quot;1.0.1&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;title: Swagger Sample App
description: This is a sample server Petstore server.
termsOfService: http://swagger.io/terms/
contact:
  name: API Support
  url: http://www.swagger.io/support
  email: support@swagger.io
license:
  name: Apache 2.0
  url: http://www.apache.org/licenses/LICENSE-2.0.html
version: 1.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-contactobject-a-contact-object&#34;&gt;&lt;a name=&#34;contactObject&#34;&gt;&lt;/a&gt;Contact Object&lt;/h4&gt;

&lt;p&gt;API 的联系信息&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-2&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;contactName&#34;&gt;&lt;/a&gt;name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;联系人或组织的标志名称&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;contactUrl&#34;&gt;&lt;/a&gt;url&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指向联系人信息的URL。必须采用URL的格式。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;contactEmail&#34;&gt;&lt;/a&gt;email&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;联系人/组织的电子邮件地址。必须采用电子邮件地址的格式。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;patterned-objects-2&#34;&gt;Patterned Objects&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;contactExtensions&#34;&gt;&lt;/a&gt;^x-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Allows extensions to the Swagger Schema. The field name MUST begin with &lt;code&gt;x-&lt;/code&gt;, for example, &lt;code&gt;x-internal-id&lt;/code&gt;. The value can be &lt;code&gt;null&lt;/code&gt;, a primitive, an array or an object. See &lt;a href=&#34;#vendorExtensions&#34;&gt;Vendor Extensions&lt;/a&gt; for further details.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;contact-object-example&#34;&gt;Contact Object Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;API Support&amp;quot;,
  &amp;quot;url&amp;quot;: &amp;quot;http://www.swagger.io/support&amp;quot;,
  &amp;quot;email&amp;quot;: &amp;quot;support@swagger.io&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: API Support
url: http://www.swagger.io/support
email: support@swagger.io
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-licenseobject-a-license-object&#34;&gt;&lt;a name=&#34;licenseObject&#34;&gt;&lt;/a&gt;License Object&lt;/h4&gt;

&lt;p&gt;API的许可信息。&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-3&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;licenseName&#34;&gt;&lt;/a&gt;name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; API的许可证名称&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;licenseUrl&#34;&gt;&lt;/a&gt;url&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;API使用许可证的URL，格式必须是URL，格式必须是URL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;patterned-objects-3&#34;&gt;Patterned Objects&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;licenseExtensions&#34;&gt;&lt;/a&gt;^x-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Allows extensions to the Swagger Schema. The field name MUST begin with &lt;code&gt;x-&lt;/code&gt;, for example, &lt;code&gt;x-internal-id&lt;/code&gt;. The value can be &lt;code&gt;null&lt;/code&gt;, a primitive, an array or an object. See &lt;a href=&#34;#vendorExtensions&#34;&gt;Vendor Extensions&lt;/a&gt; for further details.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;license-object-example&#34;&gt;License Object Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;Apache 2.0&amp;quot;,
  &amp;quot;url&amp;quot;: &amp;quot;http://www.apache.org/licenses/LICENSE-2.0.html&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: Apache 2.0
url: http://www.apache.org/licenses/LICENSE-2.0.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-pathsobject-a-paths-object&#34;&gt;&lt;a name=&#34;pathsObject&#34;&gt;&lt;/a&gt;Paths Object&lt;/h4&gt;

&lt;p&gt;到各个节点的相对路径，与  &lt;a href=&#34;#swaggerBasePath&#34;&gt;&lt;code&gt;basePath&lt;/code&gt;&lt;/a&gt; 构成完整URL。必须采用URL的格式。可能为空，因为&lt;a href=&#34;#securityFiltering&#34;&gt;ACL constraints&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;patterned-fields&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathsPath&#34;&gt;&lt;/a&gt;/{path}&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#pathItemObject&#34;&gt;Path Item Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;到各个节点的相对路径，与  &lt;a href=&#34;#swaggerBasePath&#34;&gt;&lt;code&gt;basePath&lt;/code&gt;&lt;/a&gt; 构成完整URL。必须以斜杠开头。允许&lt;a href=&#34;#pathTemplating&#34;&gt;Path templating&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathsExtensions&#34;&gt;&lt;/a&gt;^x-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Allows extensions to the Swagger Schema. The field name MUST begin with &lt;code&gt;x-&lt;/code&gt;, for example, &lt;code&gt;x-internal-id&lt;/code&gt;. The value can be &lt;code&gt;null&lt;/code&gt;, a primitive, an array or an object. See &lt;a href=&#34;#vendorExtensions&#34;&gt;Vendor Extensions&lt;/a&gt; for further details.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;paths-object-example&#34;&gt;Paths Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;/pets&amp;quot;: {
    &amp;quot;get&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;Returns all pets from the system that the user has access to&amp;quot;,
      &amp;quot;produces&amp;quot;: [
        &amp;quot;application/json&amp;quot;
      ],
      &amp;quot;responses&amp;quot;: {
        &amp;quot;200&amp;quot;: {
          &amp;quot;description&amp;quot;: &amp;quot;A list of pets.&amp;quot;,
          &amp;quot;schema&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
            &amp;quot;items&amp;quot;: {
              &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/pet&amp;quot;
            }
          }
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;/pets:
  get:
    description: Returns all pets from the system that the user has access to
    produces:
    - application/json
    responses:
      &#39;200&#39;:
        description: A list of pets.
        schema:
          type: array
          items:
            $ref: &#39;#/definitions/pet&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-pathitemobject-a-path-item-object&#34;&gt;&lt;a name=&#34;pathItemObject&#34;&gt;&lt;/a&gt;Path Item Object&lt;/h4&gt;

&lt;p&gt;路径可执行操作。由于 &lt;a href=&#34;#securityFiltering&#34;&gt;ACL constraints&lt;/a&gt;，可能为空。浏览者可以看到路径，但不知道到可执行的操作和参数。&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-4&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemRef&#34;&gt;&lt;/a&gt;$ref&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引入外部定义。格式必须是 &lt;a href=&#34;#pathItemObject&#34;&gt;Path Item Object&lt;/a&gt;. 如果引用定义和 Path Item的定义冲突，则为未定义 &lt;em&gt;undefined&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemGet&#34;&gt;&lt;/a&gt;get&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;GET 操作&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemPut&#34;&gt;&lt;/a&gt;put&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;PUT 操作&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemPost&#34;&gt;&lt;/a&gt;post&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;POST 操作&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemDelete&#34;&gt;&lt;/a&gt;delete&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;DELETE 操作&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemOptions&#34;&gt;&lt;/a&gt;options&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;OPTIONS 操作&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemHead&#34;&gt;&lt;/a&gt;head&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;HEAD 操作&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemPatch&#34;&gt;&lt;/a&gt;patch&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;PATCH 操作&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemParameters&#34;&gt;&lt;/a&gt;parameters&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;a href=&#34;#parameterObject&#34;&gt;Parameter Object&lt;/a&gt; &lt;span&gt;&amp;#124;&lt;/span&gt; &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;该路径下的所有操作的参数列表。参数可在操作下覆盖，但不可以删除。不能包含重复参数。参数的唯一由 &lt;a href=&#34;#parameterName&#34;&gt;name&lt;/a&gt;和&lt;a href=&#34;#parameterIn&#34;&gt;location&lt;/a&gt;组合定义。该列表可以引用&lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;在Swagger对象 &lt;a href=&#34;#swaggerParameters&#34;&gt;Swagger Object&amp;rsquo;s parameters&lt;/a&gt; 中定义的参数。最多可以有一个“body”参数。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;patterned-fields-1&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pathItemExtensions&#34;&gt;&lt;/a&gt;^x-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Allows extensions to the Swagger Schema. The field name MUST begin with &lt;code&gt;x-&lt;/code&gt;, for example, &lt;code&gt;x-internal-id&lt;/code&gt;. The value can be &lt;code&gt;null&lt;/code&gt;, a primitive, an array or an object. See &lt;a href=&#34;#vendorExtensions&#34;&gt;Vendor Extensions&lt;/a&gt; for further details.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;path-item-object-example&#34;&gt;Path Item Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;get&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;Returns pets based on ID&amp;quot;,
    &amp;quot;summary&amp;quot;: &amp;quot;Find pets by ID&amp;quot;,
    &amp;quot;operationId&amp;quot;: &amp;quot;getPetsById&amp;quot;,
    &amp;quot;produces&amp;quot;: [
      &amp;quot;application/json&amp;quot;,
      &amp;quot;text/html&amp;quot;
    ],
    &amp;quot;responses&amp;quot;: {
      &amp;quot;200&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;pet response&amp;quot;,
        &amp;quot;schema&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
          &amp;quot;items&amp;quot;: {
            &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Pet&amp;quot;
          }
        }
      },
      &amp;quot;default&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;error payload&amp;quot;,
        &amp;quot;schema&amp;quot;: {
          &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/ErrorModel&amp;quot;
        }
      }
    }
  },
  &amp;quot;parameters&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;id&amp;quot;,
      &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;ID of pet to use&amp;quot;,
      &amp;quot;required&amp;quot;: true,
      &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
      &amp;quot;items&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
      },
      &amp;quot;collectionFormat&amp;quot;: &amp;quot;csv&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;get:
  description: Returns pets based on ID
  summary: Find pets by ID
  operationId: getPetsById
  produces:
  - application/json
  - text/html
  responses:
    &#39;200&#39;:
      description: pet response
      schema:
        type: array
        items:
          $ref: &#39;#/definitions/Pet&#39;
    default:
      description: error payload
      schema:
        $ref: &#39;#/definitions/ErrorModel&#39;
parameters:
- name: id
  in: path
  description: ID of pet to use
  required: true
  type: array
  items:
    type: string
  collectionFormat: csv
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-operationobject-a-operation-object&#34;&gt;&lt;a name=&#34;operationObject&#34;&gt;&lt;/a&gt;Operation Object&lt;/h4&gt;

&lt;p&gt;路径上的某个 API 操作。&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-5&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationTags&#34;&gt;&lt;/a&gt;tags&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;code&gt;string&lt;/code&gt;]&lt;/td&gt;
&lt;td&gt;API 文档管理中的标签列表。标签能按资源或者其他限定进行逻辑分组。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationSummary&#34;&gt;&lt;/a&gt;summary&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;执行操作的简短描述，为了在 swagger-ui 中获取最大可读性，该字段应该小于 120 字符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;执行操作的详细描述，支持 Markdown &lt;a href=&#34;https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown&#34;&gt;GFM syntax&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationExternalDocs&#34;&gt;&lt;/a&gt;externalDocs&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#externalDocumentationObject&#34;&gt;External Documentation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;外部文档&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationId&#34;&gt;&lt;/a&gt;operationId&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&amp;lt;后台程序提供服务的函数名&amp;gt; 标志操作的唯一字符串,标志在API中所有的操作中具有唯一性。工具和 libraries 可使用 operationId 作为操作的唯一标志,建议遵循常见的编程命名约定。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationConsumes&#34;&gt;&lt;/a&gt;consumes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;code&gt;string&lt;/code&gt;]&lt;/td&gt;
&lt;td&gt;操作可以使用的MIME 类型。会覆盖在 Swagger 对象中定义的 &lt;a href=&#34;#swaggerConsumes&#34;&gt;&lt;code&gt;consumes&lt;/code&gt;&lt;/a&gt; 。空值可以清除全局配置。值必须是&lt;a href=&#34;#mimeTypes&#34;&gt;Mime Types&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationProduces&#34;&gt;&lt;/a&gt;produces&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;code&gt;string&lt;/code&gt;]&lt;/td&gt;
&lt;td&gt;操作可以返回生成的MIME 类型。会覆盖在 Swagger 对象中定义的  &lt;a href=&#34;#swaggerProduces&#34;&gt;&lt;code&gt;produces&lt;/code&gt;&lt;/a&gt;  。空值可以清除全局配置值必须是 &lt;a href=&#34;#mimeTypes&#34;&gt;Mime Types&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationParameters&#34;&gt;&lt;/a&gt;parameters&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;a href=&#34;#parameterObject&#34;&gt;Parameter Object&lt;/a&gt; &lt;span&gt;&amp;#124;&lt;/span&gt; &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;操作的参数列表。如果参数在 &lt;a href=&#34;#pathItemParameters&#34;&gt;Path Item&lt;/a&gt; 中已经定义,那么新的定义将覆盖它，但是不会删除。该列表中不能还有重复元素。一个唯一的参数由 &lt;a href=&#34;#parameterName&#34;&gt;name&lt;/a&gt; 和 &lt;a href=&#34;#parameterIn&#34;&gt;location&lt;/a&gt; 组合定义. 该列表可以使用 &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt; 引用在 &lt;a href=&#34;#swaggerParameters&#34;&gt;Swagger Object&amp;rsquo;s parameters&lt;/a&gt; 中定义的参数. 最多含有一个 &amp;ldquo;body&amp;rdquo; 属性。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationResponses&#34;&gt;&lt;/a&gt;responses&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#responsesObject&#34;&gt;Responses Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; 执行这个操作所可能返回的响应对象列表&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationSchemes&#34;&gt;&lt;/a&gt;schemes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;code&gt;string&lt;/code&gt;]&lt;/td&gt;
&lt;td&gt;操作的传输协议，值必须属于这个列表： &lt;code&gt;&amp;quot;http&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;https&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;ws&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;wss&amp;quot;&lt;/code&gt;。 会覆盖 Swagger Object &lt;a href=&#34;#swaggerSchemes&#34;&gt;&lt;code&gt;schemes&lt;/code&gt;&lt;/a&gt; 中的定义.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationDeprecated&#34;&gt;&lt;/a&gt;deprecated&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;声明该操作已经弃用。默认值为 &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationSecurity&#34;&gt;&lt;/a&gt;security&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;a href=&#34;#securityRequirementObject&#34;&gt;Security Requirement Object&lt;/a&gt;]&lt;/td&gt;
&lt;td&gt;用于声明操作的安全方案。该定义可以覆盖顶级 &lt;a href=&#34;#swaggerSecurity&#34;&gt;&lt;code&gt;security&lt;/code&gt;&lt;/a&gt;. 如果想删除顶级 security 定义，可以使用空数组。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;patterned-objects-4&#34;&gt;Patterned Objects&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;operationExtensions&#34;&gt;&lt;/a&gt;^x-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Allows extensions to the Swagger Schema. The field name MUST begin with &lt;code&gt;x-&lt;/code&gt;, for example, &lt;code&gt;x-internal-id&lt;/code&gt;. The value can be &lt;code&gt;null&lt;/code&gt;, a primitive, an array or an object. See &lt;a href=&#34;#vendorExtensions&#34;&gt;Vendor Extensions&lt;/a&gt; for further details.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;operation-object-example&#34;&gt;Operation Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;tags&amp;quot;: [
    &amp;quot;pet&amp;quot;
  ],
  &amp;quot;summary&amp;quot;: &amp;quot;Updates a pet in the store with form data&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;operationId&amp;quot;: &amp;quot;updatePetWithForm&amp;quot;,
  &amp;quot;consumes&amp;quot;: [
    &amp;quot;application/x-www-form-urlencoded&amp;quot;
  ],
  &amp;quot;produces&amp;quot;: [
    &amp;quot;application/json&amp;quot;,
    &amp;quot;application/xml&amp;quot;
  ],
  &amp;quot;parameters&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;petId&amp;quot;,
      &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;ID of pet that needs to be updated&amp;quot;,
      &amp;quot;required&amp;quot;: true,
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    },
    {
      &amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;,
      &amp;quot;in&amp;quot;: &amp;quot;formData&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;Updated name of the pet&amp;quot;,
      &amp;quot;required&amp;quot;: false,
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    },
    {
      &amp;quot;name&amp;quot;: &amp;quot;status&amp;quot;,
      &amp;quot;in&amp;quot;: &amp;quot;formData&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;Updated status of the pet&amp;quot;,
      &amp;quot;required&amp;quot;: false,
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    }
  ],
  &amp;quot;responses&amp;quot;: {
    &amp;quot;200&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;Pet updated.&amp;quot;
    },
    &amp;quot;405&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;Invalid input&amp;quot;
    }
  },
  &amp;quot;security&amp;quot;: [
    {
      &amp;quot;petstore_auth&amp;quot;: [
        &amp;quot;write:pets&amp;quot;,
        &amp;quot;read:pets&amp;quot;
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tags:
- pet
summary: Updates a pet in the store with form data
description: &amp;quot;&amp;quot;
operationId: updatePetWithForm
consumes:
- application/x-www-form-urlencoded
produces:
- application/json
- application/xml
parameters:
- name: petId
  in: path
  description: ID of pet that needs to be updated
  required: true
  type: string
- name: name
  in: formData
  description: Updated name of the pet
  required: false
  type: string
- name: status
  in: formData
  description: Updated status of the pet
  required: false
  type: string
responses:
  &#39;200&#39;:
    description: Pet updated.
  &#39;405&#39;:
    description: Invalid input
security:
- petstore_auth:
  - write:pets
  - read:pets
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-externaldocumentationobject-a-external-documentation-object&#34;&gt;&lt;a name=&#34;externalDocumentationObject&#34;&gt;&lt;/a&gt;External Documentation Object&lt;/h4&gt;

&lt;p&gt;允许引用外部文档中的资源。&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-6&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;externalDocDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;目标文档的简短描述， 支持 Markdown &lt;a href=&#34;https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown&#34;&gt;GFM syntax&lt;/a&gt; 。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;externalDocUrl&#34;&gt;&lt;/a&gt;url&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; 目标文档的 URL，值必须是 URL 格式。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;patterned-objects-5&#34;&gt;Patterned Objects&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;externalDocExtensions&#34;&gt;&lt;/a&gt;^x-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Allows extensions to the Swagger Schema. The field name MUST begin with &lt;code&gt;x-&lt;/code&gt;, for example, &lt;code&gt;x-internal-id&lt;/code&gt;. The value can be &lt;code&gt;null&lt;/code&gt;, a primitive, an array or an object. See &lt;a href=&#34;#vendorExtensions&#34;&gt;Vendor Extensions&lt;/a&gt; for further details.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;external-documentation-object-example&#34;&gt;External Documentation Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;Find more info here&amp;quot;,
  &amp;quot;url&amp;quot;: &amp;quot;https://swagger.io&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: Find more info here
url: https://swagger.io
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-parameterobject-a-parameter-object&#34;&gt;&lt;a name=&#34;parameterObject&#34;&gt;&lt;/a&gt;Parameter Object&lt;/h4&gt;

&lt;p&gt;描述单个操作的参数。&lt;/p&gt;

&lt;p&gt;一个唯一的参数由 &lt;a href=&#34;#parameterName&#34;&gt;name&lt;/a&gt; 和 &lt;a href=&#34;#parameterIn&#34;&gt;location&lt;/a&gt; 组合定义。&lt;/p&gt;

&lt;p&gt;参数类型有五种。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Path - 和 &lt;a href=&#34;#pathTemplating&#34;&gt;Path Templating&lt;/a&gt; 一起使用, 参数值是路径URL的一部分,不包括API的 host或者 base path 。例如，in &lt;code&gt;/items/{itemId}&lt;/code&gt;, 路径参数值是 &lt;code&gt;itemId&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Query - 附加在URL后的参数。例如，在 &lt;code&gt;/items?id=###&lt;/code&gt;中,query 参数值是&lt;code&gt;id&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Header - 作为请求头的一部分&lt;/li&gt;
&lt;li&gt;Body - 附加在HTTP请求的载荷 payload,由于只有一个载荷，所以只能有&lt;em&gt;一个&lt;/em&gt; body 参数。body 参数的名称对其没有影响，仅仅是文档目的。 由于 Form 参数也在载荷中，所以不能同时出现在同一个操作中。&lt;/li&gt;
&lt;li&gt;Form - 用于描述&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;, &lt;code&gt;multipart/form-data&lt;/code&gt; ，或者两者都有的内容请求(在 Swagger的定义中, 操作中的&lt;a href=&#34;#operationConsumes&#34;&gt;&lt;code&gt;consumes&lt;/code&gt;&lt;/a&gt; 属性)的有效载荷。这是唯一可以发送文件的属性类型，因此支持 &lt;code&gt;file&lt;/code&gt; 类型. 由于 form 参数在载荷中发送，所以不在同一个操作中同时和 body 定义。参数类型使用不同的内容类型 (了解更多，请看&lt;a href=&#34;http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4):&#34;&gt;http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4):&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; - 类似 Query 的参数格式,但是作用在载荷。例如， &lt;code&gt;foo=1&amp;amp;bar=swagger&lt;/code&gt; ， &lt;code&gt;foo&lt;/code&gt; 和 &lt;code&gt;bar&lt;/code&gt; 都是表单参数。通常用于阐述简单的参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipart/form-data&lt;/code&gt; - 每个参数在载荷中包含一个内部头 （each parameter takes a section in the payload with an internal header.) 例如，在头 &lt;code&gt;Content-Disposition: form-data; name=&amp;quot;submit-name&amp;quot;&lt;/code&gt; 中，参数的名称是 &lt;code&gt;submit-name&lt;/code&gt;。这种类型的表单参数更多地用于传输文件。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;fixed-fields-7&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterName&#34;&gt;&lt;/a&gt;name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; 参数的名称，参数名称&lt;em&gt;区分大小写&lt;/em&gt;&lt;ul&gt;&lt;li&gt;如果 &lt;a href=&#34;#parameterIn&#34;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; 的值是&lt;code&gt;&amp;quot;path&amp;quot;&lt;/code&gt;,那么 &lt;code&gt;name&lt;/code&gt; 必须对应 &lt;a href=&#34;#pathsObject&#34;&gt;Paths Object&lt;/a&gt;中的 &lt;a href=&#34;#pathsPath&#34;&gt;path&lt;/a&gt; 字段。更多信息看&lt;a href=&#34;#pathTemplating&#34;&gt;Path Templating&lt;/a&gt; &lt;li&gt;对于其他情况，&lt;code&gt;name&lt;/code&gt; 对应基于&lt;a href=&#34;#parameterIn&#34;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; 属性使用的参数名&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterIn&#34;&gt;&lt;/a&gt;in&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; 参数的位置，值是 &amp;ldquo;query&amp;rdquo;, &amp;ldquo;header&amp;rdquo;, &amp;ldquo;path&amp;rdquo;, &amp;ldquo;formData&amp;rdquo; 和 &amp;ldquo;body&amp;rdquo;中之一。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参数的简短描述。可以包含使用样例。, 支持 Markdown &lt;a href=&#34;https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown&#34;&gt;GFM syntax&lt;/a&gt; 。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterRequired&#34;&gt;&lt;/a&gt;required&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;确定此参数是否必须。如果 &lt;a href=&#34;#parameterIn&#34;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; 的值是&amp;rdquo;path&amp;rdquo;,那么该属性是 &lt;strong&gt;必须&lt;/strong&gt; 而且必须是 &lt;code&gt;true&lt;/code&gt;。其他情况，该属性也可能包含，默认值是 &lt;code&gt;false&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;如果&lt;a href=&#34;#parameterIn&#34;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; 的值是 &lt;code&gt;&amp;quot;body&amp;quot;&lt;/code&gt;:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterSchema&#34;&gt;&lt;/a&gt;schema&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; 模式(schema)定义的是 body 参数的类型(The schema defining the type used for the body parameter.)。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;如果 &lt;a href=&#34;#parameterIn&#34;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; 的值是除了&lt;code&gt;&amp;quot;body&amp;quot;&lt;/code&gt;的任意一个 :&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterType&#34;&gt;&lt;/a&gt;type&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; 参数的类型。由于参数不在请求体(request body)中 ，所以仅限简单类型(不能是对象)，值必须是 &lt;code&gt;&amp;quot;string&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;number&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;integer&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;boolean&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;array&amp;quot;&lt;/code&gt; 和 &lt;code&gt;&amp;quot;file&amp;quot;&lt;/code&gt;中之一。如果 &lt;code&gt;type&lt;/code&gt; 是 &lt;code&gt;&amp;quot;file&amp;quot;&lt;/code&gt;，那么 &lt;a href=&#34;#operationConsumes&#34;&gt;&lt;code&gt;consumes&lt;/code&gt;&lt;/a&gt; 必须被定义为 &lt;code&gt;&amp;quot;multipart/form-data&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot; application/x-www-form-urlencoded&amp;quot;&lt;/code&gt; ，或者两者,而且 &lt;a href=&#34;#parameterIn&#34;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; 的值必须是&lt;code&gt;&amp;quot;formData&amp;quot;&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterFormat&#34;&gt;&lt;/a&gt;format&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对&lt;a href=&#34;#parameterType&#34;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; 进行扩展，更详细的描述。 查看&lt;a href=&#34;#dataTypeFormat&#34;&gt;Data Type Formats&lt;/a&gt;了解更多。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterAllowEmptyValue&#34;/&gt;allowEmptyValue&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;设置能否传递空值参数。仅仅对 &lt;code&gt;query&lt;/code&gt; 或 &lt;code&gt;formData&lt;/code&gt;参数有效，允许发送仅具有名称或空值的参数，默认值为 &lt;code&gt;false&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterItems&#34;&gt;&lt;/a&gt;items&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#itemsObject&#34;&gt;Items Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须 ，如果 &lt;a href=&#34;#parameterType&#34;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; 的值是 &amp;ldquo;array&amp;rdquo;。&lt;/strong&gt; 描述数组中的元素类型&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterCollectionFormat&#34;&gt;&lt;/a&gt;collectionFormat&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Determines the format of the array if type array is used。可用的值: &lt;ul&gt;&lt;li&gt;&lt;code&gt;csv&lt;/code&gt; - 逗号分隔值 &lt;code&gt;foo,bar&lt;/code&gt;. &lt;li&gt;&lt;code&gt;ssv&lt;/code&gt; - 空格分隔值 &lt;code&gt;foo bar&lt;/code&gt;. &lt;li&gt;&lt;code&gt;tsv&lt;/code&gt; -  制表符分隔值 &lt;code&gt;foo\tbar&lt;/code&gt;. &lt;li&gt;&lt;code&gt;pipes&lt;/code&gt; - 管道分隔值 &lt;code&gt;foo&amp;#124;bar&lt;/code&gt;. &lt;li&gt;&lt;code&gt;multi&lt;/code&gt; - 对应于多个参数实例，而不是单个实例,如&lt;code&gt;foo=bar&amp;amp;foo=baz&lt;/code&gt;. 仅仅用于 &lt;a href=&#34;#parameterIn&#34;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; 的值是&amp;rdquo;query&amp;rdquo; 或 &amp;ldquo;formData&amp;rdquo;。 &lt;/ul&gt; 默认值是 &lt;code&gt;csv&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterDefault&#34;&gt;&lt;/a&gt;default&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;*&lt;/td&gt;
&lt;td&gt;定义参数的默认值。例如， 如果请求中没有提供，那么控制每页结果数的&amp;rdquo;count&amp;rdquo; 默认值就为100(注意：&amp;rdquo;default&amp;rdquo; has no meaning for required parameters.)  参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor101&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor101&lt;/a&gt;. 不同于 JSON Schema，这个值必须符合 &lt;a href=&#34;#parameterType&#34;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; 定义的参数。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterMaximum&#34;&gt;&lt;/a&gt;maximum&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor17&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor17&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterExclusiveMaximum&#34;&gt;&lt;/a&gt;exclusiveMaximum&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor17&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor17&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterMinimum&#34;&gt;&lt;/a&gt;minimum&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor21&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor21&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterExclusiveMinimum&#34;&gt;&lt;/a&gt;exclusiveMinimum&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor21&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor21&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterMaxLength&#34;&gt;&lt;/a&gt;maxLength&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor26&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor26&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterMinLength&#34;&gt;&lt;/a&gt;minLength&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor29&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor29&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterPattern&#34;&gt;&lt;/a&gt;pattern&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor33&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor33&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterMaxItems&#34;&gt;&lt;/a&gt;maxItems&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor42&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor42&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterMinItems&#34;&gt;&lt;/a&gt;minItems&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor45&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor45&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterUniqueItems&#34;&gt;&lt;/a&gt;uniqueItems&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor49&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor49&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterEnum&#34;&gt;&lt;/a&gt;enum&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[*]&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor76&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor76&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterMultipleOf&#34;&gt;&lt;/a&gt;multipleOf&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor14&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor14&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;patterned-fields-2&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterExtensions&#34;&gt;&lt;/a&gt;^x-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Allows extensions to the Swagger Schema. The field name MUST begin with &lt;code&gt;x-&lt;/code&gt;, for example, &lt;code&gt;x-internal-id&lt;/code&gt;. The value can be &lt;code&gt;null&lt;/code&gt;, a primitive, an array or an object. See &lt;a href=&#34;#vendorExtensions&#34;&gt;Vendor Extensions&lt;/a&gt; for further details.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;parameter-object-examples&#34;&gt;Parameter Object Examples&lt;/h5&gt;

&lt;h6 id=&#34;body-parameters&#34;&gt;Body Parameters&lt;/h6&gt;

&lt;p&gt;在 body 参数中引用一个 shema 定义（通常用于模型定义）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;user&amp;quot;,
  &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;user to add to the system&amp;quot;,
  &amp;quot;required&amp;quot;: true,
  &amp;quot;schema&amp;quot;: {
    &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/User&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: user
in: body
description: user to add to the system
required: true
schema:
  $ref: &#39;#/definitions/User&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个包含字符串数组的 body 参数 :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;user&amp;quot;,
  &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;user to add to the system&amp;quot;,
  &amp;quot;required&amp;quot;: true,
  &amp;quot;schema&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: user
in: body
description: user to add to the system
required: true
schema:
  type: array
  items:
    type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;other-parameters&#34;&gt;Other Parameters&lt;/h6&gt;

&lt;p&gt;包含64位整数的 header parameter：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;token&amp;quot;,
  &amp;quot;in&amp;quot;: &amp;quot;header&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;token to be passed as a header&amp;quot;,
  &amp;quot;required&amp;quot;: true,
  &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
  &amp;quot;items&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
    &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
  },
  &amp;quot;collectionFormat&amp;quot;: &amp;quot;csv&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: token
in: header
description: token to be passed as a header
required: true
type: array
items:
  type: integer
  format: int64
collectionFormat: csv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个字符串的 path parameter。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;username&amp;quot;,
  &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;username to fetch&amp;quot;,
  &amp;quot;required&amp;quot;: true,
  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: username
in: path
description: username to fetch
required: true
type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个字符串的query parameter,允许多个重复的值：(An optional query parameter of a string value, allowing multiple values by repeating the query parameter:)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;id&amp;quot;,
  &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;ID of the object to fetch&amp;quot;,
  &amp;quot;required&amp;quot;: false,
  &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
  &amp;quot;items&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
  },
  &amp;quot;collectionFormat&amp;quot;: &amp;quot;multi&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: id
in: query
description: ID of the object to fetch
required: false
type: array
items:
  type: string
collectionFormat: multi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用于文件上传的表单数据：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;avatar&amp;quot;,
  &amp;quot;in&amp;quot;: &amp;quot;formData&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;The avatar of the user&amp;quot;,
  &amp;quot;required&amp;quot;: true,
  &amp;quot;type&amp;quot;: &amp;quot;file&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: avatar
in: formData
description: The avatar of the user
required: true
type: file
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-itemsobject-a-items-object&#34;&gt;&lt;a name=&#34;itemsObject&#34;&gt;&lt;/a&gt;Items Object&lt;/h4&gt;

&lt;p&gt;JSON-SChema 的 items 对象的子集(A limited subset of JSON-Schema&amp;rsquo;s items object). 当&lt;a href=&#34;#parameterIn&#34;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; 的值不是&lt;code&gt;&amp;quot;body&amp;quot;&lt;/code&gt;时，该参数才能定义。&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-8&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;itemsType&#34;&gt;&lt;/a&gt;type&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; 参数类型。必须是 &lt;code&gt;&amp;quot;string&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;number&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;integer&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;boolean&amp;quot;&lt;/code&gt;, or &lt;code&gt;&amp;quot;array&amp;quot;&lt;/code&gt; 之一。不允许使用 Files 和 models 。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;itemsFormat&#34;&gt;&lt;/a&gt;format&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对&lt;a href=&#34;#parameterType&#34;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; 进行扩展，更详细的描述。 查看&lt;a href=&#34;#dataTypeFormat&#34;&gt;Data Type Formats&lt;/a&gt;了解更多。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;itemsItems&#34;&gt;&lt;/a&gt;items&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#itemsObject&#34;&gt;Items Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;当&lt;a href=&#34;#itemsType&#34;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; 的值是 &amp;ldquo;array&amp;rdquo;时，是必须的&lt;/strong&gt; 描述数组元素的类型。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;itemsCollectionFormat&#34;&gt;&lt;/a&gt;collectionFormat&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Determines the format of the array if type array is used。可用的值: &lt;ul&gt;&lt;li&gt;&lt;code&gt;csv&lt;/code&gt; - 逗号分隔值 &lt;code&gt;foo,bar&lt;/code&gt;. &lt;li&gt;&lt;code&gt;ssv&lt;/code&gt; - 空格分隔值 &lt;code&gt;foo bar&lt;/code&gt;. &lt;li&gt;&lt;code&gt;tsv&lt;/code&gt; -  制表符分隔值 &lt;code&gt;foo\tbar&lt;/code&gt;. &lt;li&gt;&lt;code&gt;pipes&lt;/code&gt; - 管道分隔值 &lt;code&gt;foo&amp;#124;bar&lt;/code&gt;. &lt;/ul&gt; 默认值是 &lt;code&gt;csv&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;itemsDefault&#34;&gt;&lt;/a&gt;default&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;*&lt;/td&gt;
&lt;td&gt;当没有提供时，server 使用的默认值。 (Note: &amp;ldquo;default&amp;rdquo; has no meaning for required items.) 参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor101.与&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor101.与&lt;/a&gt; JSON Schema 不同，值必须符合 &lt;a href=&#34;#itemsType&#34;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; 所定义的类型。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;itemsMaximum&#34;&gt;&lt;/a&gt;maximum&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor17&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor17&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;itemsMaximum&#34;&gt;&lt;/a&gt;exclusiveMaximum&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor17&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor17&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;itemsMinimum&#34;&gt;&lt;/a&gt;minimum&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor21&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor21&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;itemsExclusiveMinimum&#34;&gt;&lt;/a&gt;exclusiveMinimum&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor21&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor21&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;itemsMaxLength&#34;&gt;&lt;/a&gt;maxLength&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor26&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor26&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;itemsMinLength&#34;&gt;&lt;/a&gt;minLength&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor29&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor29&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;itemsPattern&#34;&gt;&lt;/a&gt;pattern&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor33&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor33&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;itemsMaxItems&#34;&gt;&lt;/a&gt;maxItems&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor42&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor42&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;itemsMinItems&#34;&gt;&lt;/a&gt;minItems&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor45&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor45&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;itemsUniqueItems&#34;&gt;&lt;/a&gt;uniqueItems&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor49&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor49&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;itemsEnum&#34;&gt;&lt;/a&gt;enum&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[*]&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor76&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor76&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;itemsMultipleOf&#34;&gt;&lt;/a&gt;multipleOf&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor14&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor14&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;patterned-objects-6&#34;&gt;Patterned Objects&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;itemsExtensions&#34;&gt;&lt;/a&gt;^x-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Allows extensions to the Swagger Schema. The field name MUST begin with &lt;code&gt;x-&lt;/code&gt;, for example, &lt;code&gt;x-internal-id&lt;/code&gt;. The value can be &lt;code&gt;null&lt;/code&gt;, a primitive, an array or an object. See &lt;a href=&#34;#vendorExtensions&#34;&gt;Vendor Extensions&lt;/a&gt; for further details.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;items-object-examples&#34;&gt;Items Object Examples&lt;/h5&gt;

&lt;p&gt;参数的类型是 string，并且长度小于 2 字符：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
    &amp;quot;minLength&amp;quot;: 2
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: string
minLength: 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个数组，元素的类型是 integer ，大小在 0 与 63 之间（含）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
        &amp;quot;minimum&amp;quot;: 0,
        &amp;quot;maximum&amp;quot;: 63
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: array
items:
  type: integer
  minimum: 0
  maximum: 63
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-responsesobject-a-responses-object&#34;&gt;&lt;a name=&#34;responsesObject&#34;&gt;&lt;/a&gt;Responses Object&lt;/h4&gt;

&lt;p&gt;描述操作的预期响应。将 HTTP 状态码映射到预期响应。不要期望文档可以涵盖全部的响应码，因为它们往往是不可预知的。但是，在文档中可以看到成功时的响应以及已知的错误。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;default&lt;/code&gt; 能作用到全部 HTTP 响应码，除了单独覆盖的。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Responses Object&lt;/code&gt; 必须包含一个响应码，而且它应该是一个成功操作的响应码。&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-9&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;responsesDefault&#34;&gt;&lt;/a&gt;default&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#responseObject&#34;&gt;Response Object&lt;/a&gt; &lt;span&gt;&amp;#124;&lt;/span&gt; &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;描述除了 HTTP 特定响应码外的响应。可以覆盖未声明的响应。可以通过 &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt; 引用在 &lt;a href=&#34;#swaggerResponses&#34;&gt;Swagger Object&amp;rsquo;s responses&lt;/a&gt; 对象中定义的响应。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;patterned-fields-3&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;responsesCode&#34;&gt;&lt;/a&gt;{&lt;a href=&#34;#httpCodes&#34;&gt;HTTP Status Code&lt;/a&gt;}&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#responseObject&#34;&gt;Response Object&lt;/a&gt; &lt;span&gt;&amp;#124;&lt;/span&gt; &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;任何 &lt;a href=&#34;#httpCodes&#34;&gt;HTTP status code&lt;/a&gt; 都可作为属性的名称，每个响应码都是一个独立的属性。描述HTTP响应码所代表的的响应。可通过 &lt;a href=&#34;#referenceObject&#34;&gt;Reference Object&lt;/a&gt; 引用 &lt;a href=&#34;#swaggerResponses&#34;&gt;Swagger Object&amp;rsquo;s responses&lt;/a&gt; 中定义的响应.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;responsesExtensions&#34;&gt;&lt;/a&gt;^x-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Allows extensions to the Swagger Schema. The field name MUST begin with &lt;code&gt;x-&lt;/code&gt;, for example, &lt;code&gt;x-internal-id&lt;/code&gt;. The value can be &lt;code&gt;null&lt;/code&gt;, a primitive, an array or an object. See &lt;a href=&#34;#vendorExtensions&#34;&gt;Vendor Extensions&lt;/a&gt; for further details.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;responses-object-example&#34;&gt;Responses Object Example&lt;/h5&gt;

&lt;p&gt;成功响应的状态码 200，和其他默认的响应（意味着错误）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;200&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;a pet to be returned&amp;quot;,
    &amp;quot;schema&amp;quot;: {
      &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Pet&amp;quot;
    }
  },
  &amp;quot;default&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;Unexpected error&amp;quot;,
    &amp;quot;schema&amp;quot;: {
      &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/ErrorModel&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;&#39;200&#39;:
  description: a pet to be returned
  schema:
    $ref: &#39;#/definitions/Pet&#39;
default:
  description: Unexpected error
  schema:
    $ref: &#39;#/definitions/ErrorModel&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-responseobject-a-response-object&#34;&gt;&lt;a name=&#34;responseObject&#34;&gt;&lt;/a&gt;Response Object&lt;/h4&gt;

&lt;p&gt;描述API操作的某个响应。&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-10&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;responseDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; 响应的简短描述 , 支持 Markdown &lt;a href=&#34;https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown&#34;&gt;GFM syntax&lt;/a&gt; 。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;responseSchema&#34;&gt;&lt;/a&gt;schema&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义响应结构。可以是一个 primitive, array 或 object。 如果该字段不存，那么表示响应没有内容返回。作为 &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; 的扩展,  它的 root &lt;code&gt;type&lt;/code&gt; 值可以是 &lt;code&gt;&amp;quot;file&amp;quot;&lt;/code&gt;。应该伴有一个相关的 &lt;code&gt;produces&lt;/code&gt; 定义 mime-type。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;responseHeaders&#34;&gt;&lt;/a&gt;headers&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#headersObject&#34;&gt;Headers Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;和响应一起发送的响应头&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;responseExamples&#34;&gt;&lt;/a&gt;examples&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#exampleObject&#34;&gt;Example Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;响应消息的实例。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;patterned-objects-7&#34;&gt;Patterned Objects&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;responseExtensions&#34;&gt;&lt;/a&gt;^x-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Allows extensions to the Swagger Schema. The field name MUST begin with &lt;code&gt;x-&lt;/code&gt;, for example, &lt;code&gt;x-internal-id&lt;/code&gt;. The value can be &lt;code&gt;null&lt;/code&gt;, a primitive, an array or an object. See &lt;a href=&#34;#vendorExtensions&#34;&gt;Vendor Extensions&lt;/a&gt; for further details.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;response-object-examples&#34;&gt;Response Object Examples&lt;/h5&gt;

&lt;p&gt;数组的响应示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;A complex object array response&amp;quot;,
  &amp;quot;schema&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/VeryComplexType&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: A complex object array response
schema:
  type: array
  items:
    $ref: &#39;#/definitions/VeryComplexType&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;string 类型的响应示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;A simple string response&amp;quot;,
  &amp;quot;schema&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: A simple string response
schema:
  type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;带响应头的示例:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;A simple string response&amp;quot;,
  &amp;quot;schema&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
  },
  &amp;quot;headers&amp;quot;: {
    &amp;quot;X-Rate-Limit-Limit&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;The number of allowed requests in the current period&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;
    },
    &amp;quot;X-Rate-Limit-Remaining&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;The number of remaining requests in the current period&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;
    },
    &amp;quot;X-Rate-Limit-Reset&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;The number of seconds left in the current period&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: A simple string response
schema:
  type: string
headers:
  X-Rate-Limit-Limit:
    description: The number of allowed requests in the current period
    type: integer
  X-Rate-Limit-Remaining:
    description: The number of remaining requests in the current period
    type: integer
  X-Rate-Limit-Reset:
    description: The number of seconds left in the current period
    type: integer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;没有内容的响应：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;object created&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: object created
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-headersobject-a-headers-object&#34;&gt;&lt;a name=&#34;headersObject&#34;&gt;&lt;/a&gt;Headers Object&lt;/h4&gt;

&lt;p&gt;Lists the headers that can be sent as part of a response.&lt;/p&gt;

&lt;h5 id=&#34;patterned-fields-4&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;headersName&#34;&gt;&lt;/a&gt;{name}&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#headerObject&#34;&gt;Header Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The name of the property corresponds to the name of the header. The value describes the type of the header.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;headers-object-example&#34;&gt;Headers Object Example&lt;/h5&gt;

&lt;p&gt;Rate-limit headers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    &amp;quot;X-Rate-Limit-Limit&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;The number of allowed requests in the current period&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;
    },
    &amp;quot;X-Rate-Limit-Remaining&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;The number of remaining requests in the current period&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;
    },
    &amp;quot;X-Rate-Limit-Reset&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;The number of seconds left in the current period&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;X-Rate-Limit-Limit:
  description: The number of allowed requests in the current period
  type: integer
X-Rate-Limit-Remaining:
  description: The number of remaining requests in the current period
  type: integer
X-Rate-Limit-Reset:
  description: The number of seconds left in the current period
  type: integer
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-exampleobject-a-example-object&#34;&gt;&lt;a name=&#34;exampleObject&#34;&gt;&lt;/a&gt;Example Object&lt;/h4&gt;

&lt;p&gt;Allows sharing examples for operation responses.&lt;/p&gt;

&lt;h5 id=&#34;patterned-fields-5&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;exampleMimeType&#34;&gt;&lt;/a&gt;{&lt;a href=&#34;#mimeTypes&#34;&gt;mime type&lt;/a&gt;}&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;属性的名称必须是操作 &lt;code&gt;produces&lt;/code&gt; 属性的值之一 (包含或者继承). 响应的示例。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;example-object-example&#34;&gt;Example Object Example&lt;/h5&gt;

&lt;p&gt;用 application/json mimetype 描述的宠物响应示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;application/json&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;Puma&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;Dog&amp;quot;,
    &amp;quot;color&amp;quot;: &amp;quot;Black&amp;quot;,
    &amp;quot;gender&amp;quot;: &amp;quot;Female&amp;quot;,
    &amp;quot;breed&amp;quot;: &amp;quot;Mixed&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;application/json:
  name: Puma
  type: Dog
  color: Black
  gender: Female
  breed: Mixed
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-headerobject-a-header-object&#34;&gt;&lt;a name=&#34;headerObject&#34;&gt;&lt;/a&gt;Header Object&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;headerDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Header 的简短描述&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;headerType&#34;&gt;&lt;/a&gt;type&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt;  对象的类型. 值必须是 &lt;code&gt;&amp;quot;string&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;number&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;integer&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;boolean&amp;quot;&lt;/code&gt;, 或 &lt;code&gt;&amp;quot;array&amp;quot;&lt;/code&gt; 之一。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;headerFormat&#34;&gt;&lt;/a&gt;format&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对&lt;a href=&#34;#parameterType&#34;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; 进行扩展，更详细的描述。 查看&lt;a href=&#34;#dataTypeFormat&#34;&gt;Data Type Formats&lt;/a&gt;了解更多。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;headerItems&#34;&gt;&lt;/a&gt;items&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#itemsObject&#34;&gt;Items Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;如果 &lt;a href=&#34;#stType&#34;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; 的值是 &amp;ldquo;array&amp;rdquo;时，是必须的&lt;/strong&gt; 描述数组元素的类型。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;headerCollectionFormat&#34;&gt;&lt;/a&gt;collectionFormat&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Determines the format of the array if type array is used。可用的值: &lt;ul&gt;&lt;li&gt;&lt;code&gt;csv&lt;/code&gt; - 逗号分隔值 &lt;code&gt;foo,bar&lt;/code&gt;. &lt;li&gt;&lt;code&gt;ssv&lt;/code&gt; - 空格分隔值 &lt;code&gt;foo bar&lt;/code&gt;. &lt;li&gt;&lt;code&gt;tsv&lt;/code&gt; -  制表符分隔值 &lt;code&gt;foo\tbar&lt;/code&gt;. &lt;li&gt;&lt;code&gt;pipes&lt;/code&gt; - 管道分隔值 &lt;code&gt;foo&amp;#124;bar&lt;/code&gt;. &lt;/ul&gt; 默认值是 &lt;code&gt;csv&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;headerDefault&#34;&gt;&lt;/a&gt;default&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;*&lt;/td&gt;
&lt;td&gt;当没有提供时，server 将使用的默认 header 。 (Note: &amp;ldquo;default&amp;rdquo; has no meaning for required items.) 参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor101.与&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor101.与&lt;/a&gt; JSON Schema 不同，值必须符合&lt;a href=&#34;#headerDefault&#34;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; 所定义的类型。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;headerMaximum&#34;&gt;&lt;/a&gt;maximum&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor17&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor17&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;headerMaximum&#34;&gt;&lt;/a&gt;exclusiveMaximum&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor17&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor17&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;headerMinimum&#34;&gt;&lt;/a&gt;minimum&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor21&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor21&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;headerExclusiveMinimum&#34;&gt;&lt;/a&gt;exclusiveMinimum&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor21&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor21&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;headerMaxLength&#34;&gt;&lt;/a&gt;maxLength&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor26&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor26&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;headerMinLength&#34;&gt;&lt;/a&gt;minLength&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor29&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor29&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;headerPattern&#34;&gt;&lt;/a&gt;pattern&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor33&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor33&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;headerMaxItems&#34;&gt;&lt;/a&gt;maxItems&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor42&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor42&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;headerMinItems&#34;&gt;&lt;/a&gt;minItems&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor45&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor45&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;headerUniqueItems&#34;&gt;&lt;/a&gt;uniqueItems&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor49&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor49&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;headerEnum&#34;&gt;&lt;/a&gt;enum&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[*]&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor76&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor76&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;headerMultipleOf&#34;&gt;&lt;/a&gt;multipleOf&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参阅 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#anchor14&#34;&gt;http://json-schema.org/latest/json-schema-validation.html#anchor14&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;patterned-objects-8&#34;&gt;Patterned Objects&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;headerExtensions&#34;&gt;&lt;/a&gt;^x-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Allows extensions to the Swagger Schema. The field name MUST begin with &lt;code&gt;x-&lt;/code&gt;, for example, &lt;code&gt;x-internal-id&lt;/code&gt;. The value can be &lt;code&gt;null&lt;/code&gt;, a primitive, an array or an object. See &lt;a href=&#34;#vendorExtensions&#34;&gt;Vendor Extensions&lt;/a&gt; for further details.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;header-object-example&#34;&gt;Header Object Example&lt;/h5&gt;

&lt;p&gt;A simple header with of an integer type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;The number of allowed requests in the current period&amp;quot;,
  &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;description: The number of allowed requests in the current period
type: integer
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-tagobject-a-tag-object&#34;&gt;&lt;a name=&#34;tagObject&#34;&gt;&lt;/a&gt;Tag Object&lt;/h4&gt;

&lt;p&gt;Allows adding meta data to a single tag that is used by the &lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt;（为&lt;a href=&#34;#operationObject&#34;&gt;Operation Object&lt;/a&gt; 添加标签）. It is not mandatory to have a Tag Object per tag used there.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-11&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;tagName&#34;&gt;&lt;/a&gt;name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; 标签名&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;tagDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;标签的简短描述，支持 Markdown &lt;a href=&#34;https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown&#34;&gt;GFM syntax&lt;/a&gt; 。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;tagExternalDocs&#34;&gt;&lt;/a&gt;externalDocs&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#externalDocumentationObject&#34;&gt;External Documentation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;添加其他文档。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;patterned-fields-6&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;tagExtensions&#34;&gt;&lt;/a&gt;^x-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Allows extensions to the Swagger Schema. The field name MUST begin with &lt;code&gt;x-&lt;/code&gt;, for example, &lt;code&gt;x-internal-id&lt;/code&gt;. The value can be &lt;code&gt;null&lt;/code&gt;, a primitive, an array or an object. See &lt;a href=&#34;#vendorExtensions&#34;&gt;Vendor Extensions&lt;/a&gt; for further details.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;tag-object-example&#34;&gt;Tag Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;pet&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Pets operations&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: pet
description: Pets operations
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-referenceobject-a-reference-object&#34;&gt;&lt;a name=&#34;referenceObject&#34;&gt;&lt;/a&gt;Reference Object&lt;/h4&gt;

&lt;p&gt;一个简单的对象，允许引用规范中的定义。可以引用在顶层定义的 parameters 和 responses 以便重用。&lt;/p&gt;

&lt;p&gt;Reference Object 是一个 &lt;a href=&#34;http://tools.ietf.org/html/draft-pbryan-zyp-json-ref-02&#34;&gt;JSON Reference&lt;/a&gt;，它的值是一个 &lt;a href=&#34;http://tools.ietf.org/html/rfc6901&#34;&gt;JSON Pointer&lt;/a&gt; 。For this specification, only &lt;a href=&#34;http://json-schema.org/latest/json-schema-core.html#anchor27&#34;&gt;canonical dereferencing&lt;/a&gt; is supported.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-12&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;referenceRef&#34;&gt;&lt;/a&gt;$ref&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; 引用的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;reference-object-example&#34;&gt;Reference Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Pet&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;$ref: &#39;#/definitions/Pet&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;relative-schema-file-example&#34;&gt;Relative Schema File Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;$ref&amp;quot;: &amp;quot;Pet.json&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;$ref: &#39;Pet.yaml&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;relative-files-with-embedded-schema-example&#34;&gt;Relative Files With Embedded Schema Example&lt;/h5&gt;

&lt;p&gt;引入外部文档中定义的对象&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;$ref&amp;quot;: &amp;quot;definitions.json#/Pet&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;$ref: &#39;definitions.yaml#/Pet&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-schemaobject-a-schema-object&#34;&gt;&lt;a name=&#34;schemaObject&#34;&gt;&lt;/a&gt;Schema Object&lt;/h4&gt;

&lt;p&gt;Schema Object 定义输入输出的类型。类型可以是 objects, 也可以是 primitives 和 arrays。 This object is based on the &lt;a href=&#34;http://json-schema.org/&#34;&gt;JSON Schema Specification Draft 4&lt;/a&gt; and uses a predefined subset of it. On top of this subset, there are extensions provided by this specification to allow for more complete documentation.&lt;/p&gt;

&lt;p&gt;更多信息，请看 &lt;a href=&#34;http://json-schema.org/latest/json-schema-core.html&#34;&gt;JSON Schema Core&lt;/a&gt; 和 &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html&#34;&gt;JSON Schema Validation&lt;/a&gt;. 除非另有说明，属性定义遵循此处引用的JSON模式规范。&lt;/p&gt;

&lt;p&gt;以下属性直接取自JSON模式定义，并遵循相同的规范：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$ref - As a &lt;a href=&#34;https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03&#34;&gt;JSON Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;format (See &lt;a href=&#34;#dataTypeFormat&#34;&gt;Data Type Formats&lt;/a&gt; for further details)&lt;/li&gt;
&lt;li&gt;title&lt;/li&gt;
&lt;li&gt;description (支持 Markdown &lt;a href=&#34;https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown&#34;&gt;GFM syntax&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;default (和 JSON Schema不同, 值必须符合Schema对象的定义类型)&lt;/li&gt;
&lt;li&gt;multipleOf&lt;/li&gt;
&lt;li&gt;maximum&lt;/li&gt;
&lt;li&gt;exclusiveMaximum&lt;/li&gt;
&lt;li&gt;minimum&lt;/li&gt;
&lt;li&gt;exclusiveMinimum&lt;/li&gt;
&lt;li&gt;maxLength&lt;/li&gt;
&lt;li&gt;minLength&lt;/li&gt;
&lt;li&gt;pattern&lt;/li&gt;
&lt;li&gt;maxItems&lt;/li&gt;
&lt;li&gt;minItems&lt;/li&gt;
&lt;li&gt;uniqueItems&lt;/li&gt;
&lt;li&gt;maxProperties&lt;/li&gt;
&lt;li&gt;minProperties&lt;/li&gt;
&lt;li&gt;required&lt;/li&gt;
&lt;li&gt;enum&lt;/li&gt;
&lt;li&gt;type&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面属性取自 JSON Schema ，但是它们的定义根据 Swagger 规范作了调整。Their definition is the same as the one from JSON Schema, only where the original definition references the JSON Schema definition, the &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; definition is used instead.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;items&lt;/li&gt;
&lt;li&gt;allOf&lt;/li&gt;
&lt;li&gt;properties&lt;/li&gt;
&lt;li&gt;additionalProperties&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了 JSON Schema 字段外，以下字段也可以在文档中使用。&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-13&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaDiscriminator&#34;&gt;&lt;/a&gt;discriminator&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;添加对多态的支持(Adds support for polymorphism). discriminator 是模式属性的名称，用以区分继承该 schema 的其他 schema。 使用的属性名必须在该 shcema 中定义，而且必须在 &lt;code&gt;required&lt;/code&gt; 属性列表中。使用的值必须是该schema 或者继承的名称。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaReadOnly&#34;&gt;&lt;/a&gt;readOnly&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Relevant only for Schema &lt;code&gt;&amp;quot;properties&amp;quot;&lt;/code&gt; definitions.定义成&amp;rdquo;read only&amp;rdquo;，意味着仅能作为响应发送而不能作为请求发送。Properties中设置&lt;code&gt;readOnly&lt;/code&gt; 值为&lt;code&gt;true&lt;/code&gt; 的参数，不应该出现在&lt;code&gt;required&lt;/code&gt; 列表中。 默认值为&lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaXml&#34;&gt;&lt;/a&gt;xml&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#xmlObject&#34;&gt;XML Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;This MAY be used only on properties schemas. It has no effect on root schemas. Adds Additional metadata to describe the XML representation format of this property.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaExternalDocs&#34;&gt;&lt;/a&gt;externalDocs&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#externalDocumentationObject&#34;&gt;External Documentation Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;额外的文档&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaExample&#34;&gt;&lt;/a&gt;example&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;A free-form property to include an example of an instance for this schema.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;patterned-objects-9&#34;&gt;Patterned Objects&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;schemaExtensions&#34;&gt;&lt;/a&gt;^x-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Allows extensions to the Swagger Schema. The field name MUST begin with &lt;code&gt;x-&lt;/code&gt;, for example, &lt;code&gt;x-internal-id&lt;/code&gt;. The value can be &lt;code&gt;null&lt;/code&gt;, a primitive, an array or an object. See &lt;a href=&#34;#vendorExtensions&#34;&gt;Vendor Extensions&lt;/a&gt; for further details.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&#34;composition-and-inheritance-polymorphism&#34;&gt;Composition and Inheritance (Polymorphism)&lt;/h6&gt;

&lt;p&gt;Swagger allows combining and extending model definitions using the &lt;code&gt;allOf&lt;/code&gt; property of JSON Schema, in effect offering model composition. &lt;code&gt;allOf&lt;/code&gt; takes in an array of object definitions that are validated &lt;em&gt;independently&lt;/em&gt; but together compose a single object.&lt;/p&gt;

&lt;p&gt;While composition offers model extensibility, it does not imply a hierarchy between the models. To support polymorphism, Swagger adds the support of the &lt;code&gt;discriminator&lt;/code&gt; field. When used, the &lt;code&gt;discriminator&lt;/code&gt; will be the name of the property used to decide which schema definition is used to validate the structure of the model. As such, the &lt;code&gt;discriminator&lt;/code&gt; field MUST be a required field. The value of the chosen property has to be the friendly name given to the model under the &lt;code&gt;definitions&lt;/code&gt; property. As such, inline schema definitions, which do not have a given id, &lt;em&gt;cannot&lt;/em&gt; be used in polymorphism.&lt;/p&gt;

&lt;h6 id=&#34;xml-modeling&#34;&gt;XML Modeling&lt;/h6&gt;

&lt;p&gt;The &lt;a href=&#34;#schemaXml&#34;&gt;xml&lt;/a&gt; property allows extra definitions when translating the JSON definition to XML. The &lt;a href=&#34;#xmlObject&#34;&gt;XML Object&lt;/a&gt; contains additional information about the available options.&lt;/p&gt;

&lt;h5 id=&#34;schema-object-examples&#34;&gt;Schema Object Examples&lt;/h5&gt;

&lt;h6 id=&#34;primitive-sample&#34;&gt;Primitive Sample&lt;/h6&gt;

&lt;p&gt;Unlike previous versions of Swagger, Schema definitions can be used to describe primitive and arrays as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
    &amp;quot;format&amp;quot;: &amp;quot;email&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: string
format: email
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;simple-model&#34;&gt;Simple Model&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
  &amp;quot;required&amp;quot;: [
    &amp;quot;name&amp;quot;
  ],
  &amp;quot;properties&amp;quot;: {
    &amp;quot;name&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    },
    &amp;quot;address&amp;quot;: {
      &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Address&amp;quot;
    },
    &amp;quot;age&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
      &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;,
      &amp;quot;minimum&amp;quot;: 0
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: object
required:
- name
properties:
  name:
    type: string
  address:
    $ref: &#39;#/definitions/Address&#39;
  age:
    type: integer
    format: int32
    minimum: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;model-with-map-dictionary-properties&#34;&gt;Model with Map/Dictionary Properties&lt;/h6&gt;

&lt;p&gt;For a simple string to string mapping:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
  &amp;quot;additionalProperties&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: object
additionalProperties:
  type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a string to model mapping:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
  &amp;quot;additionalProperties&amp;quot;: {
    &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/ComplexModel&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: object
additionalProperties:
  $ref: &#39;#/definitions/ComplexModel&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;model-with-example&#34;&gt;Model with Example&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
  &amp;quot;properties&amp;quot;: {
    &amp;quot;id&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
      &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
    },
    &amp;quot;name&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    }
  },
  &amp;quot;required&amp;quot;: [
    &amp;quot;name&amp;quot;
  ],
  &amp;quot;example&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;Puma&amp;quot;,
    &amp;quot;id&amp;quot;: 1
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: object
properties:
  id:
    type: integer
    format: int64
  name:
    type: string
required:
- name
example:
  name: Puma
  id: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;models-with-composition&#34;&gt;Models with Composition&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;definitions&amp;quot;: {
    &amp;quot;ErrorModel&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
      &amp;quot;required&amp;quot;: [
        &amp;quot;message&amp;quot;,
        &amp;quot;code&amp;quot;
      ],
      &amp;quot;properties&amp;quot;: {
        &amp;quot;message&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
        },
        &amp;quot;code&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
          &amp;quot;minimum&amp;quot;: 100,
          &amp;quot;maximum&amp;quot;: 600
        }
      }
    },
    &amp;quot;ExtendedErrorModel&amp;quot;: {
      &amp;quot;allOf&amp;quot;: [
        {
          &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/ErrorModel&amp;quot;
        },
        {
          &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
          &amp;quot;required&amp;quot;: [
            &amp;quot;rootCause&amp;quot;
          ],
          &amp;quot;properties&amp;quot;: {
            &amp;quot;rootCause&amp;quot;: {
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            }
          }
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;definitions:
  ErrorModel:
    type: object
    required:
    - message
    - code
    properties:
      message:
        type: string
      code:
        type: integer
        minimum: 100
        maximum: 600
  ExtendedErrorModel:
    allOf:
    - $ref: &#39;#/definitions/ErrorModel&#39;
    - type: object
      required:
      - rootCause
      properties:
        rootCause:
          type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;models-with-polymorphism-support&#34;&gt;Models with Polymorphism Support&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;definitions&amp;quot;: {
    &amp;quot;Pet&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
      &amp;quot;discriminator&amp;quot;: &amp;quot;petType&amp;quot;,
      &amp;quot;properties&amp;quot;: {
        &amp;quot;name&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
        },
        &amp;quot;petType&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
        }
      },
      &amp;quot;required&amp;quot;: [
        &amp;quot;name&amp;quot;,
        &amp;quot;petType&amp;quot;
      ]
    },
    &amp;quot;Cat&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;A representation of a cat&amp;quot;,
      &amp;quot;allOf&amp;quot;: [
        {
          &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Pet&amp;quot;
        },
        {
          &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
          &amp;quot;properties&amp;quot;: {
            &amp;quot;huntingSkill&amp;quot;: {
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;The measured skill for hunting&amp;quot;,
              &amp;quot;default&amp;quot;: &amp;quot;lazy&amp;quot;,
              &amp;quot;enum&amp;quot;: [
                &amp;quot;clueless&amp;quot;,
                &amp;quot;lazy&amp;quot;,
                &amp;quot;adventurous&amp;quot;,
                &amp;quot;aggressive&amp;quot;
              ]
            }
          },
          &amp;quot;required&amp;quot;: [
            &amp;quot;huntingSkill&amp;quot;
          ]
        }
      ]
    },
    &amp;quot;Dog&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;A representation of a dog&amp;quot;,
      &amp;quot;allOf&amp;quot;: [
        {
          &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Pet&amp;quot;
        },
        {
          &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
          &amp;quot;properties&amp;quot;: {
            &amp;quot;packSize&amp;quot;: {
              &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
              &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;the size of the pack the dog is from&amp;quot;,
              &amp;quot;default&amp;quot;: 0,
              &amp;quot;minimum&amp;quot;: 0
            }
          },
          &amp;quot;required&amp;quot;: [
            &amp;quot;packSize&amp;quot;
          ]
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;definitions:
  Pet:
    type: object
    discriminator: petType
    properties:
      name:
        type: string
      petType:
        type: string
    required:
    - name
    - petType
  Cat:
    description: A representation of a cat
    allOf:
    - $ref: &#39;#/definitions/Pet&#39;
    - type: object
      properties:
        huntingSkill:
          type: string
          description: The measured skill for hunting
          default: lazy
          enum:
          - clueless
          - lazy
          - adventurous
          - aggressive
      required:
      - huntingSkill
  Dog:
    description: A representation of a dog
    allOf:
    - $ref: &#39;#/definitions/Pet&#39;
    - type: object
      properties:
        packSize:
          type: integer
          format: int32
          description: the size of the pack the dog is from
          default: 0
          minimum: 0
      required:
      - packSize
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-xmlobject-a-xml-object&#34;&gt;&lt;a name=&#34;xmlObject&#34;&gt;&lt;/a&gt;XML Object&lt;/h4&gt;

&lt;p&gt;A metadata object that allows for more fine-tuned XML model definitions.&lt;/p&gt;

&lt;p&gt;When using arrays, XML element names are &lt;em&gt;not&lt;/em&gt; inferred (for singular/plural forms) and the &lt;code&gt;name&lt;/code&gt; property should be used to add that information. See examples for expected behavior.&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-14&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;xmlName&#34;&gt;&lt;/a&gt;name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Replaces the name of the element/attribute used for the described schema property. When defined within the Items Object (&lt;code&gt;items&lt;/code&gt;), it will affect the name of the individual XML elements within the list. When defined alongside &lt;code&gt;type&lt;/code&gt; being &lt;code&gt;array&lt;/code&gt; (outside the &lt;code&gt;items&lt;/code&gt;), it will affect the wrapping element and only if &lt;code&gt;wrapped&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. If &lt;code&gt;wrapped&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, it will be ignored.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;xmlNamespace&#34;&gt;&lt;/a&gt;namespace&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The URL of the namespace definition. Value SHOULD be in the form of a URL.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;xmlPrefix&#34;&gt;&lt;/a&gt;prefix&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The prefix to be used for the &lt;a href=&#34;#xmlName&#34;&gt;name&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;xmlAttribute&#34;&gt;&lt;/a&gt;attribute&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Declares whether the property definition translates to an attribute instead of an element. 默认值为&lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;xmlWrapped&#34;&gt;&lt;/a&gt;wrapped&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;MAY be used only for an array definition. Signifies whether the array is wrapped (for example, &lt;code&gt;&amp;lt;books&amp;gt;&amp;lt;book/&amp;gt;&amp;lt;book/&amp;gt;&amp;lt;/books&amp;gt;&lt;/code&gt;) or unwrapped (&lt;code&gt;&amp;lt;book/&amp;gt;&amp;lt;book/&amp;gt;&lt;/code&gt;). 默认值为&lt;code&gt;false&lt;/code&gt;. The definition takes effect only when defined alongside &lt;code&gt;type&lt;/code&gt; being &lt;code&gt;array&lt;/code&gt; (outside the &lt;code&gt;items&lt;/code&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;patterned-objects-10&#34;&gt;Patterned Objects&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;xmlExtensions&#34;&gt;&lt;/a&gt;^x-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Allows extensions to the Swagger Schema. The field name MUST begin with &lt;code&gt;x-&lt;/code&gt;, for example, &lt;code&gt;x-internal-id&lt;/code&gt;. The value can be &lt;code&gt;null&lt;/code&gt;, a primitive, an array or an object. See &lt;a href=&#34;#vendorExtensions&#34;&gt;Vendor Extensions&lt;/a&gt; for further details.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;xml-object-examples&#34;&gt;XML Object Examples&lt;/h5&gt;

&lt;p&gt;The examples of the XML object definitions are included inside a property definition of a &lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt; with a sample of the XML representation of it.&lt;/p&gt;

&lt;h6 id=&#34;no-xml-element&#34;&gt;No XML Element&lt;/h6&gt;

&lt;p&gt;Basic string property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    &amp;quot;animals&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;animals&amp;gt;...&amp;lt;/animals&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basic string array property (&lt;a href=&#34;#xmlWrapped&#34;&gt;&lt;code&gt;wrapped&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;false&lt;/code&gt; by default):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    &amp;quot;animals&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
        &amp;quot;items&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: array
  items:
    type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;animals&amp;gt;...&amp;lt;/animals&amp;gt;
&amp;lt;animals&amp;gt;...&amp;lt;/animals&amp;gt;
&amp;lt;animals&amp;gt;...&amp;lt;/animals&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;xml-name-replacement&#34;&gt;XML Name Replacement&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;animals&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
    &amp;quot;xml&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;animal&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: string
  xml:
    name: animal
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;animal&amp;gt;...&amp;lt;/animal&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;xml-attribute-prefix-and-namespace&#34;&gt;XML Attribute, Prefix and Namespace&lt;/h6&gt;

&lt;p&gt;In this example, a full model definition is shown.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;Person&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
    &amp;quot;properties&amp;quot;: {
      &amp;quot;id&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
        &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;,
        &amp;quot;xml&amp;quot;: {
          &amp;quot;attribute&amp;quot;: true
        }
      },
      &amp;quot;name&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
        &amp;quot;xml&amp;quot;: {
          &amp;quot;namespace&amp;quot;: &amp;quot;http://swagger.io/schema/sample&amp;quot;,
          &amp;quot;prefix&amp;quot;: &amp;quot;sample&amp;quot;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Person:
  type: object
  properties:
    id:
      type: integer
      format: int32
      xml:
        attribute: true
    name:
      type: string
      xml:
        namespace: http://swagger.io/schema/sample
        prefix: sample
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;Person id=&amp;quot;123&amp;quot;&amp;gt;
    &amp;lt;sample:name xmlns:sample=&amp;quot;http://swagger.io/schema/sample&amp;quot;&amp;gt;example&amp;lt;/sample:name&amp;gt;
&amp;lt;/Person&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;xml-arrays&#34;&gt;XML Arrays&lt;/h6&gt;

&lt;p&gt;Changing the element names:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;animals&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
      &amp;quot;xml&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;animal&amp;quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: array
  items:
    type: string
    xml:
      name: animal
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
&amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The external &lt;code&gt;name&lt;/code&gt; property has no effect on the XML:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;animals&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
      &amp;quot;xml&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;animal&amp;quot;
      }
    },
    &amp;quot;xml&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;aliens&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: array
  items:
    type: string
    xml:
      name: animal
  xml:
    name: aliens
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
&amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even when the array is wrapped, if no name is explicitly defined, the same name will be used both internally and externally:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;animals&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    },
    &amp;quot;xml&amp;quot;: {
      &amp;quot;wrapped&amp;quot;: true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: array
  items:
    type: string
  xml:
    wrapped: true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;animals&amp;gt;
  &amp;lt;animals&amp;gt;value&amp;lt;/animals&amp;gt;
  &amp;lt;animals&amp;gt;value&amp;lt;/animals&amp;gt;
&amp;lt;/animals&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To overcome the above example, the following definition can be used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;animals&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
      &amp;quot;xml&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;animal&amp;quot;
      }
    },
    &amp;quot;xml&amp;quot;: {
      &amp;quot;wrapped&amp;quot;: true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: array
  items:
    type: string
    xml:
      name: animal
  xml:
    wrapped: true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;animals&amp;gt;
  &amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
  &amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
&amp;lt;/animals&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Affecting both internal and external names:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;animals&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
      &amp;quot;xml&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;animal&amp;quot;
      }
    },
    &amp;quot;xml&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;aliens&amp;quot;,
      &amp;quot;wrapped&amp;quot;: true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: array
  items:
    type: string
    xml:
      name: animal
  xml:
    name: aliens
    wrapped: true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;aliens&amp;gt;
  &amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
  &amp;lt;animal&amp;gt;value&amp;lt;/animal&amp;gt;
&amp;lt;/aliens&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we change the external element but not the internal ones:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;animals&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
    &amp;quot;items&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    },
    &amp;quot;xml&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;aliens&amp;quot;,
      &amp;quot;wrapped&amp;quot;: true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;animals:
  type: array
  items:
    type: string
  xml:
    name: aliens
    wrapped: true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;aliens&amp;gt;
  &amp;lt;aliens&amp;gt;value&amp;lt;/aliens&amp;gt;
  &amp;lt;aliens&amp;gt;value&amp;lt;/aliens&amp;gt;
&amp;lt;/aliens&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-definitionsobject-a-definitions-object&#34;&gt;&lt;a name=&#34;definitionsObject&#34;&gt;&lt;/a&gt;Definitions Object&lt;/h4&gt;

&lt;p&gt;定义参数和响应使用的数据对象。&lt;/p&gt;

&lt;p&gt;An object to hold data types that can be consumed and produced by operations. These data types can be primitives, arrays or models.&lt;/p&gt;

&lt;h5 id=&#34;patterned-fields-7&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;definitionsName&#34;&gt;&lt;/a&gt;{name}&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一个 description，&amp;rdquo;name&amp;rdquo;映射到定义的数据对象/模式。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;definitions-object-example&#34;&gt;Definitions Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;Category&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
    &amp;quot;properties&amp;quot;: {
      &amp;quot;id&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
        &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
      },
      &amp;quot;name&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
      }
    }
  },
  &amp;quot;Tag&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
    &amp;quot;properties&amp;quot;: {
      &amp;quot;id&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
        &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
      },
      &amp;quot;name&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Category:
  type: object
  properties:
    id:
      type: integer
      format: int64
    name:
      type: string
Tag:
  type: object
  properties:
    id:
      type: integer
      format: int64
    name:
      type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-parametersdefinitionsobject-a-parameters-definitions-object&#34;&gt;&lt;a name=&#34;parametersDefinitionsObject&#34;&gt;&lt;/a&gt;Parameters Definitions Object&lt;/h4&gt;

&lt;p&gt;定义可重复引用的参数对象。&lt;/p&gt;

&lt;p&gt;An object to hold parameters to be reused across operations. Parameter definitions can be referenced to the ones defined here.&lt;/p&gt;

&lt;p&gt;这里定义的参数不是全局的参数。&lt;/p&gt;

&lt;p&gt;This does &lt;em&gt;not&lt;/em&gt; define global operation parameters.&lt;/p&gt;

&lt;h5 id=&#34;patterned-fields-8&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;pdName&#34;&gt;&lt;/a&gt;{name}&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#parameterObject&#34;&gt;Parameter Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一个 parameter 定义，&amp;rdquo;name&amp;rdquo;映射定义的参数对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;parameters-definition-object-example&#34;&gt;Parameters Definition Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;skipParam&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;skip&amp;quot;,
    &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;number of items to skip&amp;quot;,
    &amp;quot;required&amp;quot;: true,
    &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
    &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;
  },
  &amp;quot;limitParam&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;limit&amp;quot;,
    &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;max records to return&amp;quot;,
    &amp;quot;required&amp;quot;: true,
    &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
    &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;skipParam:
  name: skip
  in: query
  description: number of items to skip
  required: true
  type: integer
  format: int32
limitParam:
  name: limit
  in: query
  description: max records to return
  required: true
  type: integer
  format: int32
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-responsesdefinitionsobject-a-responses-definitions-object&#34;&gt;&lt;a name=&#34;responsesDefinitionsObject&#34;&gt;&lt;/a&gt;Responses Definitions Object&lt;/h4&gt;

&lt;p&gt;定义可重复引用的响应对象。&lt;/p&gt;

&lt;p&gt;An object to hold responses to be reused across operations. Response definitions can be referenced to the ones defined here.&lt;/p&gt;

&lt;p&gt;这里定义的响应不是全局的响应。&lt;/p&gt;

&lt;p&gt;This does &lt;em&gt;not&lt;/em&gt; define global operation responses.&lt;/p&gt;

&lt;h5 id=&#34;patterned-fields-9&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;rdName&#34;&gt;&lt;/a&gt;{name}&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#responseObject&#34;&gt;Response Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一个 response 定义，&amp;rdquo;name&amp;rdquo;映射定义的响应。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;responses-definitions-object-example&#34;&gt;Responses Definitions Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;NotFound&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;Entity not found.&amp;quot;
  },
  &amp;quot;IllegalInput&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;Illegal input for operation.&amp;quot;
  },
  &amp;quot;GeneralError&amp;quot;: {
    &amp;quot;description&amp;quot;: &amp;quot;General Error&amp;quot;,
    &amp;quot;schema&amp;quot;: {
        &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/GeneralError&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;NotFound:
  description: Entity not found.
IllegalInput:
  description: Illegal input for operation.
GeneralError:
  description: General Error
  schema:
    $ref: &#39;#/definitions/GeneralError&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-securitydefinitionsobject-a-security-definitions-object&#34;&gt;&lt;a name=&#34;securityDefinitionsObject&#34;&gt;&lt;/a&gt;Security Definitions Object&lt;/h4&gt;

&lt;p&gt;A declaration of the security schemes available to be used in the specification. This does not enforce the security schemes on the operations and only serves to provide the relevant details for each scheme.&lt;/p&gt;

&lt;h5 id=&#34;patterned-fields-10&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;sdName&#34;&gt;&lt;/a&gt;{name}&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#securitySchemeObject&#34;&gt;Security Scheme Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A single security scheme definition, mapping a &amp;ldquo;name&amp;rdquo; to the scheme it defines.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;security-definitions-object-example&#34;&gt;Security Definitions Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;api_key&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;apiKey&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;api_key&amp;quot;,
    &amp;quot;in&amp;quot;: &amp;quot;header&amp;quot;
  },
  &amp;quot;petstore_auth&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;oauth2&amp;quot;,
    &amp;quot;authorizationUrl&amp;quot;: &amp;quot;http://swagger.io/api/oauth/dialog&amp;quot;,
    &amp;quot;flow&amp;quot;: &amp;quot;implicit&amp;quot;,
    &amp;quot;scopes&amp;quot;: {
      &amp;quot;write:pets&amp;quot;: &amp;quot;modify pets in your account&amp;quot;,
      &amp;quot;read:pets&amp;quot;: &amp;quot;read your pets&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;api_key:
  type: apiKey
  name: api_key
  in: header
petstore_auth:
  type: oauth2
  authorizationUrl: http://swagger.io/api/oauth/dialog
  flow: implicit
  scopes:
    write:pets: modify pets in your account
    read:pets: read your pets
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-securityschemeobject-a-security-scheme-object&#34;&gt;&lt;a name=&#34;securitySchemeObject&#34;&gt;&lt;/a&gt;Security Scheme Object&lt;/h4&gt;

&lt;p&gt;Allows the definition of a security scheme that can be used by the operations. Supported schemes are basic authentication, an API key (either as a header or as a query parameter) and OAuth2&amp;rsquo;s common flows (implicit, password, application and access code).&lt;/p&gt;

&lt;h5 id=&#34;fixed-fields-15&#34;&gt;Fixed Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Validity&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeType&#34;&gt;&lt;/a&gt;type&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Any&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; The type of the security scheme. Valid values are &lt;code&gt;&amp;quot;basic&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;apiKey&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;oauth2&amp;quot;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeDescription&#34;&gt;&lt;/a&gt;description&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Any&lt;/td&gt;
&lt;td&gt;A short description for security scheme.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeName&#34;&gt;&lt;/a&gt;name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;apiKey&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; The name of the header or query parameter to be used.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeIn&#34;&gt;&lt;/a&gt;in&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;apiKey&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Required&lt;/strong&gt; The location of the API key. Valid values are &lt;code&gt;&amp;quot;query&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;header&amp;quot;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeFlow&#34;&gt;&lt;/a&gt;flow&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;oauth2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; The flow used by the OAuth2 security scheme. Valid values are &lt;code&gt;&amp;quot;implicit&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;password&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;application&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;accessCode&amp;quot;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeAuthorizationUrl&#34;&gt;&lt;/a&gt;authorizationUrl&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;oauth2&lt;/code&gt; (&lt;code&gt;&amp;quot;implicit&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;accessCode&amp;quot;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; The authorization URL to be used for this flow. This SHOULD be in the form of a URL.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeTokenUrl&#34;&gt;&lt;/a&gt;tokenUrl&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;oauth2&lt;/code&gt; (&lt;code&gt;&amp;quot;password&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;application&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;accessCode&amp;quot;&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; The token URL to be used for this flow. This SHOULD be in the form of a URL.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeScopes&#34;&gt;&lt;/a&gt;scopes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#scopesObject&#34;&gt;Scopes Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;oauth2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;必须&lt;/strong&gt; The available scopes for the OAuth2 security scheme.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;patterned-fields-11&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securitySchemeExtensions&#34;&gt;&lt;/a&gt;^x-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Allows extensions to the Swagger Schema. The field name MUST begin with &lt;code&gt;x-&lt;/code&gt;, for example, &lt;code&gt;x-internal-id&lt;/code&gt;. The value can be &lt;code&gt;null&lt;/code&gt;, a primitive, an array or an object. See &lt;a href=&#34;#vendorExtensions&#34;&gt;Vendor Extensions&lt;/a&gt; for further details.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;security-scheme-object-example&#34;&gt;Security Scheme Object Example&lt;/h5&gt;

&lt;h6 id=&#34;basic-authentication-sample&#34;&gt;Basic Authentication Sample&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;basic&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: basic
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;api-key-sample&#34;&gt;API Key Sample&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;apiKey&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;api_key&amp;quot;,
  &amp;quot;in&amp;quot;: &amp;quot;header&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: apiKey
name: api_key
in: header
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;implicit-oauth2-sample&#34;&gt;Implicit OAuth2 Sample&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;oauth2&amp;quot;,
  &amp;quot;authorizationUrl&amp;quot;: &amp;quot;http://swagger.io/api/oauth/dialog&amp;quot;,
  &amp;quot;flow&amp;quot;: &amp;quot;implicit&amp;quot;,
  &amp;quot;scopes&amp;quot;: {
    &amp;quot;write:pets&amp;quot;: &amp;quot;modify pets in your account&amp;quot;,
    &amp;quot;read:pets&amp;quot;: &amp;quot;read your pets&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: oauth2
authorizationUrl: http://swagger.io/api/oauth/dialog
flow: implicit
scopes:
  write:pets: modify pets in your account
  read:pets: read your pets
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-scopesobject-a-scopes-object&#34;&gt;&lt;a name=&#34;scopesObject&#34;&gt;&lt;/a&gt;Scopes Object&lt;/h4&gt;

&lt;p&gt;Lists the available scopes for an OAuth2 security scheme.&lt;/p&gt;

&lt;h5 id=&#34;patterned-fields-12&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;scopesName&#34;&gt;&lt;/a&gt;{name}&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Maps between a name of a scope to a short description of it (as the value of the property).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;patterned-objects-11&#34;&gt;Patterned Objects&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;scopesExtensions&#34;&gt;&lt;/a&gt;^x-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Any&lt;/td&gt;
&lt;td&gt;Allows extensions to the Swagger Schema. The field name MUST begin with &lt;code&gt;x-&lt;/code&gt;, for example, &lt;code&gt;x-internal-id&lt;/code&gt;. The value can be &lt;code&gt;null&lt;/code&gt;, a primitive, an array or an object. See &lt;a href=&#34;#vendorExtensions&#34;&gt;Vendor Extensions&lt;/a&gt; for further details.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;scopes-object-example&#34;&gt;Scopes Object Example&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;write:pets&amp;quot;: &amp;quot;modify pets in your account&amp;quot;,
  &amp;quot;read:pets&amp;quot;: &amp;quot;read your pets&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;write:pets: modify pets in your account
read:pets: read your pets
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-name-securityrequirementobject-a-security-requirement-object&#34;&gt;&lt;a name=&#34;securityRequirementObject&#34;&gt;&lt;/a&gt;Security Requirement Object&lt;/h4&gt;

&lt;p&gt;Lists the required security schemes to execute this operation. The object can have multiple security schemes declared in it which are all required (that is, there is a logical AND between the schemes).&lt;/p&gt;

&lt;p&gt;The name used for each property MUST correspond to a security scheme declared in the &lt;a href=&#34;#securityDefinitionsObject&#34;&gt;Security Definitions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;patterned-fields-13&#34;&gt;Patterned Fields&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Pattern&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;securityRequirementsName&#34;&gt;&lt;/a&gt;{name}&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[&lt;code&gt;string&lt;/code&gt;]&lt;/td&gt;
&lt;td&gt;Each name must correspond to a security scheme which is declared in the &lt;a href=&#34;#securityDefinitions&#34;&gt;Security Definitions&lt;/a&gt;. If the security scheme is of type &lt;code&gt;&amp;quot;oauth2&amp;quot;&lt;/code&gt;, then the value is a list of scope names required for the execution. For other security scheme types, the array MUST be empty.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;security-requirement-object-examples&#34;&gt;Security Requirement Object Examples&lt;/h5&gt;

&lt;h6 id=&#34;non-oauth2-security-requirement&#34;&gt;Non-OAuth2 Security Requirement&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;api_key&amp;quot;: []
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;api_key: []
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;oauth2-security-requirement&#34;&gt;OAuth2 Security Requirement&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;petstore_auth&amp;quot;: [
    &amp;quot;write:pets&amp;quot;,
    &amp;quot;read:pets&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;petstore_auth:
- write:pets
- read:pets
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-vendorextensions-a-specification-extensions&#34;&gt;&lt;a name=&#34;vendorExtensions&#34;&gt;&lt;/a&gt;Specification Extensions&lt;/h3&gt;

&lt;p&gt;虽然  Swagger Specification 适用于大多数用例，但是可以在某些节点添加数据，扩展规范。&lt;/p&gt;

&lt;p&gt;扩展属性必须以&lt;code&gt;&amp;quot;x-&amp;quot;&lt;/code&gt; 作为前缀，而且值必须符合JSON格式。&lt;/p&gt;

&lt;p&gt;这些扩展或许不能被某些工具支持，但是你可以为内部或开源的工具添加对这些扩展的支持。&lt;/p&gt;

&lt;h3 id=&#34;a-name-securityfiltering-a-security-filtering&#34;&gt;&lt;a name=&#34;securityFiltering&#34;&gt;&lt;/a&gt;Security Filtering&lt;/h3&gt;

&lt;p&gt;Swagger 规范中的一些对象可以删除或者为空，即使它们是 API 文档的核心。&lt;/p&gt;

&lt;p&gt;The reasoning behind it is to allow an additional layer of access control over the documentation itself. 虽然不是规范的一部分，但是某些库可以通过某种形式的认证/授权来访问文档的某部分&lt;/p&gt;

&lt;p&gt;Two examples for this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#pathsObject&#34;&gt;Paths Object&lt;/a&gt; 可能为空。 It may be counterintuitive, but this may tell the viewer that they got to the right place, but can&amp;rsquo;t access any documentation. They&amp;rsquo;d still have access to the &lt;a href=&#34;#infoObject&#34;&gt;Info Object&lt;/a&gt; which may contain additional information regarding authentication.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pathItemObject&#34;&gt;Path Item Object&lt;/a&gt; 为空时，这种情况，浏览者知道路径存在，但不能看到任何操作或参数。This is different than hiding the path itself from the &lt;a href=&#34;#pathsObject&#34;&gt;Paths Object&lt;/a&gt; so the user will not be aware of its existence. 可以更好地让文档提供者控制浏览者可以看什么。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>自建图床-Qchan</title>
      <link>http://hugo.xizero.com/note/ImageHosting/</link>
      <pubDate>Sun, 19 Feb 2017 17:59:55 +0800</pubDate>
      
      <guid>http://hugo.xizero.com/note/ImageHosting/</guid>
      <description>

&lt;h2 id=&#34;简述&#34;&gt;简述&lt;/h2&gt;

&lt;p&gt;做完博客，搭建一个图床，应该很正常吧。(｡･∀･)ﾉﾞ&lt;/p&gt;

&lt;p&gt;翻来覆去，常见的都是在七牛等空间商托管，或者免费的图床网站，因为要自定域名还要文件安全，所以自建是最好的了。
PHP图床程序开源常用的有 Qchan 、树洞外链、Chevereto这三种，还找到一个go编写的 Rikka 。以上程序，我都在 vps 上搭建过，每个都有难以描述的 bug ，很是心累，最后选择了 Qchan ，修改了一下主题。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;毫无一点 PHP和Go 基础的我，表示 （╯＾╰）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;图床程序&#34;&gt;图床程序&lt;/h2&gt;

&lt;h3 id=&#34;rikkia&#34;&gt;Rikkia&lt;/h3&gt;

&lt;p&gt;搭建难度：★☆☆☆☆&lt;/p&gt;

&lt;p&gt;Github : &lt;a href=&#34;https://github.com/7sDream/rikka&#34;&gt;https://github.com/7sDream/rikka&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;描述：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因为之前用过 docker ，搭建这个，很容易上手。&lt;/p&gt;

&lt;p&gt;很简洁，用于私人好一点，没有用户模块，没有后台管理。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我是用Nginx做二级域名代理，但是 Rikkia 返回的图片地址，却是 nginx 配置的 127.0.0.1。&lt;/p&gt;

&lt;p&gt;本想重新编译一下，但是天朝XX，golang 一直连接超时……&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;qchan&#34;&gt;Qchan&lt;/h3&gt;

&lt;p&gt;搭建难度：★★☆☆☆&lt;/p&gt;

&lt;p&gt;Github : &lt;a href=&#34;https://github.com/qakcn/qchan&#34;&gt;https://github.com/qakcn/qchan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;描述：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Qchan 没有用户模块，运行需要 PHP，对于像我这样没有接触过 php 的人来说，在 linux 上编译安装，简直了，没有安装成功，后来用 apt 安装的。&lt;/p&gt;

&lt;p&gt;界面很是瞎眼，重新写了一下主题，马马虎虎吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;linux 下的安装，真心折磨；win 还好，开启插件也简单。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;树洞外链&#34;&gt;树洞外链&lt;/h3&gt;

&lt;p&gt;搭建难度：★★★☆☆&lt;/p&gt;

&lt;p&gt;官网：&lt;a href=&#34;https://github.com/HFO4/shudong-share&#34;&gt;https://github.com/HFO4/shudong-share&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github : &lt;a href=&#34;https://github.com/qakcn/qchan&#34;&gt;https://github.com/qakcn/qchan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;描述：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;运行需要PHP和MySQL，超级强大，不止能上传图片，做一些文件的分享也可以，就像是个云盘吧。&lt;/p&gt;

&lt;p&gt;后台管理很复杂，不同的上传方案，不同的用户组等等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;分享文件、注册用户出现bug，官网上的帮助也没有相关内容。&lt;/p&gt;

&lt;p&gt;上传 svg 卡住，所以放弃了。&lt;/p&gt;

&lt;p&gt;不过，真是一个好的分享云盘。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;chevereto&#34;&gt;Chevereto&lt;/h3&gt;

&lt;p&gt;搭建难度：★★★☆☆&lt;/p&gt;

&lt;p&gt;官网：&lt;a href=&#34;https://chevereto.com/&#34;&gt;https://chevereto.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;描述：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;老牌的图床程序，对版权很是看重，有免费开源版，网页华丽好看。&lt;/p&gt;

&lt;p&gt;商业版和开源版有些差别，对国内好像不友好。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;不支持修改 上传图片类型，枪毙。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;搭建-qchan&#34;&gt;搭建 Qchan&lt;/h2&gt;

&lt;p&gt;简单描述一下，搭建 Qchan 的过程。&lt;/p&gt;

&lt;h3 id=&#34;安装-php&#34;&gt;安装 PHP&lt;/h3&gt;

&lt;p&gt;编译安装失败，apt 大法好。&lt;/p&gt;

&lt;p&gt;环境：Ubuntu 16.04&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install php php-gd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置文件位置：&lt;code&gt;/etc/php/7.0/fpm/php.ini&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;修改配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;post_max_size = 30M
upload_max_filesize = 30M
extension=php_gd2.dll
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;win 处了以上还需要修改&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;extension_dir = &amp;quot;ext&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;安装-nginx&#34;&gt;安装 Nginx&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 &lt;code&gt;/etc/nginx/conf.d/&lt;/code&gt; 中新建 &lt;code&gt;www.conf&lt;/code&gt;，添加&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;server {
        listen 80 ;
        server_name ox.xizero.com;
        rewrite ^(.*)$  https://ox.xizero.com$1 permanent;
}
server {
        listen 443 ssl;
        server_name demo.com;
        ssl on;
        ssl_certificate conf.d/1_demo.com_bundle.crt;
        ssl_certificate_key conf.d/2_demo.com.key;
        root /home/ubuntu/qchan/;
        index index.php;

        location / {
                try_files $uri $uri/ /index.html;
        }
        location ~ \.php$ {
                include /etc/nginx/fastcgi_params;
                fastcgi_pass unix:/run/php/php7.0-fpm.sock;
                fastcgi_index index.php;
                fastcgi_param SCRIPT_FILENAME /home/ubuntu/qchan/$fastcgi_script_name;
                client_max_body_size    20m;
        }

        location ~ /purge(/.*){
        expires 10m;
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;下载项目&#34;&gt;下载项目&lt;/h3&gt;

&lt;p&gt;原 Github : &lt;a href=&#34;https://github.com/qakcn/qchan&#34;&gt;https://github.com/qakcn/qchan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我的 Github : &lt;a href=&#34;https://github.com/f12998765/qchan&#34;&gt;https://github.com/f12998765/qchan&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;克隆项目到 &lt;code&gt;~/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改  config.php 中的管理员用户和密码&lt;/li&gt;
&lt;li&gt;修改权限 &lt;code&gt;sudo chmod -R 777 qchan/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;结束&#34;&gt;结束&lt;/h3&gt;

&lt;p&gt;自建图床，花费了几天，还好，最终做了出来。学了点 php 安装，了解了一些套路，果然人还是要努力的！↖(^ω^)↗&lt;/p&gt;

&lt;p&gt;最后，  &lt;strong&gt;PHP是世界上最好的语言&lt;/strong&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SLF4J 和 Logback</title>
      <link>http://hugo.xizero.com/javaee/SLF4JANDLogback/</link>
      <pubDate>Sun, 19 Feb 2017 15:54:31 +0800</pubDate>
      
      <guid>http://hugo.xizero.com/javaee/SLF4JANDLogback/</guid>
      <description>

&lt;h1 id=&#34;slf4j-simple-logging-facade-for-java&#34;&gt;SLF4J - - Simple Logging Facade for Java&lt;/h1&gt;

&lt;p&gt;官网：&lt;a href=&#34;https://www.slf4j.org/&#34;&gt;https://www.slf4j.org/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;hello-world&#34;&gt;Hello World&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Slf4jTest {  
    static private Logger logger = LoggerFactory.getLogger(Slf4jTest.class);  
    public static void main(String[] args) {  
        logger.info(&amp;quot;Hello World {}&amp;quot;,&amp;quot;!&amp;quot;)  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更多推荐阅读 ：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://my.oschina.net/wangxindong/blog/825066&#34;&gt;门面之下，日志之上-SLF4J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ifeve.com/?x=0&amp;amp;y=0&amp;amp;s=slf4j&#34;&gt;并发编程网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;logback&#34;&gt;Logback&lt;/h1&gt;

&lt;p&gt;官网：&lt;a href=&#34;https://logback.qos.ch/&#34;&gt;https://logback.qos.ch/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;logback分为三个模块&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;logback-core

&lt;ul&gt;
&lt;li&gt;为其他两个模块打下了基础&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;logback-classic

&lt;ul&gt;
&lt;li&gt;可以被看做个有显著改进的log4J&lt;/li&gt;
&lt;li&gt;实现了 SLF4J API&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;logback-access

&lt;ul&gt;
&lt;li&gt;​​与Servlet容器（例如Tomcat和Jetty）集成，以提供HTTP访问日志功能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;日志级别&#34;&gt;日志级别&lt;/h2&gt;

&lt;p&gt;原地址：&lt;a href=&#34;https://zh.wikipedia.org/wiki/Log4j&#34;&gt;https://zh.wikipedia.org/wiki/Log4j&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;常用级别由低到高，依次为 Trace &amp;lt; Debug &amp;lt; Tnfo &amp;lt; Warn &amp;lt; Error&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;级别&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;OFF&lt;/td&gt;
&lt;td&gt;最高级别，用于关闭日志记录。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;FATAL&lt;/td&gt;
&lt;td&gt;导致应用程序提前终止的严重错误。一般这些信息将立即呈现在状态控制台上。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ERROR&lt;/td&gt;
&lt;td&gt;其他运行时错误或意外情况。一般这些信息将立即呈现在状态控制台上。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;WARN&lt;/td&gt;
&lt;td&gt;使用已过时的API，API的滥用，潜在错误，其他不良的或意外的运行时的状况（但不一定是错误的）。一般这些信息将立即呈现在状态控制台上。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;INFO&lt;/td&gt;
&lt;td&gt;令人感兴趣的运行时事件（启动/关闭）。一般这些信息将立即呈现在状态控制台上，因而要保守使用，并保持到最低限度。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DEBUG&lt;/td&gt;
&lt;td&gt;流经系统的详细信息。一般这些信息只记录到日志文件中。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;TRACE&lt;/td&gt;
&lt;td&gt;最详细的信息。一般这些信息只记录到日志文件中。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;logback-xml-配置&#34;&gt;logback.xml 配置&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://ox.xizero.com/uploads/2017/02/Logback.xml.svg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;

&lt;h3 id=&#34;1-pox-xml-添加依赖&#34;&gt;1.pox.xml 添加依赖&lt;/h3&gt;

&lt;p&gt;仓库地址：&lt;a href=&#34;https://mvnrepository.com/artifact/ch.qos.logback/logback-classic&#34;&gt;https://mvnrepository.com/artifact/ch.qos.logback/logback-classic&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;ch.qos.logback&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;logback-classic&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- 使用求值表达式过滤，需要添加 janino 依赖--&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.codehaus.janino&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;janino&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.0.6&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-src-main-resource添加logback-xml&#34;&gt;2.src/main/resource添加logback.xml&lt;/h3&gt;

&lt;p&gt;参考：&lt;a href=&#34;https://gist.githubusercontent.com/f12998765/28613af391c72c8c8ba47a0cef3f8250/raw/d1af5d48490308dd80645f9721e1af2b7cd6f69f/logback.xml&#34;&gt;logback.xml&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;configuration&amp;gt;
        &amp;lt;!-- 项目名称 --&amp;gt;
        &amp;lt;contextName&amp;gt;Test contextName&amp;lt;/contextName&amp;gt;

        &amp;lt;!-- 变量 --&amp;gt;
        &amp;lt;property name=&amp;quot;log&amp;quot; value=&amp;quot;./log&amp;quot;/&amp;gt;

        &amp;lt;!-- 时间戳 --&amp;gt;
        &amp;lt;timestamp key=&amp;quot;bySecond&amp;quot; datePattern=&amp;quot;yyyyMMdd&amp;quot; timeReference=&amp;quot;contextBirth&amp;quot;/&amp;gt;

        &amp;lt;!-- 在控制台打印日志 --&amp;gt;
        &amp;lt;appender name=&amp;quot;STDOUT&amp;quot; class=&amp;quot;ch.qos.logback.core.ConsoleAppender&amp;quot;&amp;gt;

                &amp;lt;!-- 级别过滤器 --&amp;gt;
                &amp;lt;filter class=&amp;quot;ch.qos.logback.classic.filter.ThresholdFilter&amp;quot;&amp;gt;
                        &amp;lt;level&amp;gt;DEBUG&amp;lt;/level&amp;gt;
                        &amp;lt;onMatch&amp;gt;ACCEPT&amp;lt;/onMatch&amp;gt;
                        &amp;lt;onMismatch&amp;gt;NEUTRAL&amp;lt;/onMismatch&amp;gt;
                &amp;lt;/filter&amp;gt;

                &amp;lt;!-- 临界值过滤器 --&amp;gt;
                &amp;lt;filter class=&amp;quot;ch.qos.logback.classic.filter.ThresholdFilter&amp;quot;&amp;gt;
                        &amp;lt;level&amp;gt;INFO&amp;lt;/level&amp;gt;
                        &amp;lt;onMatch&amp;gt;ACCEPT&amp;lt;/onMatch&amp;gt;
                        &amp;lt;onMismatch&amp;gt;DENY&amp;lt;/onMismatch&amp;gt;
                &amp;lt;/filter&amp;gt;


                &amp;lt;!-- 求值过滤器 --&amp;gt;
                &amp;lt;filter class=&amp;quot;ch.qos.logback.core.filter.EvaluatorFilter&amp;quot;&amp;gt;
                        &amp;lt;evaluator&amp;gt;
                                &amp;lt;matcher&amp;gt;
                                        &amp;lt;name&amp;gt;num&amp;lt;/name&amp;gt;
                                        &amp;lt;regex&amp;gt;\ba\w*\b&amp;lt;/regex&amp;gt;
                                &amp;lt;/matcher&amp;gt;
                                &amp;lt;expression&amp;gt; num.matches(formattedMessage) &amp;lt;/expression&amp;gt;
                        &amp;lt;/evaluator&amp;gt;
                        &amp;lt;onMatch&amp;gt;ACCEPT&amp;lt;/onMatch&amp;gt;
                        &amp;lt;onMismatch&amp;gt;DENY&amp;lt;/onMismatch&amp;gt;
                &amp;lt;/filter&amp;gt;

                &amp;lt;encoder&amp;gt;
                        &amp;lt;!-- pattern模式 %d时间 %thread 线程名 %level行为级别 %logger logger名称 %method 方法名称 %message 调用方法的入参消息 --&amp;gt;
                        &amp;lt;pattern&amp;gt;%-4d [%thread] %highlight%-5level %cyan%logger.%-10method - %message%n&amp;lt;/pattern&amp;gt;
                &amp;lt;/encoder&amp;gt;
        &amp;lt;/appender&amp;gt;

        &amp;lt;!-- FileAppender 输出到文件 --&amp;gt;
        &amp;lt;appender name=&amp;quot;FILE&amp;quot; class=&amp;quot;ch.qos.logback.core.FileAppender&amp;quot;&amp;gt;

                &amp;lt;file&amp;gt;${log}/log-${bySecond}.log&amp;lt;/file&amp;gt;

                &amp;lt;encoder&amp;gt;
                        &amp;lt;pattern&amp;gt;%date %level [%thread] %logger{30} [%file:%line] %msg%n&amp;lt;/pattern&amp;gt;
                &amp;lt;/encoder&amp;gt;
        &amp;lt;/appender&amp;gt;


        &amp;lt;!-- 滚动记录日志文件 --&amp;gt;
        &amp;lt;!-- 按时间滚动 --&amp;gt;
        &amp;lt;appender name=&amp;quot;FILE&amp;quot; class=&amp;quot;ch.qos.logback.core.rolling.RollingFileAppender&amp;quot;&amp;gt;
                &amp;lt;file&amp;gt;${log}/test_log.log&amp;lt;/file&amp;gt;
                &amp;lt;rollingPolicy class=&amp;quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&amp;quot;&amp;gt;
                        &amp;lt;!-- daily rollover --&amp;gt;
                        &amp;lt;fileNamePattern&amp;gt;${log}/log.%d{yyyy-MM-dd}.log&amp;lt;/fileNamePattern&amp;gt;

                        &amp;lt;!-- keep 30 days&#39; worth of history capped at 3GB total size --&amp;gt;
                        &amp;lt;maxHistory&amp;gt;30&amp;lt;/maxHistory&amp;gt;
                        &amp;lt;totalSizeCap&amp;gt;3GB&amp;lt;/totalSizeCap&amp;gt;
                &amp;lt;/rollingPolicy&amp;gt;

                &amp;lt;encoder&amp;gt;
                        &amp;lt;pattern&amp;gt;%-4relative [%thread] %-5level %logger{35} - %msg%n&amp;lt;/pattern&amp;gt;
                &amp;lt;/encoder&amp;gt;
        &amp;lt;/appender&amp;gt;

        &amp;lt;!-- Size and time based rolling policy --&amp;gt;
        &amp;lt;appender name=&amp;quot;ROLLING&amp;quot; class=&amp;quot;ch.qos.logback.core.rolling.RollingFileAppender&amp;quot;&amp;gt;
                &amp;lt;file&amp;gt;${log}/test_log.log&amp;lt;/file&amp;gt;
                &amp;lt;rollingPolicy class=&amp;quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&amp;quot;&amp;gt;
                        &amp;lt;!-- rollover daily --&amp;gt;
                        &amp;lt;fileNamePattern&amp;gt;${log}/log.%d{yyyy-MM-dd}.%i.log&amp;lt;/fileNamePattern&amp;gt;
                        &amp;lt;!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB --&amp;gt;
                        &amp;lt;maxFileSize&amp;gt;100MB&amp;lt;/maxFileSize&amp;gt;    
                        &amp;lt;maxHistory&amp;gt;60&amp;lt;/maxHistory&amp;gt;
                        &amp;lt;totalSizeCap&amp;gt;20GB&amp;lt;/totalSizeCap&amp;gt;
                &amp;lt;/rollingPolicy&amp;gt;
                &amp;lt;encoder&amp;gt;
                        &amp;lt;pattern&amp;gt;%-4relative [%thread] %-5level %logger{35} - %msg%n&amp;lt;/pattern&amp;gt;
                &amp;lt;/encoder&amp;gt;
        &amp;lt;/appender&amp;gt;

        &amp;lt;!-- 按窗口滚动 --&amp;gt;
        &amp;lt;appender name=&amp;quot;FILE&amp;quot; class=&amp;quot;ch.qos.logback.core.rolling.RollingFileAppender&amp;quot;&amp;gt;
                &amp;lt;file&amp;gt;${log}/test_log.log&amp;lt;/file&amp;gt;

                &amp;lt;rollingPolicy class=&amp;quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&amp;quot;&amp;gt;
                        &amp;lt;fileNamePattern&amp;gt;${log}/log.%i.log.zip&amp;lt;/fileNamePattern&amp;gt;
                        &amp;lt;minIndex&amp;gt;1&amp;lt;/minIndex&amp;gt;
                        &amp;lt;maxIndex&amp;gt;3&amp;lt;/maxIndex&amp;gt;
                &amp;lt;/rollingPolicy&amp;gt;

                &amp;lt;triggeringPolicy class=&amp;quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&amp;quot;&amp;gt;
                        &amp;lt;maxFileSize&amp;gt;5MB&amp;lt;/maxFileSize&amp;gt;
                &amp;lt;/triggeringPolicy&amp;gt;

                &amp;lt;encoder&amp;gt;
                        &amp;lt;pattern&amp;gt;%-4relative [%thread] %-5level %logger{35} - %msg%n&amp;lt;/pattern&amp;gt;
                &amp;lt;/encoder&amp;gt;
        &amp;lt;/appender&amp;gt;


        &amp;lt;!-- logger --&amp;gt;
        &amp;lt;logger name=&amp;quot;log.test&amp;quot; level=&amp;quot;INFO&amp;quot; additivity=&amp;quot;false&amp;quot;&amp;gt;
                &amp;lt;appender-ref ref=&amp;quot;STDOUT&amp;quot;/&amp;gt;
                &amp;lt;appender-ref ref=&amp;quot;ROLLINGFILE&amp;quot;/&amp;gt;
                &amp;lt;appender-ref ref=&amp;quot;HTMLFILE&amp;quot;/&amp;gt;
        &amp;lt;/logger&amp;gt;

        &amp;lt;logger name=&amp;quot;log.test.Tesg&amp;quot; level=&amp;quot;debug&amp;quot; additivity=&amp;quot;false&amp;quot;&amp;gt;
                &amp;lt;appender-ref ref=&amp;quot;STDOUT&amp;quot;/&amp;gt;
                &amp;lt;appender-ref ref=&amp;quot;ROLLINGFILE&amp;quot;/&amp;gt;
                &amp;lt;appender-ref ref=&amp;quot;HTMLFILE&amp;quot;/&amp;gt;
        &amp;lt;/logger&amp;gt;

        &amp;lt;root level=&amp;quot;debug&amp;quot;&amp;gt;
                &amp;lt;appender-ref ref=&amp;quot;STDOUT&amp;quot;/&amp;gt;
        &amp;lt;/root&amp;gt;

&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;备注&#34;&gt;备注&lt;/h2&gt;

&lt;h3 id=&#34;时间滚动&#34;&gt;时间滚动&lt;/h3&gt;

&lt;p&gt;TimeBasedRollingPolicy 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责触发滚动&lt;/p&gt;

&lt;h3 id=&#34;日期相关&#34;&gt;日期相关&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符号&lt;/th&gt;
&lt;th&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;年代标志符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;年&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;月&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;日&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;h&lt;/td&gt;
&lt;td&gt;时 在上午或下午 (1~12)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;H&lt;/td&gt;
&lt;td&gt;时 在一天中 (0~23)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;m&lt;/td&gt;
&lt;td&gt;分&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;td&gt;秒&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;毫秒&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;E&lt;/td&gt;
&lt;td&gt;星期&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;一年中的第几天&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;一月中第几个星期几&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;w&lt;/td&gt;
&lt;td&gt;一年中第几个星期&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;td&gt;一月中第几个星期&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;上午 / 下午 标记符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;k&lt;/td&gt;
&lt;td&gt;时 在一天中 (1~24)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;K&lt;/td&gt;
&lt;td&gt;时 在上午或下午 (0~11)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;z&lt;/td&gt;
&lt;td&gt;时区&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;0-9-19版本之后-推荐使用encode&#34;&gt;0.9.19版本之后，推荐使用encode&lt;/h3&gt;

&lt;p&gt;原因： &lt;a href=&#34;https://logback.qos.ch/codes.html#layoutInsteadOfEncoder&#34;&gt;https://logback.qos.ch/codes.html#layoutInsteadOfEncoder&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;size-and-time-based-rolling-policy&#34;&gt;Size and time based rolling policy&lt;/h3&gt;

&lt;p&gt;原地址：&lt;a href=&#34;https://logback.qos.ch/manual/appenders.html#SizeAndTimeBasedFNATP&#34;&gt;https://logback.qos.ch/manual/appenders.html#SizeAndTimeBasedFNATP&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;configuration&amp;gt;
  &amp;lt;appender name=&amp;quot;ROLLING&amp;quot; class=&amp;quot;ch.qos.logback.core.rolling.RollingFileAppender&amp;quot;&amp;gt;
    &amp;lt;file&amp;gt;mylog.txt&amp;lt;/file&amp;gt;
    &amp;lt;rollingPolicy class=&amp;quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&amp;quot;&amp;gt;
      &amp;lt;!-- rollover daily --&amp;gt;
      &amp;lt;fileNamePattern&amp;gt;mylog-%d{yyyy-MM-dd}.%i.txt&amp;lt;/fileNamePattern&amp;gt;
       &amp;lt;!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB --&amp;gt;
       &amp;lt;maxFileSize&amp;gt;100MB&amp;lt;/maxFileSize&amp;gt;    
       &amp;lt;maxHistory&amp;gt;60&amp;lt;/maxHistory&amp;gt;
       &amp;lt;totalSizeCap&amp;gt;20GB&amp;lt;/totalSizeCap&amp;gt;
    &amp;lt;/rollingPolicy&amp;gt;
    &amp;lt;encoder&amp;gt;
      &amp;lt;pattern&amp;gt;%msg%n&amp;lt;/pattern&amp;gt;
    &amp;lt;/encoder&amp;gt;
  &amp;lt;/appender&amp;gt;
  &amp;lt;root level=&amp;quot;DEBUG&amp;quot;&amp;gt;
    &amp;lt;appender-ref ref=&amp;quot;ROLLING&amp;quot; /&amp;gt;
  &amp;lt;/root&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/jingmoxukong/p/5910309.html&#34;&gt;细说Java主流日志工具库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://my.oschina.net/wangxindong/blog/825066&#34;&gt;门面之下，日志之上-SLF4J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ifeve.com/?x=0&amp;amp;y=0&amp;amp;s=slf4j&#34;&gt;并发编程网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/huozhonbin/article/category/1656017&#34;&gt;LogBack学习记录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://czj4451.iteye.com/blog/1974831&#34;&gt;logback系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://aub.iteye.com/category/161103&#34;&gt;aubdiy - log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Java 开发环境恢复手册</title>
      <link>http://hugo.xizero.com/system/Java%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%81%A2%E5%A4%8D%E6%89%8B%E5%86%8C/</link>
      <pubDate>Fri, 20 Jan 2017 12:00:00 +0800</pubDate>
      
      <guid>http://hugo.xizero.com/system/Java%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%81%A2%E5%A4%8D%E6%89%8B%E5%86%8C/</guid>
      <description>

&lt;h2 id=&#34;notepad&#34;&gt;Notepad++&lt;/h2&gt;

&lt;p&gt;官网：&lt;a href=&#34;https://notepad-plus-plus.org/&#34;&gt;https://notepad-plus-plus.org/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;git-for-windows&#34;&gt;Git for Windows&lt;/h2&gt;

&lt;p&gt;官网：&lt;a href=&#34;https://git-scm.com/&#34;&gt;https://git-scm.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;

&lt;p&gt;添加快捷方式到桌面&lt;/p&gt;

&lt;p&gt;添加 git bash 到右键菜单&lt;/p&gt;

&lt;h3 id=&#34;更换主题&#34;&gt;更换主题&lt;/h3&gt;

&lt;p&gt;网址：&lt;a href=&#34;http://ciembor.github.io/4bit/&#34;&gt;http://ciembor.github.io/4bit/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;编辑用户目录下的 .minttyrc 文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;BoldAsFont=-1
Columns=99
Rows=33
Font=Lucida Console
FontHeight=12
BackgroundColour=13,25,38
ForegroundColour=217,230,242
CursorColour=217,230,242
Black=0,0,0
BoldBlack=38,38,38
Red=184,122,122
BoldRed=219,189,189
Green=122,184,122
BoldGreen=189,219,189
Yellow=184,184,122
BoldYellow=219,219,189
Blue=122,122,184
BoldBlue=189,189,219
Magenta=184,122,184
BoldMagenta=219,189,219
Cyan=122,184,184
BoldCyan=189,219,219
White=217,217,217
BoldWhite=255,255,255
Locale=C
Charset=GBK
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;配置文件&#34;&gt;配置文件&lt;/h3&gt;

&lt;p&gt;配置用户名和邮箱&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git config --global user.name &amp;quot;[name]&amp;quot;
git config --global user.email &amp;quot;[email]&amp;quot;
git config --global color.ui true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打印全局配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git config --list
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ssh-key&#34;&gt;SSH key&lt;/h3&gt;

&lt;p&gt;检查用户目录下是否存在隐藏文件夹 .ssh&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/.ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成SSH Key，在 &lt;code&gt;.ssh/id_rsa.pub&lt;/code&gt; 中&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh-keygen -t rsa -C &amp;quot;your_email&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 Github 中添加，并测试&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh -T git@github.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;source-tree&#34;&gt;Source Tree&lt;/h2&gt;

&lt;p&gt;官网：&lt;a href=&#34;https://www.sourcetreeapp.com/&#34;&gt;https://www.sourcetreeapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;安装配置&#34;&gt;安装配置&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;跳过默认设置&lt;/li&gt;
&lt;li&gt;使用系统Git&lt;/li&gt;
&lt;li&gt;添加 SSH key&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;hugo&#34;&gt;Hugo&lt;/h2&gt;

&lt;p&gt;官网：&lt;a href=&#34;https://gohugo.io/&#34;&gt;https://gohugo.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载地址：&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;https://github.com/spf13/hugo/releases&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;安装-1&#34;&gt;安装&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;解压，重命名为 hugo.exe ，放在 &lt;code&gt;D:/Software/hugo/bin/&lt;/code&gt; 下&lt;/li&gt;
&lt;li&gt;配置环境变量 Path&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;visual-studio-code&#34;&gt;Visual Studio Code&lt;/h2&gt;

&lt;p&gt;官网：&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;jdk&#34;&gt;JDK&lt;/h2&gt;

&lt;p&gt;官网：&lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/index.html&#34;&gt;http://www.oracle.com/technetwork/java/javase/downloads/index.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;配置环境变量&#34;&gt;配置环境变量&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;JAVA_HOME&lt;/li&gt;
&lt;li&gt;Path

&lt;ul&gt;
&lt;li&gt;%JAVA_HOME%\bin;&lt;/li&gt;
&lt;li&gt;%JAVA_HOME%\jre\bin;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tomcat&#34;&gt;Tomcat&lt;/h2&gt;

&lt;p&gt;官网：&lt;a href=&#34;http://tomcat.apache.org/&#34;&gt;http://tomcat.apache.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;解压到 &lt;code&gt;C:\Program Files\Apache Software Foundation&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;maven&#34;&gt;Maven&lt;/h2&gt;

&lt;p&gt;官网：&lt;a href=&#34;https://maven.apache.org/&#34;&gt;https://maven.apache.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Maven Repository：&lt;a href=&#34;https://mvnrepository.com/&#34;&gt;Maven Repository&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;安装配置-1&#34;&gt;安装配置&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;解压到 &lt;code&gt;C:\Program Files\Apache Software Foundation&lt;/code&gt; 下，重命名为 Maven&lt;/li&gt;
&lt;li&gt;配置环境变量

&lt;ul&gt;
&lt;li&gt;MAVEN_HOME&lt;/li&gt;
&lt;li&gt;Path

&lt;ul&gt;
&lt;li&gt;%MAVEN_HOME%\bin&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;修改配置文件 &lt;code&gt;conf/setting.xml&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;设置本地仓库&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;localRepository&amp;gt;d:/m2/repository&amp;lt;/localRepository&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;设置远程仓库镜像&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;mirror&amp;gt;
    &amp;lt;id&amp;gt;nexus-aliyun&amp;lt;/id&amp;gt;
    &amp;lt;mirrorOf&amp;gt;*&amp;lt;/mirrorOf&amp;gt;ben
    &amp;lt;name&amp;gt;Nexus aliyun&amp;lt;/name&amp;gt;
    &amp;lt;url&amp;gt;http://maven.aliyun.com/nexus/content/groups/public&amp;lt;/url&amp;gt;
&amp;lt;/mirror&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;intelij-idea&#34;&gt;InteLiJ IDEA&lt;/h2&gt;

&lt;p&gt;官网：&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;https://www.jetbrains.com/idea/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;配置&#34;&gt;配置&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;登陆激活&lt;/li&gt;
&lt;li&gt;去掉不需要的插件&lt;/li&gt;
&lt;li&gt;设置默认设置

&lt;ul&gt;
&lt;li&gt;设置默认Maven&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;idea新建maven项目卡住显示-generating-project-in-batch-mode&#34;&gt;IDEA新建MAVEN项目卡住显示 : &amp;ldquo;Generating Project in Batch mode&amp;rdquo;&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;下载 &lt;code&gt;archetype-catalog.xml&lt;/code&gt;  - -  &lt;a href=&#34;http://repo.maven.apache.org/maven2/&#34;&gt;http://repo.maven.apache.org/maven2/&lt;/a&gt;，找到 &lt;code&gt;archetype-catalog.xml&lt;/code&gt; ,右键保存&lt;/li&gt;
&lt;li&gt;放到 &amp;ldquo;.m2\repository\org\apache\maven\archetype\archetype-catalog\2.4&amp;rdquo; 下&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;Settings&lt;/code&gt;&amp;gt; &lt;code&gt;Maven&lt;/code&gt; &amp;gt; &lt;code&gt;Runner&lt;/code&gt; &amp;gt; &lt;code&gt;VM Options&lt;/code&gt; 中添加 &lt;code&gt;-DarchetypeCatalog=internal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PS：注意右上角的灰字：for default project，而不是for current project&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>win10 系统恢复手册</title>
      <link>http://hugo.xizero.com/system/win10%20%E7%B3%BB%E7%BB%9F%E6%81%A2%E5%A4%8D%E6%89%8B%E5%86%8C/</link>
      <pubDate>Thu, 19 Jan 2017 12:00:00 +0800</pubDate>
      
      <guid>http://hugo.xizero.com/system/win10%20%E7%B3%BB%E7%BB%9F%E6%81%A2%E5%A4%8D%E6%89%8B%E5%86%8C/</guid>
      <description>

&lt;h2 id=&#34;系统安装&#34;&gt;系统安装&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;断网安装，创建本地英文账户&lt;/li&gt;
&lt;li&gt;禁止预装应用自动安装

&lt;ul&gt;
&lt;li&gt;打开注册表 regedit&lt;/li&gt;
&lt;li&gt;进入路径 &lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;右键点击新建项“CloudContent&lt;/li&gt;
&lt;li&gt;双击新建的CloudContent，在右栏右键新建DWORD (32位) 值或新建DWORD (64位)值，并命名为DisableWindowsConsumerFeatures&lt;/li&gt;
&lt;li&gt;双击DisableWindowsConsumerFeatures，在数值数据输入1，确定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;设置资源管理器默认打开我的电脑，右键隐藏 OneDirve&lt;/li&gt;
&lt;li&gt;运行组策略 &lt;code&gt;gpedit.msc&lt;/code&gt; ，打开 &lt;code&gt;计算机配置 --&amp;gt; 管理模块 --&amp;gt; windows 组件&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;OneDrive，启用 &lt;code&gt;禁止使用 OneDrive 进行文件存储&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;搜索，禁用小娜&lt;/li&gt;
&lt;li&gt;可以跳过此步骤，使用 &lt;code&gt;Dism++&lt;/code&gt;
&amp;gt; &lt;a href=&#34;https://support.office.com/zh-cn/article/%E5%85%B3%E9%97%AD%E6%88%96%E5%8D%B8%E8%BD%BD-OneDrive-f32a17ce-3336-40fe-9c38-6efb09f944b0?ui=zh-CN&amp;amp;rs=zh-CN&amp;amp;ad=CN&#34;&gt;关闭或卸载 OneDrive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;创建文档结构&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;连接网络-配置系统&#34;&gt;连接网络，配置系统&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Flower Password  - - &lt;a href=&#34;https://flowerpassword.com/&#34;&gt;https://flowerpassword.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;YoMail - - &lt;a href=&#34;http://www.yomail.com/&#34;&gt;http://www.yomail.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;登陆微软账号，激活系统&lt;/li&gt;
&lt;li&gt;Dism++ - - &lt;a href=&#34;https://www.chuyu.me/&#34;&gt;https://www.chuyu.me/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;更新系统&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;必备软件&#34;&gt;必备软件&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;7-zip  - - &lt;a href=&#34;http://www.7-zip.org/&#34;&gt;http://www.7-zip.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;坚果云  - - &lt;a href=&#34;https://www.jianguoyun.com&#34;&gt;https://www.jianguoyun.com&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;网速监控 NetSpeedMonitor&lt;/li&gt;
&lt;li&gt;开始菜单优化 StartIsBack&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Enpass - - &lt;a href=&#34;https://www.enpass.io/&#34;&gt;https://www.enpass.io/&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;设置主密码，导入备份数据&lt;/li&gt;
&lt;li&gt;设置同步文件夹

&lt;ul&gt;
&lt;li&gt;D:\JianGuoYun&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;shadowsocks-windows - - &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-windows/releases&#34;&gt;https://github.com/shadowsocks/shadowsocks-windows/releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Google Chrome  - - &lt;a href=&#34;https://www.google.cn/intl/zh-CN/chrome/browser/desktop/index.html&#34;&gt;https://www.google.cn/intl/zh-CN/chrome/browser/desktop/index.html&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;登陆账号，同步插件及相关配置&lt;/li&gt;
&lt;li&gt;插件：Enpass、Flower Password、Humble New Tab Page、uBlock Origin、Octotree、Enhanced Steam、哔哩哔哩助手&lt;/li&gt;
&lt;li&gt;应用：Google Keep、Web Server for Chrome&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;效率工具&#34;&gt;效率工具&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;滴答清单 - - &lt;a href=&#34;https://www.dida365.com&#34;&gt;https://www.dida365.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MarkEditor - -  &lt;a href=&#34;http://zrey.com/app/markeditor&#34;&gt;http://zrey.com/app/markeditor&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;停止版本控制&lt;/li&gt;
&lt;li&gt;添加工作目录

&lt;ul&gt;
&lt;li&gt;D:\JianGuoYun\XIZERO&lt;/li&gt;
&lt;li&gt;D:\JianGuoYun\Tree hole&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Listary - -  &lt;a href=&#34;http://www.listary.com/&#34;&gt;http://www.listary.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;娱乐软件&#34;&gt;娱乐软件&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;网易云音乐 - -  &lt;a href=&#34;http://music.163.com/&#34;&gt;http://music.163.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Steam  - -  &lt;a href=&#34;http://store.steampowered.com/&#34;&gt;http://store.steampowered.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ASF - - &lt;a href=&#34;https://github.com/JustArchi/ArchiSteamFarm&#34;&gt;https://github.com/JustArchi/ArchiSteamFarm&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;wiki - - &lt;a href=&#34;http://steamcn.com/t187703-1-1&#34;&gt;http://steamcn.com/t187703-1-1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;扩展软件&#34;&gt;扩展软件&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;迅雷极速版&lt;/li&gt;
&lt;li&gt;SumatraPDF - - &lt;a href=&#34;https://www.sumatrapdfreader.org/free-pdf-reader-cn.html&#34;&gt;https://www.sumatrapdfreader.org/free-pdf-reader-cn.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Snipaste - - &lt;a href=&#34;https://zh.snipaste.com/&#34;&gt;https://zh.snipaste.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;备注-文件结构&#34;&gt;备注 - - 文件结构&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;C - System&lt;/li&gt;
&lt;li&gt;D - Data

&lt;ul&gt;
&lt;li&gt;Project - Git 项目&lt;/li&gt;
&lt;li&gt;iProject - IDEA 项目&lt;/li&gt;
&lt;li&gt;m2 - Maven 本地仓库&lt;/li&gt;
&lt;li&gt;Software - 绿色软件&lt;/li&gt;
&lt;li&gt;CloudMusic - 网易云音乐本地&lt;/li&gt;
&lt;li&gt;Thunder - 迅雷下载&lt;/li&gt;
&lt;li&gt;JianGuoYun - 我的坚果云&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;E - Game&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>win10 系统重装手册</title>
      <link>http://hugo.xizero.com/system/win10%20%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E6%89%8B%E5%86%8C/</link>
      <pubDate>Wed, 18 Jan 2017 12:00:00 +0800</pubDate>
      
      <guid>http://hugo.xizero.com/system/win10%20%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E6%89%8B%E5%86%8C/</guid>
      <description>

&lt;h2 id=&#34;删除-onedriver-上的电脑&#34;&gt;删除 OneDriver 上的电脑&lt;/h2&gt;

&lt;p&gt;地址：&lt;a href=&#34;https://onedrive.live.com&#34;&gt;https://onedrive.live.com&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;清除同步隐私&#34;&gt;清除同步隐私&lt;/h2&gt;

&lt;p&gt;地址：&lt;a href=&#34;https://account.microsoft.com/privacy#/&#34;&gt;https://account.microsoft.com/privacy#/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;删除应用商店设备&#34;&gt;删除应用商店设备&lt;/h2&gt;

&lt;p&gt;地址：&lt;a href=&#34;https://account.microsoft.com/devices/store&#34;&gt;https://account.microsoft.com/devices/store&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;删除-github-上的-ssh-密钥&#34;&gt;删除 Github 上的 SSH 密钥&lt;/h2&gt;

&lt;p&gt;地址：&lt;a href=&#34;https://github.com/settings/keys&#34;&gt;https://github.com/settings/keys&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;删除-chrome-浏览器同步&#34;&gt;删除 Chrome 浏览器同步&lt;/h2&gt;

&lt;p&gt;地址：&lt;a href=&#34;https://www.google.com/settings/chrome/sync&#34;&gt;https://www.google.com/settings/chrome/sync&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java 多态</title>
      <link>http://hugo.xizero.com/java/Java-%E5%A4%9A%E6%80%81/</link>
      <pubDate>Sun, 08 Jan 2017 04:11:00 +0800</pubDate>
      
      <guid>http://hugo.xizero.com/java/Java-%E5%A4%9A%E6%80%81/</guid>
      <description>

&lt;h1 id=&#34;多态&#34;&gt;多态&lt;/h1&gt;

&lt;p&gt;多态是同一个行为具有多个不同表现形式或形态的能力。&lt;/p&gt;

&lt;p&gt;方法的重写、重载与动态连接构成多态性&lt;/p&gt;

&lt;h2 id=&#34;条件&#34;&gt;条件&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;继承/实现&lt;/li&gt;
&lt;li&gt;方法的重写和重载&lt;/li&gt;
&lt;li&gt;父类引用指向子类实现&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;父类引用只能调用父类中定义的变量和方法，以及子类中重写的方法&lt;/p&gt;

&lt;p&gt;动态链接指：父类引用会调用子类实现重写或实现的方法&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java web 序言</title>
      <link>http://hugo.xizero.com/javaee/Java%20web%20%E5%BA%8F%E8%A8%80/</link>
      <pubDate>Fri, 06 Jan 2017 20:56:00 +0800</pubDate>
      
      <guid>http://hugo.xizero.com/javaee/Java%20web%20%E5%BA%8F%E8%A8%80/</guid>
      <description>

&lt;h1 id=&#34;java-web-序言&#34;&gt;Java web 序言&lt;/h1&gt;

&lt;p&gt;不管怎样，学习越来越迷茫，每一步走地犹犹豫豫，忘记地越来越多，所以写一份总结。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Github Pages 配置 https</title>
      <link>http://hugo.xizero.com/note/Github%20Pages%20%E9%85%8D%E7%BD%AE%20https/</link>
      <pubDate>Fri, 06 Jan 2017 19:15:00 +0800</pubDate>
      
      <guid>http://hugo.xizero.com/note/Github%20Pages%20%E9%85%8D%E7%BD%AE%20https/</guid>
      <description>

&lt;h1 id=&#34;github-pages-配置-https&#34;&gt;Github Pages 配置 https&lt;/h1&gt;

&lt;p&gt;Github Pages 不支持自定义域名https，虽然使用第三方的解析代理可以实现，但是却不稳定也并不知道什么时候失效，凡事要靠自己来。&lt;/p&gt;

&lt;p&gt;搜索查找，知道使用 &lt;strong&gt;Nginx 反向代理&lt;/strong&gt; 可以实现。&lt;/p&gt;

&lt;p&gt;下面是一些简单的笔记，需要一个ubuntu环境的云服务器，其他环境自行查找。&lt;/p&gt;

&lt;h2 id=&#34;安装-nginx&#34;&gt;安装 Nginx&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;apt-get install nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;域名解析&#34;&gt;域名解析&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;删除 Github Pages 上的 CNAME ，不使用自定义域名。&lt;/li&gt;
&lt;li&gt;在域名解析商那，将自定义域名用A解析到云服务器&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;申请证书&#34;&gt;申请证书&lt;/h2&gt;

&lt;p&gt;可以搜索 Let’s Encrypt&lt;/p&gt;

&lt;h2 id=&#34;nginx-配置&#34;&gt;Nginx 配置&lt;/h2&gt;

&lt;p&gt;如果默认安装，&lt;code&gt;/etc/nginx/conf.d&lt;/code&gt; 目录是自定义配置文件的存放的地方，新建一个 &lt;code&gt;.conf&lt;/code&gt; 文件，文件名随意。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;xxx.com 表示你的自定义域名&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;添加一个虚拟主机，监听 80 ，让 http 跳转到 https&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
        listen 80 ;
        server_name xxx.com;
        rewrite ^(.*)$  https://xxx.com$1 permanent;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加一个虚拟主机，监听 443 ，&lt;code&gt;location /&lt;/code&gt; 设置反向代理 Github pages，&lt;code&gt;ssl_certificate&lt;/code&gt;等设置证书，最后的 &lt;code&gt;location&lt;/code&gt; 设置缓存时间。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;添加证书的时候，注意路径，使用 &lt;code&gt;nginx -t xxx.conf&lt;/code&gt; 查看配置文件是否错误，多看看日志&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;server {
        listen 443 ssl;
        server_name xxx.com;
        ssl on;
        ssl_certificate conf.d/xxx.com_bundle.crt;
        ssl_certificate_key conf.d/xxx.com.key;
        location / {
                proxy_pass https://xxx.github.io/;
                proxy_redirect     off;
                proxy_set_header   X-Real-IP  $remote_addr;
                proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
        }
        location ~ /purge(/.*){
            expires 10m;
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;运行-nginx&#34;&gt;运行 nginx&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;service nginx start
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://imciel.com/2016/05/09/github-pages-reverse-proxy-https/&#34;&gt;反向代理 GitHub Pages 并配置博客 HTTPS 访问&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://taozj.org/201603/blog-site-under-https.html#&#34;&gt;我的博客用上HTTPS啦&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://echo.pm/lnmp-nginx-ssl-https&#34;&gt;在 Nginx（LNMP）上配置 NameCheap SSL 证书并开启强制 HTTPS 的方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/q/1010000006614489&#34;&gt;nginx ssl强制跳转&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Apache Tomcat</title>
      <link>http://hugo.xizero.com/javaee/Apache%20Tomcat/</link>
      <pubDate>Tue, 03 Jan 2017 12:00:00 +0800</pubDate>
      
      <guid>http://hugo.xizero.com/javaee/Apache%20Tomcat/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Http 协议</title>
      <link>http://hugo.xizero.com/javaee/Http%20%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Mon, 02 Jan 2017 12:00:00 +0800</pubDate>
      
      <guid>http://hugo.xizero.com/javaee/Http%20%E5%8D%8F%E8%AE%AE/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Java Servlet</title>
      <link>http://hugo.xizero.com/javaee/Java%20Servlet/</link>
      <pubDate>Sun, 01 Jan 2017 12:00:00 +0800</pubDate>
      
      <guid>http://hugo.xizero.com/javaee/Java%20Servlet/</guid>
      <description>

&lt;h1 id=&#34;java-servlet&#34;&gt;Java Servlet&lt;/h1&gt;

&lt;h2 id=&#34;什么是-java-servlet&#34;&gt;什么是 Java Servlet ?&lt;/h2&gt;

&lt;p&gt;维基百科：&lt;a href=&#34;https://zh.wikipedia.org/wiki/Java_Servlet&#34;&gt;https://zh.wikipedia.org/wiki/Java_Servlet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.oracle.com/javaee/7/tutorial/servlets.htm#BNAFD&#34;&gt;Java Platform, Enterprise Edition: The Java EE Tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A servlet is a Java programming language class used to extend the capabilities of servers that host applications accessed by means of a request-response programming model.&lt;/p&gt;

&lt;p&gt;Java Servlet 是 Java 应用程序 ，运行在服务器端，由容器进行管理，生成动态内容。&lt;/p&gt;

&lt;p&gt;虽然 servlet 可以响应任何类型的请求，但通常用于web容器，Java Servlet 定义了对 Http 的特定 servlet 类。&lt;/p&gt;

&lt;p&gt;javax.servlet和javax.servlet.http包提供了用于编写servlet的接口和类。 所有servlet必须实现Servlet接口，它&lt;strong&gt;定义了生命周期方法&lt;/strong&gt;。 当实现通用服务时，可以使用或扩展Java Servlet API提供的GenericServlet类。 HttpServlet类提供了用于处理特定于HTTP的服务的方法，例如doGet和doPost。&lt;/p&gt;

&lt;h2 id=&#34;servlet-的生命周期&#34;&gt;Servlet 的生命周期&lt;/h2&gt;

&lt;p&gt;Servlet 的生命周期由 servlet 容器控制。&lt;/p&gt;

&lt;p&gt;当一个请求映射到servlet，容器执行&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果servlet的实例不存在，则web容器：

&lt;ul&gt;
&lt;li&gt;加载servlet类&lt;/li&gt;
&lt;li&gt;创建servlet类的实例&lt;/li&gt;
&lt;li&gt;通过调用初始化servlet实例&lt;strong&gt;init方法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;容器调用&lt;strong&gt;service方法&lt;/strong&gt;，判断请求方式，传递请求和响应对象&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果需要删除该servlet，容器通过调用servlet的&lt;strong&gt;destroy方法&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;servlet-核心类&#34;&gt;Servlet 核心类&lt;/h2&gt;

&lt;p&gt;Java EE API : &lt;a href=&#34;https://docs.oracle.com/javaee/7/api/&#34;&gt;https://docs.oracle.com/javaee/7/api/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;创建&#34;&gt;创建&lt;/h2&gt;

&lt;p&gt;使用注解 @WebServlet( &amp;ldquo;url &amp;rdquo; ) , url 是 servlet 的路径映射 ，必须是唯一的 ，使用该注解必须继承 HttpServlet&lt;/p&gt;

&lt;p&gt;也可以在 web.xml 中配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;

@WebServlet（“/ test”）
public class ModlServlet extends HttpServlet {
    ... ...
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Java 泛型</title>
      <link>http://hugo.xizero.com/java/java-%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Tue, 13 Dec 2016 12:00:00 +0800</pubDate>
      
      <guid>http://hugo.xizero.com/java/java-%E6%B3%9B%E5%9E%8B/</guid>
      <description>

&lt;h1 id=&#34;泛型&#34;&gt;泛型&lt;/h1&gt;

&lt;h2 id=&#34;泛型是什么&#34;&gt;泛型是什么?&lt;/h2&gt;

&lt;p&gt;泛型是一种编译器机制，在编写代码时&lt;strong&gt;参数化类型&lt;/strong&gt;，在实例化化时&lt;strong&gt;指定&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&#34;泛型编程&#34;&gt;泛型编程&lt;/h2&gt;

&lt;h3 id=&#34;泛型类-容器类&#34;&gt;泛型类/容器类&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;泛型类中依然可以使用基本类型和引用类型，不一定都要参数化类型&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;定义一个泛型类&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在类名后使用 &amp;lt;&amp;gt; 定义一个参数化类型。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class App&amp;lt;T&amp;gt; {
    private T x;

    public T getX() {
        return x;
    }

    public void setX(T x) {
        this.x = x;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实例化泛型类&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Main{
    public static void main(String[] args) {
        
        //指定类型为 String
        App&amp;lt;String&amp;gt; app = new App&amp;lt;&amp;gt;();
        app.setX(&amp;quot;Hello World!&amp;quot;);
        System.out.println(app.getX()); //Hello World!

        //指定类型为 Integer
        App&amp;lt;Integer&amp;gt; app1 = new App&amp;lt;&amp;gt;();
        app1.setX(100);
        System.out.println(app1.getX()); // 100
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;实例化时指定的参数类型必须是类，不能是&lt;strong&gt;基本类型&lt;/strong&gt;，原因看 泛型的实现原理 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;定义一个有多个参数类型的泛型类&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在 &amp;lt;&amp;gt; 中可以定义多个参数化类型，之间用 , 隔开&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class App1&amp;lt;T,U,B&amp;gt;{

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实例化&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;App1&amp;lt;String,Integer,String&amp;gt; app1 = new App1&amp;lt;&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;定义一个泛型抽象类&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public abstract class App2&amp;lt;T&amp;gt; {
    private T y;

    public T getY() {
        return y;
    }

    public void setY(T y) {
        this.y = y;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;继承抽象泛型类&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class App3 extends App2&amp;lt;String&amp;gt; {
    public static void main(String[] args) {
        App3 app3 = new App3();
        app3.setY(&amp;quot;泛型抽象类&amp;quot;);
        System.out.println(app3.getY());
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;参数化类型的名称可以自定义，常用的有KTVE，具体含义看 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;泛型接口&#34;&gt;泛型接口&lt;/h3&gt;

&lt;p&gt;定义一个泛型接口&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;接口中参数化类型的定义和类的一样&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface IApp&amp;lt;T&amp;gt;{
    public T get();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接口继承泛型接口&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface IApp1 extends IApp&amp;lt;String&amp;gt; {
    public String getAll();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;泛型接口实现&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public  class AppImpl implements IApp&amp;lt;String&amp;gt; {
    @Override
    public String get() {
        return null;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;泛型方法&#34;&gt;泛型方法&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;泛型方法不只可以泛型类、泛型接口中定义，&lt;strong&gt;普通类&lt;/strong&gt;中也可以&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;定义一个泛型方法&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在普通方法中定义参数化类型，在访问修饰符之后，返回类型之前，使用 &amp;lt;&amp;gt; 定义。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//使用参数化类型定义参数的类型
public &amp;lt;T&amp;gt; void hello(T t){
    System.out.println(&amp;quot;Hello&amp;quot;+t);
}

//使用参数化类型定义返回类型
public &amp;lt;T&amp;gt; T hello2(){
    return null;
}

//一起使用
public &amp;lt;T&amp;gt; T hello3(T t){
    return t;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;定义一个静态的泛型方法&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在静态泛型中定义参数化类型，在static 之后，返回类型之前&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static &amp;lt;T&amp;gt; T world(T t){
    return t;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个可变参数的例子&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static &amp;lt;T&amp;gt; void out(T... args) {
    for (T t : args) {
        System.out.println(t);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用泛型方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//像普通的方法一样用
app.hello();
//指定参数化类型
app.&amp;lt;String&amp;gt;hello();
//静态方法也一样
App.world();
App.&amp;lt;String&amp;gt;world();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;泛型的继承&#34;&gt;泛型的继承&lt;/h2&gt;

&lt;h3 id=&#34;泛型类的继承&#34;&gt;泛型类的继承&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;类型参数是当前类定义的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//type parameter of App1
public class App1&amp;lt;T&amp;gt; extends App0&amp;lt;T&amp;gt;{

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;泛型类实现泛型接口&#34;&gt;泛型类实现泛型接口&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class App&amp;lt;T&amp;gt; extends IApp&amp;lt;T&amp;gt;{

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;泛型接口继承泛型接口&#34;&gt;泛型接口继承泛型接口&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class IApp1&amp;lt;T&amp;gt; extends IApp0&amp;lt;T&amp;gt;{

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;通配符和上下界&#34;&gt;通配符和上下界&lt;/h2&gt;

&lt;h3 id=&#34;通配符&#34;&gt;通配符 ?&lt;/h3&gt;

&lt;p&gt;通配符 ? 表示未知类型，不确定类型。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;只是用来在实例化时填充&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//定义一个通用的容器类引用
App&amp;lt;?&amp;gt; app;

//指向不同对象
app = new App&amp;lt;String&amp;gt;();

app = new App&amp;lt;Integer&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;上下界&#34;&gt;上下界&lt;/h3&gt;

&lt;p&gt;关键字: extends super&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&amp;lt; ? extends T&amp;gt; : 声明上界，表示参数化的类型是 T 或 T 的子类型&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;lt; ? super T&amp;gt;：声明下界，表示参数的类型是 T 或 T 的父类型，直至 Object&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;理解通配符和上下界的三个方面&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;引用指向的实现对象是否在上下界范围内&lt;/li&gt;
&lt;li&gt;添加元素时，注意类型是否确定，注意多态（父类引用指向子类实现对象）&lt;/li&gt;
&lt;li&gt;返回值的类型&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;深入理解 &amp;lt; ? extends T&amp;gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Main {
    static class A{};
    static class B extends A{};
    static class C extends B{};
    
    public static void main(String[] args) {
        List&amp;lt;? extends A&amp;gt; list = new ArrayList&amp;lt;B&amp;gt;();
        //编译器报错
        //list.add(new A());
        //list.add(new B());
        //list.add(new C());
        list.add(null);

        B b = list.get(0);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;list 指向的是 A 或者 A 的子类型的ArrayList 对象&lt;/p&gt;

&lt;p&gt;list 不能添加非空元素，原因是 &lt;strong&gt;编译器无法确定List所持有的类型&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;但可以取出时，值得类型是 A ，因为多态，父类引用指向子类实现。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;深入理解 &amp;lt; ? super T&amp;gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Main {
    static class A{};
    static class B extends A{};
    static class C extends B{};
    public static void main(String[] args) {
        List&amp;lt;? super B&amp;gt; list = new ArrayList&amp;lt;B&amp;gt;();
        //注释掉的编译错误
        //list.add(new A());
        list.add(new B());
        list.add(new Object());
        //list.add(null);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List&amp;lt; ? super B&amp;gt; list 可以指向是 B 或 B 的父类型的 ArrayList 对象&lt;/p&gt;

&lt;p&gt;但是可以添加的元素类型应该是 B 或 B 的子类型，可以添加原因也是多态&lt;/p&gt;

&lt;p&gt;从list中取值，返回的是 Object&lt;/p&gt;

&lt;h2 id=&#34;pecs原则&#34;&gt;PECS原则&lt;/h2&gt;

&lt;p&gt;如果要从集合中读取类型T的数据，并且&lt;strong&gt;不能写入&lt;/strong&gt;，可以使用 ? extends 通配符；(Producer Extends)&lt;/p&gt;

&lt;p&gt;如果要从集合中写入类型T的数据，并且&lt;strong&gt;不需要读取&lt;/strong&gt;，可以使用 ? super 通配符；(Consumer Super)&lt;/p&gt;

&lt;p&gt;如果既要存又要取，那么就不要使用任何通配符。&lt;/p&gt;

&lt;p&gt;出 处 ：&lt;a href=&#34;http://flyingcat2013.blog.51cto.com/7061638/1616068&#34;&gt;Java泛型中的PECS原则&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;和-t-的区别&#34;&gt;? 和 T 的区别&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;? 用在&lt;strong&gt;实例&lt;/strong&gt;泛型时，填充范围。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;T 用在&lt;strong&gt;定义&lt;/strong&gt;泛型时，参数化类型。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;与上下界一起使用时，区别还是一样。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;泛型的实现原理&#34;&gt;泛型的实现原理&lt;/h2&gt;

&lt;p&gt;泛型的实现在编译阶段，通过&lt;strong&gt;类型擦除&lt;/strong&gt;实现&lt;/p&gt;

&lt;h3 id=&#34;type-erasure-http-docs-oracle-com-javase-tutorial-java-generics-erasure-html&#34;&gt;&lt;a href=&#34;http://docs.oracle.com/javase/tutorial/java/generics/erasure.html&#34;&gt;Type Erasure&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Generics were introduced to the Java language to provide tighter type checks at compile time and to support generic programming.&lt;/p&gt;

&lt;p&gt;Java 引入泛型，可以在编译时提供更严格的类型检查，并且支持泛型编程。&lt;/p&gt;

&lt;p&gt;To implement generics, the Java compiler applies type erasure to:&lt;/p&gt;

&lt;p&gt;为了实现泛型，java 编译器使用类型擦除 ：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Replace all type parameters in generic types with their bounds or Object if the type parameters are unbounded. The produced bytecode, therefore, contains only ordinary classes, interfaces, and methods.&lt;/li&gt;
&lt;li&gt;Insert type casts if necessary to preserve type safety.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Generate bridge methods to preserve polymorphism in extended generic types.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将所有参数类型替换成其边界，如果没有边界替换成 Object 。因此，产生的字节码文件仅仅包含普通类、接口和方法。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;必要时添加类型转换以保存类型安全&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;生成桥方法以在扩展泛型时保持多态性&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Type erasure ensures that no new classes are created for parameterized types; consequently, generics incur no runtime overhead.&lt;/p&gt;

&lt;p&gt;类型擦除确保不因为参数化类型而创建新类； 因此，泛型不会产生运行时开销。&lt;/p&gt;

&lt;h3 id=&#34;几种擦除&#34;&gt;几种擦除&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;T&gt;  &amp;ndash;&amp;gt; Object&lt;/li&gt;
&lt;li&gt;&amp;lt;? extends T&amp;gt; &amp;ndash;&amp;gt; T&lt;/li&gt;
&lt;li&gt;&amp;lt;? super T&amp;gt; &amp;ndash;&amp;gt; Object&lt;/li&gt;
&lt;li&gt;添加桥接方法，保证多态性&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;与之前的深入理解有关&lt;/p&gt;

&lt;h3 id=&#34;类型擦除的相关&#34;&gt;类型擦除的相关&lt;/h3&gt;

&lt;p&gt;1.类型擦除，在编译之前进行类型检查&lt;/p&gt;

&lt;p&gt;2.泛型与重载&lt;/p&gt;

&lt;p&gt;因为类型擦除，所以下面的两个方法的参数类型相同，会报错，both methods hava same erasure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void a(List&amp;lt;Object&amp;gt; list){};
public void a(List&amp;lt;String&amp;gt; list){};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.泛型与多态&lt;/p&gt;

&lt;p&gt;会生成桥方法，以保证多态&lt;/p&gt;

&lt;p&gt;4.泛型与static&lt;/p&gt;

&lt;p&gt;类的参数化类型不能定义静态变量和方法。&lt;/p&gt;

&lt;p&gt;但是泛型方法可以定义成静态方法，它使用的自己的参数类型。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static &amp;lt;T&amp;gt; T get( STring s){};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;泛型类的所有静态变量是共享的。&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/sharewind/archive/2012/11/26/2788698.html&#34;&gt;Java泛型通配符extends与super&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hollischuang.com/archives/255&#34;&gt;Java泛型中extends和super的理解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hollischuang.com/archives/226&#34;&gt;Java的类型擦除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/lonelyroamer/article/details/7868820&#34;&gt;java泛型（二）、泛型的内部原理：类型擦除以及类型擦除带来的问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>