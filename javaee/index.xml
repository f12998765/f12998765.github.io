<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaEEs on XIZERO</title>
    <link>https://www.xizero.com/javaee/index.xml</link>
    <description>Recent content in JavaEEs on XIZERO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Feb 2017 20:35:59 +0800</lastBuildDate>
    <atom:link href="https://www.xizero.com/javaee/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CORS</title>
      <link>https://www.xizero.com/javaee/cors/</link>
      <pubDate>Mon, 27 Feb 2017 20:35:59 +0800</pubDate>
      
      <guid>https://www.xizero.com/javaee/cors/</guid>
      <description>

&lt;h1 id=&#34;cors&#34;&gt;CORS&lt;/h1&gt;

&lt;p&gt;跨域资源共享 ，Cross-Origin Resource Sharing ，简称 CORS。&lt;/p&gt;

&lt;p&gt;使用 XMLHttpRequest 对象和Fetch发起 HTTP 请求就必须遵守同源策略，CORS 是HTML5 的跨域解决方案。&lt;/p&gt;

&lt;p&gt;了解更多，参阅：&lt;a href=&#34;https://www.w3.org/TR/cors/&#34;&gt;https://www.w3.org/TR/cors/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;关于跨域请求&#34;&gt;关于跨域请求&lt;/h2&gt;

&lt;p&gt;理解上，跨域请求不是被服务器拒绝，而是&lt;strong&gt;返回结果被浏览器拦截&lt;/strong&gt;了，被拒绝的结果可以在浏览器的开发者工具中查看。&lt;/p&gt;

&lt;p&gt;其它，有些浏览器不允许从HTTPS的域跨域访问HTTP，比如Chrome和Firefox，会在请求发出前拦截。&lt;/p&gt;

&lt;p&gt;常用的跨域请求场景是：使用 XMLHttpRequest 或 Fetch发起跨站 HTTP 请求。&lt;/p&gt;

&lt;h2 id=&#34;cors-过程理解&#34;&gt;CORS 过程理解&lt;/h2&gt;

&lt;p&gt;首先明确，&lt;strong&gt;CORS 的关键是服务器&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;最简单的过程：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;浏览器发送 CORS 请求，在 header 中添加一个 &lt;code&gt;Origin&lt;/code&gt; 字段，其值为请求源（协议+地址+端口）&lt;/li&gt;
&lt;li&gt;服务器响应，并在 header 中添加 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 字段&lt;/li&gt;
&lt;li&gt;浏览器接收，判断 header 来确定是否拦截&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;cors-请求&#34;&gt;CORS 请求&lt;/h2&gt;

&lt;p&gt;浏览器将 CORS 请求分为两类，简单请求和预请求。&lt;/p&gt;

&lt;h3 id=&#34;简单请求&#34;&gt;简单请求&lt;/h3&gt;

&lt;p&gt;简单请求的定义：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;只使用 GET, HEAD 或者 POST 请求方法。&lt;/li&gt;
&lt;li&gt;使用 POST  请求时，数据类型(Content-Type)只能是 application/x-www-form-urlencoded, multipart/form-data 或 text/plain中的一种。&lt;/li&gt;
&lt;li&gt;不会使用自定义请求头&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;简单请求的响应就是最简单的过程，通过使用 Origin 和 Access-Control-Allow-Origin 就可以完成最简单的跨站请求。&lt;/p&gt;

&lt;h3 id=&#34;预请求&#34;&gt;预请求&lt;/h3&gt;

&lt;p&gt;预请求就是非简单请求。&lt;/p&gt;

&lt;p&gt;预请求的重点是必须发送一个 &lt;code&gt;OPTIONS&lt;/code&gt; 请求，来确定是否支持 CORS。浏览器确认之后，才会发送正式请求。原因是会对服务器的数据造成破坏。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;请求过程：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;发送一个 &lt;code&gt;OPEIONS&lt;/code&gt; 请求。一同发送的还包括三个请求头：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Origin - 源地址&lt;/li&gt;
&lt;li&gt;Access-Control-Request-Method - 跨域请求的 HTTP 方法列表&lt;/li&gt;
&lt;li&gt;Access-Control-Request-Headers - 跨域请求将发送的自定义头信息&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;服务器处理请求，返回响应。并且返回了相应的响应头：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Access-Control-Allow-Origin&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Methods&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Headers&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Credentials&lt;/li&gt;
&lt;li&gt;Access-Control-Max-Age&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之后的正常请求，与简单请求相同。&lt;/p&gt;

&lt;h2 id=&#34;http-请求头&#34;&gt;HTTP 请求头&lt;/h2&gt;

&lt;h3 id=&#34;origin&#34;&gt;Origin&lt;/h3&gt;

&lt;p&gt;请求的源地址，包含请求的协议，地址，以及端口&lt;/p&gt;

&lt;p&gt;不限于 CORS 请求，普通请求也会携带&lt;/p&gt;

&lt;p&gt;当 Origin 的值为 null 时，表示请求地址为本地&lt;/p&gt;

&lt;h3 id=&#34;access-control-request-method&#34;&gt;Access-Control-Request-Method&lt;/h3&gt;

&lt;p&gt;在发送预请求中携带&lt;/p&gt;

&lt;p&gt;告诉服务器在正式请求时使用的 HTTP 方法&lt;/p&gt;

&lt;h3 id=&#34;access-control-request-headers&#34;&gt;Access-Control-Request-Headers&lt;/h3&gt;

&lt;p&gt;在发送预请求中携带&lt;/p&gt;

&lt;p&gt;告诉服务器在正式请求时会携带的自定义头信息。&lt;/p&gt;

&lt;p&gt;多个值，使用逗号分开&lt;/p&gt;

&lt;h2 id=&#34;http-响应头&#34;&gt;HTTP 响应头&lt;/h2&gt;

&lt;h3 id=&#34;access-control-allow-origin&#34;&gt;Access-Control-Allow-Origin&lt;/h3&gt;

&lt;p&gt;服务器响应的响应&lt;/p&gt;

&lt;p&gt;允许请求的 URL&lt;/p&gt;

&lt;p&gt;当值为 &lt;code&gt;*&lt;/code&gt; 时，接受任意地址的请求&lt;/p&gt;

&lt;h3 id=&#34;access-control-expose-headers&#34;&gt;Access-Control-Expose-Headers&lt;/h3&gt;

&lt;p&gt;允许请求的自定义头&lt;/p&gt;

&lt;h3 id=&#34;access-control-max-age&#34;&gt;Access-Control-Max-Age&lt;/h3&gt;

&lt;p&gt;预请求结果的有效期，在有效期内，发送非简单请求，不需要再发送预请求。&lt;/p&gt;

&lt;h3 id=&#34;access-control-allow-credentials&#34;&gt;Access-Control-Allow-Credentials&lt;/h3&gt;

&lt;p&gt;是否允许发送 Cookie和HTTP认证信息&lt;/p&gt;

&lt;p&gt;首先，在请求中设置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;xhr.withCredentials = true;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使得 Cookies 能随请求一同发送&lt;/p&gt;

&lt;p&gt;服务器接收响应，在响应头中包含 &lt;code&gt;Access-Control-Allow-Credentials: true&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;如果响应头中没有该字段，浏览器会把响应结果丢弃，保证信息安全。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;特别注意：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;发送 Cookie 时，必须指定允许请求的域名。&lt;/p&gt;

&lt;p&gt;不能设置为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Access-Control-Allow-Origin: * 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;access-control-allow-methods&#34;&gt;Access-Control-Allow-Methods&lt;/h3&gt;

&lt;p&gt;在预请求的响应中携带&lt;/p&gt;

&lt;p&gt;在正式请求时可使用的 HTTP 方法&lt;/p&gt;

&lt;h3 id=&#34;access-control-allow-headers&#34;&gt;Access-Control-Allow-Headers&lt;/h3&gt;

&lt;p&gt;在预请求的响应中携带&lt;/p&gt;

&lt;p&gt;在正式请求时可使用的自定义HTTP请求头&lt;/p&gt;

&lt;h2 id=&#34;在服务器端支持-cors&#34;&gt;在服务器端支持 CORS&lt;/h2&gt;

&lt;p&gt;相关信息，参阅 &lt;a href=&#34;https://enable-cors.org/index.html&#34;&gt;enable cross-origin resource sharing&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;在-tomcat-中设置-cors&#34;&gt;在 tomcat 中设置 CORS&lt;/h3&gt;

&lt;p&gt;在项目的 web.xml 中添加过滤器：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;filter&amp;gt;
  &amp;lt;filter-name&amp;gt;CorsFilter&amp;lt;/filter-name&amp;gt;
  &amp;lt;filter-class&amp;gt;org.apache.catalina.filters.CorsFilter&amp;lt;/filter-class&amp;gt;
&amp;lt;/filter&amp;gt;
&amp;lt;filter-mapping&amp;gt;
  &amp;lt;filter-name&amp;gt;CorsFilter&amp;lt;/filter-name&amp;gt;
  &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;
&amp;lt;/filter-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更多参数，请看 &lt;a href=&#34;http://tomcat.apache.org/tomcat-7.0-doc/config/filter.html#CORS_Filter&#34;&gt;http://tomcat.apache.org/tomcat-7.0-doc/config/filter.html#CORS_Filter&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;在-nginx-中设置-cors&#34;&gt;在 nginx 中设置 CORS&lt;/h3&gt;

&lt;p&gt;请直接参阅，&lt;a href=&#34;https://enable-cors.org/server_nginx.html&#34;&gt;https://enable-cors.org/server_nginx.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;在-java-web-项目中自定义-cors-过滤器&#34;&gt;在 java web 项目中自定义 CORS 过滤器&lt;/h3&gt;

&lt;p&gt;一个简单的 CORS 过滤器&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.x.filter;
import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletResponse;
import org.springframework.stereotype.Component;

@Component
public class SimpleCORSFilter implements Filter {

    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {
        HttpServletResponse response = (HttpServletResponse) res;
        response.setHeader(&amp;quot;Access-Control-Allow-Origin&amp;quot;, &amp;quot;*&amp;quot;);
        response.setHeader(&amp;quot;Access-Control-Allow-Credentials&amp;quot;, &amp;quot;true&amp;quot;);
        response.setHeader(&amp;quot;Access-Control-Allow-Methods&amp;quot;, &amp;quot;POST, GET, OPTIONS, DELETE&amp;quot;);
        response.setHeader(&amp;quot;Access-Control-Max-Age&amp;quot;, &amp;quot;3600&amp;quot;);
        response.setHeader(&amp;quot;Access-Control-Allow-Headers&amp;quot;, &amp;quot;Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers,Authorization&amp;quot;);
        chain.doFilter(req, res);
    }

    public void init(FilterConfig filterConfig) {}

    public void destroy() {}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;记得在 web.xml 中配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;  &amp;lt;!--CORS 过滤器--&amp;gt;
  &amp;lt;filter&amp;gt;
    &amp;lt;filter-name&amp;gt;CORSFilter&amp;lt;/filter-name&amp;gt;
    &amp;lt;filter-class&amp;gt;com.x.filter.SimpleCORSFilter&amp;lt;/filter-class&amp;gt;
  &amp;lt;/filter&amp;gt;
  &amp;lt;filter-mapping&amp;gt;
    &amp;lt;filter-name&amp;gt;CORSFilter&amp;lt;/filter-name&amp;gt;
    &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;
  &amp;lt;/filter-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS&#34;&gt;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2016/04/cors.html&#34;&gt;跨域资源共享 CORS 详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/cors/&#34;&gt;https://www.w3.org/TR/cors/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Swagger</title>
      <link>https://www.xizero.com/javaee/swagger/</link>
      <pubDate>Mon, 27 Feb 2017 20:34:55 +0800</pubDate>
      
      <guid>https://www.xizero.com/javaee/swagger/</guid>
      <description>

&lt;h1 id=&#34;swagger&#34;&gt;Swagger&lt;/h1&gt;

&lt;p&gt;官网：&lt;a href=&#34;http://swagger.io/&#34;&gt;http://swagger.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github：&lt;a href=&#34;https://github.com/swagger-api&#34;&gt;https://github.com/swagger-api&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;THE WORLD&amp;rsquo;S MOST POPULAR API FRAMEWORK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;世界上最流行的API框架&lt;/p&gt;

&lt;p&gt;Swagger is a powerful open source framework backed by a large ecosystem of tools that helps you design, build, document, and consume your RESTful APIs.&lt;/p&gt;

&lt;p&gt;Swagger是一个强大的开源框架，有工具生态系统支持，可帮助您设计，构建，记录和使用RESTful API。&lt;/p&gt;

&lt;p&gt;Swagger 官方提供了三个工具，分别用于 Design、Build和Document：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Swagger Editor

&lt;ul&gt;
&lt;li&gt;一个设计或编辑 API 的编辑器，能根据 Swagger 规范进行直观的反馈。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Swagger Codegen

&lt;ul&gt;
&lt;li&gt;将 Swagger 文档转换成代码。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Swagger UI

&lt;ul&gt;
&lt;li&gt;在浏览器中浏览测试 REST API 。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;swagger-editor&#34;&gt;Swagger Editor&lt;/h2&gt;

&lt;p&gt;Swagger Editor 是一个可视化的 API 编辑器，能根据 Swagger 规范实时校验文档。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ox.xizero.com/uploads/2017/02/swagger_editor.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;

&lt;p&gt;Swagger 提供了在线版的 Swagger Editor ：&lt;a href=&#34;http://editor.swagger.io/#/&#34;&gt;http://editor.swagger.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;也可以在 Github 上下载项目，在本地服务器（Nginx 或 npm http-server）上运行。&lt;/p&gt;

&lt;p&gt;Github地址：&lt;a href=&#34;https://github.com/swagger-api/swagger-editor&#34;&gt;https://github.com/swagger-api/swagger-editor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;也可以直接在拉取 docker 镜像，运行。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull swaggerapi/swagger-editor
docker run -p 80:8080 swaggerapi/swagger-editor
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;

&lt;p&gt;Swagger 的文档需要符合 OpenAPI Specification ，使用 json 或者 yaml 描述 API。&lt;/p&gt;

&lt;h3 id=&#34;openapi-specification&#34;&gt;OpenAPI Specification&lt;/h3&gt;

&lt;p&gt;查看官方文档之前，推荐阅读：&lt;a href=&#34;https://www.gitbook.com/book/huangwenchao/swagger/details&#34;&gt;《如何编写基于OpenAPI规范的API文档》&lt;/a&gt;，可以对文档结构有个了解。&lt;/p&gt;

&lt;p&gt;官方文档：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Swagger 官网上的：&lt;a href=&#34;http://swagger.io/specification/&#34;&gt;http://swagger.io/specification/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github上的：&lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md&#34;&gt;https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;国内关于 Swagger 的中文文档较少，简单地翻译了一下  OpenAPI Specification ，水平有限，见谅！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OpenAPI Specification 中文：&lt;a href=&#34;https://www.xizero.com/mixin/OpenAPISpecificationZh/&#34;&gt;https://www.xizero.com/mixin/OpenAPISpecificationZh/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Arnaud Lauret 大神的 OpenAPI Specification Visual Documentation ，可以对文档结构有个清晰了解。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenAPI Specification Visual Documentation：&lt;a href=&#34;http://openapi-specification-visual-documentation.apihandyman.io/&#34;&gt;http://openapi-specification-visual-documentation.apihandyman.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在 Github 上开源地址：&lt;a href=&#34;https://github.com/arno-di-loreto/openapi-specification-visual-documentation&#34;&gt;https://github.com/arno-di-loreto/openapi-specification-visual-documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;并且大神在其博客上写了一个系列教程：Writing OpenAPI (fka Swagger) Specification tutorial&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;大神的博客：&lt;a href=&#34;http://apihandyman.io/&#34;&gt;API Handyman - http://apihandyman.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;教程的地址：&lt;a href=&#34;http://apihandyman.io/writing-openapi-swagger-specification-tutorial-part-1-introduction/&#34;&gt;http://apihandyman.io/writing-openapi-swagger-specification-tutorial-part-1-introduction/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;相关&#34;&gt;相关&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JSON Schema&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&#34;http://json-schema.org/&#34;&gt;http://json-schema.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github：&lt;a href=&#34;https://github.com/json-schema-org/json-schema-spec&#34;&gt;https://github.com/json-schema-org/json-schema-spec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;YAML&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Official YAML Web Site：&lt;a href=&#34;http://www.yaml.org/&#34;&gt;http://www.yaml.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;阮一峰-YAML 语言教程：&lt;a href=&#34;http://www.ruanyifeng.com/blog/2016/07/yaml.html&#34;&gt;http://www.ruanyifeng.com/blog/2016/07/yaml.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Google Java Style Guide&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://google.github.io/styleguide/javaguide.html&#34;&gt;https://google.github.io/styleguide/javaguide.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://huangwenchao.gitbooks.io/swagger/content/&#34;&gt;如何编写基于OpenAPI规范的API文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://swagger.io/specification/&#34;&gt;SWAGGER SPECIFICATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/arno-di-loreto/openapi-specification-visual-documentation&#34;&gt;OpenAPI Specification Visual Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;swagger-codegen&#34;&gt;Swagger Codegen&lt;/h2&gt;

&lt;p&gt;Swagger Codegen 是一个代码生成工具，根据符合 Swagger 规范的 API 文档生成 API clients 、Server stubs 或者其他类型的文档，还有其他(JMeter)。支持的语言/框架，如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API clients: ActionScript, Bash, C# (.net 2.0, 4.0 or later), C++ (cpprest, Qt5, Tizen), Clojure, Dart, Elixir, Go, Groovy, Haskell, Java (Jersey1.x, Jersey2.x, OkHttp, Retrofit1.x, Retrofit2.x, Feign), Node.js (ES5, ES6, AngularJS with Google Closure Compiler annotations) Objective-C, Perl, PHP, Python, Ruby, Scala, Swift (2.x, 3.x), Typescript (Angular1.x, Angular2.x, Fetch, Node)&lt;/li&gt;
&lt;li&gt;Server stubs: C# (ASP.NET Core, NancyFx), Erlang, Go, Haskell, Java (MSF4J, Spring, Undertow, JAX-RS: CDI, CXF, Inflector, RestEasy), PHP (Lumen, Slim, Silex, Zend Expressive), Python (Flask), NodeJS, Ruby (Sinatra, Rails5), Scala (Finch, Scalatra)&lt;/li&gt;
&lt;li&gt;API documentation generators: HTML, Confluence Wiki&lt;/li&gt;
&lt;li&gt;Others: JMeter&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;安装-1&#34;&gt;安装&lt;/h2&gt;

&lt;h3 id=&#34;环境要求&#34;&gt;环境要求&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Java 7 or 8&lt;/li&gt;
&lt;li&gt;Apache maven 3.3.3 or greater&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;安装及配置环境，可以看  &lt;a href=&#34;https://www.xizero.com/tool/Java%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%81%A2%E5%A4%8D%E6%89%8B%E5%86%8C/&#34;&gt;《Java 开发环境恢复手册》&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;下载&#34;&gt;下载&lt;/h3&gt;

&lt;p&gt;本地环境是 win10 ，关于&lt;a href=&#34;https://github.com/swagger-api/swagger-codegen#os-x-users&#34;&gt; OS X&lt;/a&gt;、&lt;a href=&#34;https://github.com/swagger-api/swagger-codegen#docker&#34;&gt;docker&lt;/a&gt;下的使用，暂不了解。&lt;/p&gt;

&lt;p&gt;可以下载项目，自己编译运行，也可以直接下载 jar 文件执行。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;克隆编译，生成的 &lt;code&gt;swagger-codegen-cli.jar&lt;/code&gt; 文件在 &lt;code&gt;modules/swagger-codegen-cli/target/&lt;/code&gt; 下&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/swagger-api/swagger-codegen cd swagger
 -codegen 
mvn clean package 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;直接下载

&lt;ul&gt;
&lt;li&gt;Github ：&lt;a href=&#34;https://github.com/swagger-api/swagger-codegen/releases&#34;&gt;https://github.com/swagger-api/swagger-codegen/releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Maven ：&lt;a href=&#34;https://mvnrepository.com/artifact/io.swagger/swagger-codegen&#34;&gt;https://mvnrepository.com/artifact/io.swagger/swagger-codegen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;使用-1&#34;&gt;使用&lt;/h3&gt;

&lt;p&gt;编译生成的 &lt;code&gt;swagger-codegen-cli.jar&lt;/code&gt; 文件在 &lt;code&gt;modules/swagger-codegen-cli/target/&lt;/code&gt; 下 ，使用时要注意路径。&lt;/p&gt;

&lt;p&gt;而且克隆项目下的 &lt;code&gt;bin&lt;/code&gt; 目录中有很多脚本，可以很方便地使用。初学的话，也可以借鉴很多。&lt;/p&gt;

&lt;p&gt;下面，解释一下相关的命令：&lt;/p&gt;

&lt;h4 id=&#34;java-jar-swagger-codegen-cli-2-2-1-jar-help&#34;&gt;&lt;code&gt;java -jar swagger-codegen-cli-2.2.1.jar help&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;查看帮助信息&lt;/p&gt;

&lt;p&gt;命令格式：&lt;code&gt;swagger-codegen-cli &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意在 win 下使用，应该是 &lt;code&gt;java -jar swagger-codegen-cli-2.2.1.jar  &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]&lt;/code&gt;，其他地方相同不另做声明&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可以使用 &lt;code&gt;swagger-codegen-cli help &amp;lt;command&amp;gt;&lt;/code&gt; 查看相关命令的更多信息。&lt;/p&gt;

&lt;p&gt;常用的命令：
- config-help&lt;br /&gt;
    - 所选语言的配置帮助
- generate&lt;br /&gt;
    - 生成所选语言的代码
- help&lt;br /&gt;
    - 显示帮助信息
- langs&lt;br /&gt;
    - 显示支持的语言
- meta&lt;br /&gt;
    - MetaGenerator. Generator for creating a new template set and configuration for Co the language you specify, and includes default templates to include.
    - 用于自定义模板，暂不了解&lt;/p&gt;

&lt;h4 id=&#34;config-help&#34;&gt;&lt;code&gt;config-help&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;查看 &lt;code&gt;config-help&lt;/code&gt; 命令的使用：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;`java -jar swagger-codegen-cli-2.2.1.jar help config-help`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;config-help&lt;/code&gt; 命令格式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;swagger-codegen-cli config-help (-l &amp;lt;language&amp;gt; | --lang &amp;lt;language&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;config-help&lt;/code&gt; 命令参数：
- language - 所选语言&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config-help&lt;/code&gt; 命令样例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -jar swagger-codegen-cli-2.2.1.jar config-help -l spring
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取 &lt;code&gt;spring&lt;/code&gt; 的配置帮助，注意 &lt;code&gt;spring&lt;/code&gt; 的默认模板是 &lt;code&gt;spring-boot&lt;/code&gt;，若要生成 &lt;code&gt;spring-mvc&lt;/code&gt; ，需要在 &lt;code&gt;generate&lt;/code&gt; 中指定 &lt;code&gt;library&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 部分执行结果
library
    library template (sub-template) to use (Default: spring-boot)
        spring-boot - Spring-boot Server application using the SpringFox integration.
        spring-mvc - Spring-MVC Server application using the SpringFox integration.
        spring-cloud - Spring-Cloud-Feign client with Spring-Boot auto-configured settings.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;langs&#34;&gt;&lt;code&gt;langs&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;查看支持的语言和框架&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -jar swagger-codegen-cli-2.2.1.jar langs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行结果&lt;/p&gt;

&lt;p&gt;Available languages: [android, aspnet5, async-scala, cwiki, csharp, cpprest, dart, flash, python-flask, go, groovy, java, jaxrs, jaxrs-cxf, jaxrs-resteasy, jaxrs-spec, inflector, javascript, javascript-closure-angular, jmeter, nancyfx, nodejs-server, objc, perl, php, python, qt5cpp, ruby, scala, scalatra, silex-PHP, sinatra, rails5, slim, spring, dynamic-html, html, html2, swagger, swagger-yaml, swift, tizen, typescript-angular2, typescript-angular, typescript-node, typescript-fetch, akka-scala, CsharpDotNet2, clojure, haskell, lumen, go-server]&lt;/p&gt;

&lt;p&gt;了解相关语言的配置帮助，可使用 &lt;code&gt;config-help&lt;/code&gt; 命令。&lt;/p&gt;

&lt;h4 id=&#34;generate&#34;&gt;&lt;code&gt;generate&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;generate&lt;/code&gt; 的作用是根据 API 文档生成代码，是&lt;strong&gt;最重要的命令&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;首先查看 &lt;code&gt;generate&lt;/code&gt; 命令的帮助信息：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ java -jar swagger-codegen-cli-2.2.1.jar help generate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;概要，参数 &lt;code&gt;-i&lt;/code&gt; 和 &lt;code&gt;-l&lt;/code&gt; 是必要参数，其他参数可选。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;swagger-codegen-cli generate
        [(-a &amp;lt;authorization&amp;gt; | --auth &amp;lt;authorization&amp;gt;)]
        [--additional-properties &amp;lt;additional properties&amp;gt;]
        [--api-package &amp;lt;api package&amp;gt;] [--artifact-id &amp;lt;artifact id&amp;gt;]
        [--artifact-version &amp;lt;artifact version&amp;gt;]
        [(-c &amp;lt;configuration file&amp;gt; | --config &amp;lt;configuration file&amp;gt;)]
        [-D &amp;lt;system properties&amp;gt;] [--git-repo-id &amp;lt;git repo id&amp;gt;]
        [--git-user-id &amp;lt;git user id&amp;gt;] [--group-id &amp;lt;group id&amp;gt;]
        [--http-user-agent &amp;lt;http user agent&amp;gt;]
        (-i &amp;lt;spec file&amp;gt; | --input-spec &amp;lt;spec file&amp;gt;)
        [--import-mappings &amp;lt;import mappings&amp;gt;]
        [--instantiation-types &amp;lt;instantiation types&amp;gt;]
        [--invoker-package &amp;lt;invoker package&amp;gt;]
        (-l &amp;lt;language&amp;gt; | --lang &amp;lt;language&amp;gt;)
        [--language-specific-primitives &amp;lt;language specific primitives&amp;gt;]
        [--library &amp;lt;library&amp;gt;] [--model-name-prefix &amp;lt;model name prefix&amp;gt;]
        [--model-name-suffix &amp;lt;model name suffix&amp;gt;]
        [--model-package &amp;lt;model package&amp;gt;]
        [(-o &amp;lt;output directory&amp;gt; | --output &amp;lt;output directory&amp;gt;)]
        [--release-note &amp;lt;release note&amp;gt;] [(-s | --skip-overwrite)]
        [(-t &amp;lt;template directory&amp;gt; | --template-dir &amp;lt;template directory&amp;gt;)]
        [--type-mappings &amp;lt;type mappings&amp;gt;] [(-v | --verbose)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;部分参数解释&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-i &amp;lt;spec file&amp;gt;, --input-spec &amp;lt;spec file&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;必须&lt;/strong&gt; Swagger 规范文件的位置，可以是 url 也可以是文件的路径。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-l &amp;lt;language&amp;gt;, --lang &amp;lt;language&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;必须&lt;/strong&gt; 所选的语言或框架&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-o &amp;lt;output directory&amp;gt;, --output &amp;lt;output directory&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;生成项目的位置，默认是当前目录&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--library &amp;lt;library&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;指定子模板，库模板&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-c &amp;lt;configuration file&amp;gt;, --config &amp;lt;configuration file&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;设置配置文件的路径，文件格式为 json ，如 &lt;code&gt;{&amp;quot;optionKey&amp;quot;:&amp;quot;optionValue&amp;quot;, &amp;quot;optionKey1&amp;quot;:&amp;quot;optionValue1&amp;quot;...}&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;不同语言的配置信息不同，使用 &lt;code&gt;config-help -l {lang}&lt;/code&gt; 了解更多。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--api-package &amp;lt;api package&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;设置 api 类的包名&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--artifact-id &amp;lt;artifact id&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;设置 pom.xml 中的 artifactId&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--artifact-version &amp;lt;artifact version&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;设置生成 pom.xml 中的 artifact version&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--model-package &amp;lt;model package&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;设置 models 的包名&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--model-name-prefix &amp;lt;model name prefix&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;model 的前缀，默认为空字符串&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--model-name-suffix &amp;lt;model name suffix&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;model 的后缀，默认为空字符串&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--instantiation-types &amp;lt;instantiation types&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;设置实例化类型的映射。格式为 &lt;code&gt;type=instantiatedType&lt;/code&gt;，多个映射之间用逗号 &lt;code&gt;,&lt;/code&gt; 隔开。&lt;/p&gt;

&lt;p&gt;java 的一个例子: &lt;code&gt;array=ArrayList,map=HashMap&lt;/code&gt;，&lt;code&gt;array&lt;/code&gt; 类型在生成的代码中会实例化为 &lt;code&gt;ArrayList&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--type-mappings &amp;lt;type mappings&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;设置swagger规范类型和生成的代码类型之间的映射。例如 &lt;code&gt;array=List,map=Map,string=String&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;不了解 &lt;code&gt;instantiation-types&lt;/code&gt; 和 &lt;code&gt;type-mappings&lt;/code&gt; 的区别，待解。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;样例：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Github wiki 上的 &lt;a href=&#34;https://github.com/swagger-api/swagger-codegen/wiki/Server-stub-generator-HOWTO&#34;&gt;《Server stub generator HOWTO》&lt;/a&gt;，列举了生成多种语言框架 server 的命令。但是一些并不那么好使，比如 spring-mvc。&lt;/p&gt;

&lt;p&gt;wiki 例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate \
  -i http://petstore.swagger.io/v2/swagger.json \
  -l spring-mvc \
  -o samples/server/petstore/spring-mvc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是实际上，在 Swagger codegen v2.2.0 中 spring-mvc 被删掉了，但是作为了 spring 的一个非默认库，spring-boot 作为其默认库。&lt;/p&gt;

&lt;p&gt;具体细节&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;更新日志 &lt;a href=&#34;https://github.com/swagger-api/swagger-codegen/releases/tag/v2.2.0&#34;&gt;https://github.com/swagger-api/swagger-codegen/releases/tag/v2.2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/swagger-api/swagger-codegen/pull/3133&#34;&gt;[Spring] put spring-mvc and spring-boot under the same language gen #3133&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现在创建 spring-mvc ，应该这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -jar swagger-codegen-cli-2.2.1.jar generate -i swagger.yaml -l spring --library spring-mvc
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;swagger-codegen-总结&#34;&gt;Swagger codegen 总结&lt;/h3&gt;

&lt;p&gt;Swagger codegen 作用就是根据 json 或 yaml 格式的 API 文档来生成代码。&lt;/p&gt;

&lt;p&gt;基本掌握级别是会使用 &lt;code&gt;generate&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;其他进阶，如自定义模板、添加新的语言框架、工作流集成等等，可以看Github 上的 &lt;a href=&#34;https://github.com/swagger-api/swagger-codegen/blob/master/README.md&#34;&gt;README&lt;/a&gt; 或 &lt;a href=&#34;https://github.com/swagger-api/swagger-codegen/wiki&#34;&gt;wiki&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;当然最简单的生成，可以在 Swagger Editore 中使用 Generate Server 和 Generate Client。只是不如命令操作仔细。还有，在 Swagger codegen 的 Github 项目中 &lt;code&gt;bin&lt;/code&gt; 目录下有很多可用的脚本，可根据需要修改使用。&lt;/p&gt;

&lt;h3 id=&#34;参考-1&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/swagger-api/swagger-codegen&#34;&gt;Swagger Codegen Gtihub 项目&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/swagger-api/swagger-codegen/wiki&#34;&gt;Swagger Codegen Gtihub Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://javaarm.com/faces/display.xhtml;jsessionid=dkH9tZqNyijEI4XCAbpWtmV0?tid=3915&#34;&gt;Swagger Code Generator v2.1.5 README 中文翻译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/swagger-api/swagger-codegen/pull/3133&#34;&gt;[Spring] put spring-mvc and spring-boot under the same language gen #3133&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/wangjunjun2008/article/details/53200437&#34;&gt;swagger-codegen生成java客户端代码（其他语言类似）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;swagger-ui&#34;&gt;Swagger UI&lt;/h2&gt;

&lt;p&gt;Swagger UI  将 API 文档在浏览器中可视化。&lt;/p&gt;

&lt;p&gt;官方的 Demo ，地址：&lt;a href=&#34;http://petstore.swagger.io/&#34;&gt;http://petstore.swagger.io/&lt;/a&gt;。截图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ox.xizero.com/uploads/2017/02/swagger_ui.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;安装-2&#34;&gt;安装&lt;/h3&gt;

&lt;p&gt;可以从 &lt;a href=&#34;https://github.com/swagger-api/swagger-ui&#34;&gt;Github&lt;/a&gt; 下载项目，打开 &lt;code&gt;./dist/index.html&lt;/code&gt; 直接运行。&lt;/p&gt;

&lt;p&gt;关于 &lt;code&gt;Build&lt;/code&gt; 项目和在 &lt;code&gt;docker&lt;/code&gt;  中运行，暂不了解。&lt;/p&gt;

&lt;p&gt;可以编辑 &lt;code&gt;index.html&lt;/code&gt; ，对 &lt;code&gt;swaggerUi&lt;/code&gt; 对象自定义属性。&lt;/p&gt;

&lt;p&gt;相关属性，参阅 ： &lt;a href=&#34;https://github.com/swagger-api/swagger-ui#swaggerui&#34;&gt;https://github.com/swagger-api/swagger-ui#swaggerui&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;重要属性解释：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;url  设置默认文档路径&lt;/li&gt;
&lt;li&gt;docExpansion 控制列表显示：默认 none - 完全隐藏；list - 显示路径的操作列表；full - 完全展开&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;中文翻译设置，在 &lt;code&gt;index.html&lt;/code&gt; 中 30 行左右，去掉注释代码，修改为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#39;lang/translator.js&#39; type=&#39;text/javascript&#39;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&#39;lang/zh-cn.js&#39; type=&#39;text/javascript&#39;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cors-支持&#34;&gt;CORS 支持&lt;/h3&gt;

&lt;p&gt;关于 CORS 请看另一篇。&lt;/p&gt;

&lt;h3 id=&#34;参考-2&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/swagger-api/swagger-ui&#34;&gt;https://github.com/swagger-api/swagger-ui&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;学习-swagger-的总结&#34;&gt;学习 Swagger 的总结&lt;/h2&gt;

&lt;p&gt;Saggger 是世界上最流行的的 API 框架，提供了 API 设计、构建和展示的工具。但是相关的资料也有限，大概入了个门。&lt;/p&gt;

&lt;p&gt;关于 Swagger 的更多相关开源项目，可以在 &lt;a href=&#34;http://swagger.io/open-source-integrations/&#34;&gt;http://swagger.io/open-source-integrations/&lt;/a&gt; 查看。&lt;/p&gt;

&lt;p&gt;下一篇，学习如何从代码生成 API 文档 - SPringFox。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SLF4J 和 Logback</title>
      <link>https://www.xizero.com/javaee/SLF4JANDLogback/</link>
      <pubDate>Sun, 19 Feb 2017 15:54:31 +0800</pubDate>
      
      <guid>https://www.xizero.com/javaee/SLF4JANDLogback/</guid>
      <description>

&lt;h1 id=&#34;slf4j-simple-logging-facade-for-java&#34;&gt;SLF4J - - Simple Logging Facade for Java&lt;/h1&gt;

&lt;p&gt;官网：&lt;a href=&#34;https://www.slf4j.org/&#34;&gt;https://www.slf4j.org/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;hello-world&#34;&gt;Hello World&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Slf4jTest {  
    static private Logger logger = LoggerFactory.getLogger(Slf4jTest.class);  
    public static void main(String[] args) {  
        logger.info(&amp;quot;Hello World {}&amp;quot;,&amp;quot;!&amp;quot;)  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更多推荐阅读 ：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://my.oschina.net/wangxindong/blog/825066&#34;&gt;门面之下，日志之上-SLF4J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ifeve.com/?x=0&amp;amp;y=0&amp;amp;s=slf4j&#34;&gt;并发编程网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;logback&#34;&gt;Logback&lt;/h1&gt;

&lt;p&gt;官网：&lt;a href=&#34;https://logback.qos.ch/&#34;&gt;https://logback.qos.ch/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;logback分为三个模块&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;logback-core

&lt;ul&gt;
&lt;li&gt;为其他两个模块打下了基础&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;logback-classic

&lt;ul&gt;
&lt;li&gt;可以被看做个有显著改进的log4J&lt;/li&gt;
&lt;li&gt;实现了 SLF4J API&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;logback-access

&lt;ul&gt;
&lt;li&gt;​​与Servlet容器（例如Tomcat和Jetty）集成，以提供HTTP访问日志功能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;日志级别&#34;&gt;日志级别&lt;/h2&gt;

&lt;p&gt;原地址：&lt;a href=&#34;https://zh.wikipedia.org/wiki/Log4j&#34;&gt;https://zh.wikipedia.org/wiki/Log4j&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;常用级别由低到高，依次为 Trace &amp;lt; Debug &amp;lt; Tnfo &amp;lt; Warn &amp;lt; Error&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;级别&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;OFF&lt;/td&gt;
&lt;td&gt;最高级别，用于关闭日志记录。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;FATAL&lt;/td&gt;
&lt;td&gt;导致应用程序提前终止的严重错误。一般这些信息将立即呈现在状态控制台上。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ERROR&lt;/td&gt;
&lt;td&gt;其他运行时错误或意外情况。一般这些信息将立即呈现在状态控制台上。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;WARN&lt;/td&gt;
&lt;td&gt;使用已过时的API，API的滥用，潜在错误，其他不良的或意外的运行时的状况（但不一定是错误的）。一般这些信息将立即呈现在状态控制台上。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;INFO&lt;/td&gt;
&lt;td&gt;令人感兴趣的运行时事件（启动/关闭）。一般这些信息将立即呈现在状态控制台上，因而要保守使用，并保持到最低限度。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DEBUG&lt;/td&gt;
&lt;td&gt;流经系统的详细信息。一般这些信息只记录到日志文件中。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;TRACE&lt;/td&gt;
&lt;td&gt;最详细的信息。一般这些信息只记录到日志文件中。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;logback-xml-配置&#34;&gt;logback.xml 配置&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://ox.xizero.com/uploads/2017/02/Logback.xml.svg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;

&lt;h3 id=&#34;1-pox-xml-添加依赖&#34;&gt;1.pox.xml 添加依赖&lt;/h3&gt;

&lt;p&gt;仓库地址：&lt;a href=&#34;https://mvnrepository.com/artifact/ch.qos.logback/logback-classic&#34;&gt;https://mvnrepository.com/artifact/ch.qos.logback/logback-classic&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;ch.qos.logback&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;logback-classic&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- 使用求值表达式过滤，需要添加 janino 依赖--&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.codehaus.janino&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;janino&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.0.6&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-src-main-resource添加logback-xml&#34;&gt;2.src/main/resource添加logback.xml&lt;/h3&gt;

&lt;p&gt;参考：&lt;a href=&#34;https://gist.githubusercontent.com/f12998765/28613af391c72c8c8ba47a0cef3f8250/raw/d1af5d48490308dd80645f9721e1af2b7cd6f69f/logback.xml&#34;&gt;logback.xml&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;configuration&amp;gt;
        &amp;lt;!-- 项目名称 --&amp;gt;
        &amp;lt;contextName&amp;gt;Test contextName&amp;lt;/contextName&amp;gt;

        &amp;lt;!-- 变量 --&amp;gt;
        &amp;lt;property name=&amp;quot;log&amp;quot; value=&amp;quot;./log&amp;quot;/&amp;gt;

        &amp;lt;!-- 时间戳 --&amp;gt;
        &amp;lt;timestamp key=&amp;quot;bySecond&amp;quot; datePattern=&amp;quot;yyyyMMdd&amp;quot; timeReference=&amp;quot;contextBirth&amp;quot;/&amp;gt;

        &amp;lt;!-- 在控制台打印日志 --&amp;gt;
        &amp;lt;appender name=&amp;quot;STDOUT&amp;quot; class=&amp;quot;ch.qos.logback.core.ConsoleAppender&amp;quot;&amp;gt;

                &amp;lt;!-- 级别过滤器 --&amp;gt;
                &amp;lt;filter class=&amp;quot;ch.qos.logback.classic.filter.ThresholdFilter&amp;quot;&amp;gt;
                        &amp;lt;level&amp;gt;DEBUG&amp;lt;/level&amp;gt;
                        &amp;lt;onMatch&amp;gt;ACCEPT&amp;lt;/onMatch&amp;gt;
                        &amp;lt;onMismatch&amp;gt;NEUTRAL&amp;lt;/onMismatch&amp;gt;
                &amp;lt;/filter&amp;gt;

                &amp;lt;!-- 临界值过滤器 --&amp;gt;
                &amp;lt;filter class=&amp;quot;ch.qos.logback.classic.filter.ThresholdFilter&amp;quot;&amp;gt;
                        &amp;lt;level&amp;gt;INFO&amp;lt;/level&amp;gt;
                        &amp;lt;onMatch&amp;gt;ACCEPT&amp;lt;/onMatch&amp;gt;
                        &amp;lt;onMismatch&amp;gt;DENY&amp;lt;/onMismatch&amp;gt;
                &amp;lt;/filter&amp;gt;


                &amp;lt;!-- 求值过滤器 --&amp;gt;
                &amp;lt;filter class=&amp;quot;ch.qos.logback.core.filter.EvaluatorFilter&amp;quot;&amp;gt;
                        &amp;lt;evaluator&amp;gt;
                                &amp;lt;matcher&amp;gt;
                                        &amp;lt;name&amp;gt;num&amp;lt;/name&amp;gt;
                                        &amp;lt;regex&amp;gt;\ba\w*\b&amp;lt;/regex&amp;gt;
                                &amp;lt;/matcher&amp;gt;
                                &amp;lt;expression&amp;gt; num.matches(formattedMessage) &amp;lt;/expression&amp;gt;
                        &amp;lt;/evaluator&amp;gt;
                        &amp;lt;onMatch&amp;gt;ACCEPT&amp;lt;/onMatch&amp;gt;
                        &amp;lt;onMismatch&amp;gt;DENY&amp;lt;/onMismatch&amp;gt;
                &amp;lt;/filter&amp;gt;

                &amp;lt;encoder&amp;gt;
                        &amp;lt;!-- pattern模式 %d时间 %thread 线程名 %level行为级别 %logger logger名称 %method 方法名称 %message 调用方法的入参消息 --&amp;gt;
                        &amp;lt;pattern&amp;gt;%-4d [%thread] %highlight%-5level %cyan%logger.%-10method - %message%n&amp;lt;/pattern&amp;gt;
                &amp;lt;/encoder&amp;gt;
        &amp;lt;/appender&amp;gt;

        &amp;lt;!-- FileAppender 输出到文件 --&amp;gt;
        &amp;lt;appender name=&amp;quot;FILE&amp;quot; class=&amp;quot;ch.qos.logback.core.FileAppender&amp;quot;&amp;gt;

                &amp;lt;file&amp;gt;${log}/log-${bySecond}.log&amp;lt;/file&amp;gt;

                &amp;lt;encoder&amp;gt;
                        &amp;lt;pattern&amp;gt;%date %level [%thread] %logger{30} [%file:%line] %msg%n&amp;lt;/pattern&amp;gt;
                &amp;lt;/encoder&amp;gt;
        &amp;lt;/appender&amp;gt;


        &amp;lt;!-- 滚动记录日志文件 --&amp;gt;
        &amp;lt;!-- 按时间滚动 --&amp;gt;
        &amp;lt;appender name=&amp;quot;FILE&amp;quot; class=&amp;quot;ch.qos.logback.core.rolling.RollingFileAppender&amp;quot;&amp;gt;
                &amp;lt;file&amp;gt;${log}/test_log.log&amp;lt;/file&amp;gt;
                &amp;lt;rollingPolicy class=&amp;quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&amp;quot;&amp;gt;
                        &amp;lt;!-- daily rollover --&amp;gt;
                        &amp;lt;fileNamePattern&amp;gt;${log}/log.%d{yyyy-MM-dd}.log&amp;lt;/fileNamePattern&amp;gt;

                        &amp;lt;!-- keep 30 days&#39; worth of history capped at 3GB total size --&amp;gt;
                        &amp;lt;maxHistory&amp;gt;30&amp;lt;/maxHistory&amp;gt;
                        &amp;lt;totalSizeCap&amp;gt;3GB&amp;lt;/totalSizeCap&amp;gt;
                &amp;lt;/rollingPolicy&amp;gt;

                &amp;lt;encoder&amp;gt;
                        &amp;lt;pattern&amp;gt;%-4relative [%thread] %-5level %logger{35} - %msg%n&amp;lt;/pattern&amp;gt;
                &amp;lt;/encoder&amp;gt;
        &amp;lt;/appender&amp;gt;

        &amp;lt;!-- Size and time based rolling policy --&amp;gt;
        &amp;lt;appender name=&amp;quot;ROLLING&amp;quot; class=&amp;quot;ch.qos.logback.core.rolling.RollingFileAppender&amp;quot;&amp;gt;
                &amp;lt;file&amp;gt;${log}/test_log.log&amp;lt;/file&amp;gt;
                &amp;lt;rollingPolicy class=&amp;quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&amp;quot;&amp;gt;
                        &amp;lt;!-- rollover daily --&amp;gt;
                        &amp;lt;fileNamePattern&amp;gt;${log}/log.%d{yyyy-MM-dd}.%i.log&amp;lt;/fileNamePattern&amp;gt;
                        &amp;lt;!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB --&amp;gt;
                        &amp;lt;maxFileSize&amp;gt;100MB&amp;lt;/maxFileSize&amp;gt;    
                        &amp;lt;maxHistory&amp;gt;60&amp;lt;/maxHistory&amp;gt;
                        &amp;lt;totalSizeCap&amp;gt;20GB&amp;lt;/totalSizeCap&amp;gt;
                &amp;lt;/rollingPolicy&amp;gt;
                &amp;lt;encoder&amp;gt;
                        &amp;lt;pattern&amp;gt;%-4relative [%thread] %-5level %logger{35} - %msg%n&amp;lt;/pattern&amp;gt;
                &amp;lt;/encoder&amp;gt;
        &amp;lt;/appender&amp;gt;

        &amp;lt;!-- 按窗口滚动 --&amp;gt;
        &amp;lt;appender name=&amp;quot;FILE&amp;quot; class=&amp;quot;ch.qos.logback.core.rolling.RollingFileAppender&amp;quot;&amp;gt;
                &amp;lt;file&amp;gt;${log}/test_log.log&amp;lt;/file&amp;gt;

                &amp;lt;rollingPolicy class=&amp;quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&amp;quot;&amp;gt;
                        &amp;lt;fileNamePattern&amp;gt;${log}/log.%i.log.zip&amp;lt;/fileNamePattern&amp;gt;
                        &amp;lt;minIndex&amp;gt;1&amp;lt;/minIndex&amp;gt;
                        &amp;lt;maxIndex&amp;gt;3&amp;lt;/maxIndex&amp;gt;
                &amp;lt;/rollingPolicy&amp;gt;

                &amp;lt;triggeringPolicy class=&amp;quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&amp;quot;&amp;gt;
                        &amp;lt;maxFileSize&amp;gt;5MB&amp;lt;/maxFileSize&amp;gt;
                &amp;lt;/triggeringPolicy&amp;gt;

                &amp;lt;encoder&amp;gt;
                        &amp;lt;pattern&amp;gt;%-4relative [%thread] %-5level %logger{35} - %msg%n&amp;lt;/pattern&amp;gt;
                &amp;lt;/encoder&amp;gt;
        &amp;lt;/appender&amp;gt;


        &amp;lt;!-- logger --&amp;gt;
        &amp;lt;logger name=&amp;quot;log.test&amp;quot; level=&amp;quot;INFO&amp;quot; additivity=&amp;quot;false&amp;quot;&amp;gt;
                &amp;lt;appender-ref ref=&amp;quot;STDOUT&amp;quot;/&amp;gt;
                &amp;lt;appender-ref ref=&amp;quot;ROLLINGFILE&amp;quot;/&amp;gt;
                &amp;lt;appender-ref ref=&amp;quot;HTMLFILE&amp;quot;/&amp;gt;
        &amp;lt;/logger&amp;gt;

        &amp;lt;logger name=&amp;quot;log.test.Tesg&amp;quot; level=&amp;quot;debug&amp;quot; additivity=&amp;quot;false&amp;quot;&amp;gt;
                &amp;lt;appender-ref ref=&amp;quot;STDOUT&amp;quot;/&amp;gt;
                &amp;lt;appender-ref ref=&amp;quot;ROLLINGFILE&amp;quot;/&amp;gt;
                &amp;lt;appender-ref ref=&amp;quot;HTMLFILE&amp;quot;/&amp;gt;
        &amp;lt;/logger&amp;gt;

        &amp;lt;root level=&amp;quot;debug&amp;quot;&amp;gt;
                &amp;lt;appender-ref ref=&amp;quot;STDOUT&amp;quot;/&amp;gt;
        &amp;lt;/root&amp;gt;

&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;备注&#34;&gt;备注&lt;/h2&gt;

&lt;h3 id=&#34;时间滚动&#34;&gt;时间滚动&lt;/h3&gt;

&lt;p&gt;TimeBasedRollingPolicy 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责触发滚动&lt;/p&gt;

&lt;h3 id=&#34;日期相关&#34;&gt;日期相关&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符号&lt;/th&gt;
&lt;th&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;年代标志符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;年&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;月&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;日&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;h&lt;/td&gt;
&lt;td&gt;时 在上午或下午 (1~12)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;H&lt;/td&gt;
&lt;td&gt;时 在一天中 (0~23)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;m&lt;/td&gt;
&lt;td&gt;分&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;td&gt;秒&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;毫秒&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;E&lt;/td&gt;
&lt;td&gt;星期&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;一年中的第几天&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;一月中第几个星期几&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;w&lt;/td&gt;
&lt;td&gt;一年中第几个星期&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;td&gt;一月中第几个星期&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;上午 / 下午 标记符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;k&lt;/td&gt;
&lt;td&gt;时 在一天中 (1~24)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;K&lt;/td&gt;
&lt;td&gt;时 在上午或下午 (0~11)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;z&lt;/td&gt;
&lt;td&gt;时区&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;0-9-19版本之后-推荐使用encode&#34;&gt;0.9.19版本之后，推荐使用encode&lt;/h3&gt;

&lt;p&gt;原因： &lt;a href=&#34;https://logback.qos.ch/codes.html#layoutInsteadOfEncoder&#34;&gt;https://logback.qos.ch/codes.html#layoutInsteadOfEncoder&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;size-and-time-based-rolling-policy&#34;&gt;Size and time based rolling policy&lt;/h3&gt;

&lt;p&gt;原地址：&lt;a href=&#34;https://logback.qos.ch/manual/appenders.html#SizeAndTimeBasedFNATP&#34;&gt;https://logback.qos.ch/manual/appenders.html#SizeAndTimeBasedFNATP&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;configuration&amp;gt;
  &amp;lt;appender name=&amp;quot;ROLLING&amp;quot; class=&amp;quot;ch.qos.logback.core.rolling.RollingFileAppender&amp;quot;&amp;gt;
    &amp;lt;file&amp;gt;mylog.txt&amp;lt;/file&amp;gt;
    &amp;lt;rollingPolicy class=&amp;quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&amp;quot;&amp;gt;
      &amp;lt;!-- rollover daily --&amp;gt;
      &amp;lt;fileNamePattern&amp;gt;mylog-%d{yyyy-MM-dd}.%i.txt&amp;lt;/fileNamePattern&amp;gt;
       &amp;lt;!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB --&amp;gt;
       &amp;lt;maxFileSize&amp;gt;100MB&amp;lt;/maxFileSize&amp;gt;    
       &amp;lt;maxHistory&amp;gt;60&amp;lt;/maxHistory&amp;gt;
       &amp;lt;totalSizeCap&amp;gt;20GB&amp;lt;/totalSizeCap&amp;gt;
    &amp;lt;/rollingPolicy&amp;gt;
    &amp;lt;encoder&amp;gt;
      &amp;lt;pattern&amp;gt;%msg%n&amp;lt;/pattern&amp;gt;
    &amp;lt;/encoder&amp;gt;
  &amp;lt;/appender&amp;gt;
  &amp;lt;root level=&amp;quot;DEBUG&amp;quot;&amp;gt;
    &amp;lt;appender-ref ref=&amp;quot;ROLLING&amp;quot; /&amp;gt;
  &amp;lt;/root&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/jingmoxukong/p/5910309.html&#34;&gt;细说Java主流日志工具库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://my.oschina.net/wangxindong/blog/825066&#34;&gt;门面之下，日志之上-SLF4J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ifeve.com/?x=0&amp;amp;y=0&amp;amp;s=slf4j&#34;&gt;并发编程网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/huozhonbin/article/category/1656017&#34;&gt;LogBack学习记录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://czj4451.iteye.com/blog/1974831&#34;&gt;logback系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://aub.iteye.com/category/161103&#34;&gt;aubdiy - log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Java web 序言</title>
      <link>https://www.xizero.com/javaee/Java%20web%20%E5%BA%8F%E8%A8%80/</link>
      <pubDate>Fri, 06 Jan 2017 20:56:00 +0800</pubDate>
      
      <guid>https://www.xizero.com/javaee/Java%20web%20%E5%BA%8F%E8%A8%80/</guid>
      <description>

&lt;h1 id=&#34;java-web-序言&#34;&gt;Java web 序言&lt;/h1&gt;

&lt;p&gt;不管怎样，学习越来越迷茫，每一步走地犹犹豫豫，忘记地越来越多，所以写一份总结。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apache Tomcat</title>
      <link>https://www.xizero.com/javaee/Apache%20Tomcat/</link>
      <pubDate>Tue, 03 Jan 2017 12:00:00 +0800</pubDate>
      
      <guid>https://www.xizero.com/javaee/Apache%20Tomcat/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Http 协议</title>
      <link>https://www.xizero.com/javaee/Http%20%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Mon, 02 Jan 2017 12:00:00 +0800</pubDate>
      
      <guid>https://www.xizero.com/javaee/Http%20%E5%8D%8F%E8%AE%AE/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Java Servlet</title>
      <link>https://www.xizero.com/javaee/Java%20Servlet/</link>
      <pubDate>Sun, 01 Jan 2017 12:00:00 +0800</pubDate>
      
      <guid>https://www.xizero.com/javaee/Java%20Servlet/</guid>
      <description>

&lt;h1 id=&#34;java-servlet&#34;&gt;Java Servlet&lt;/h1&gt;

&lt;h2 id=&#34;什么是-java-servlet&#34;&gt;什么是 Java Servlet ?&lt;/h2&gt;

&lt;p&gt;维基百科：&lt;a href=&#34;https://zh.wikipedia.org/wiki/Java_Servlet&#34;&gt;https://zh.wikipedia.org/wiki/Java_Servlet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.oracle.com/javaee/7/tutorial/servlets.htm#BNAFD&#34;&gt;Java Platform, Enterprise Edition: The Java EE Tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A servlet is a Java programming language class used to extend the capabilities of servers that host applications accessed by means of a request-response programming model.&lt;/p&gt;

&lt;p&gt;Java Servlet 是 Java 应用程序 ，运行在服务器端，由容器进行管理，生成动态内容。&lt;/p&gt;

&lt;p&gt;虽然 servlet 可以响应任何类型的请求，但通常用于web容器，Java Servlet 定义了对 Http 的特定 servlet 类。&lt;/p&gt;

&lt;p&gt;javax.servlet和javax.servlet.http包提供了用于编写servlet的接口和类。 所有servlet必须实现Servlet接口，它&lt;strong&gt;定义了生命周期方法&lt;/strong&gt;。 当实现通用服务时，可以使用或扩展Java Servlet API提供的GenericServlet类。 HttpServlet类提供了用于处理特定于HTTP的服务的方法，例如doGet和doPost。&lt;/p&gt;

&lt;h2 id=&#34;servlet-的生命周期&#34;&gt;Servlet 的生命周期&lt;/h2&gt;

&lt;p&gt;Servlet 的生命周期由 servlet 容器控制。&lt;/p&gt;

&lt;p&gt;当一个请求映射到servlet，容器执行&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果servlet的实例不存在，则web容器：

&lt;ul&gt;
&lt;li&gt;加载servlet类&lt;/li&gt;
&lt;li&gt;创建servlet类的实例&lt;/li&gt;
&lt;li&gt;通过调用初始化servlet实例&lt;strong&gt;init方法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;容器调用&lt;strong&gt;service方法&lt;/strong&gt;，判断请求方式，传递请求和响应对象&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果需要删除该servlet，容器通过调用servlet的&lt;strong&gt;destroy方法&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;servlet-核心类&#34;&gt;Servlet 核心类&lt;/h2&gt;

&lt;p&gt;Java EE API : &lt;a href=&#34;https://docs.oracle.com/javaee/7/api/&#34;&gt;https://docs.oracle.com/javaee/7/api/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;创建&#34;&gt;创建&lt;/h2&gt;

&lt;p&gt;使用注解 @WebServlet( &amp;ldquo;url &amp;rdquo; ) , url 是 servlet 的路径映射 ，必须是唯一的 ，使用该注解必须继承 HttpServlet&lt;/p&gt;

&lt;p&gt;也可以在 web.xml 中配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;

@WebServlet（“/ test”）
public class ModlServlet extends HttpServlet {
    ... ...
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>