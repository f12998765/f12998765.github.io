<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>对象 on XIZERO</title>
    <link>https://www.xizero.com/tags/%E5%AF%B9%E8%B1%A1/index.xml</link>
    <description>Recent content in 对象 on XIZERO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://www.xizero.com/tags/%E5%AF%B9%E8%B1%A1/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Java 类与对象</title>
      <link>https://www.xizero.com/java/java-%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Fri, 18 Nov 2016 18:20:00 +0800</pubDate>
      
      <guid>https://www.xizero.com/java/java-%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</guid>
      <description>

&lt;h2 id=&#34;什么是类&#34;&gt;什么是类？&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;类是实体的抽象，对象是类的实例化。&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
访问修饰符 class 类名{

 //成员变量

 //构造方法

 //成员方法

}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;变量的类型-作用域和生存期&#34;&gt;变量的类型、作用域和生存期&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;定义&lt;/th&gt;
&lt;th&gt;作用域&lt;/th&gt;
&lt;th&gt;生存期&lt;/th&gt;
&lt;th&gt;初始值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;成员变量&lt;/td&gt;
&lt;td&gt;实体的属性，在类中声明，但是它方法、构造器或者语句块外&lt;/td&gt;
&lt;td&gt;当前类&lt;/td&gt;
&lt;td&gt;随对象的创建而创建， 随对象销毁而销毁&lt;/td&gt;
&lt;td&gt;默认初始值：数字 &amp;ndash; &amp;gt; 0，布尔型 &amp;ndash;&amp;gt; &lt;code&gt;false&lt;/code&gt;，对象引用 &amp;ndash;&amp;gt; null&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;局部变量&lt;/td&gt;
&lt;td&gt;定义在方法、语句块中的变量以及形参&lt;/td&gt;
&lt;td&gt;局部有效&lt;/td&gt;
&lt;td&gt;作用范围结束，就会释放空间&lt;/td&gt;
&lt;td&gt;没有默认初始值，使用时必须赋值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;静态变量 \/ 类变量&lt;/td&gt;
&lt;td&gt;用关键字static修饰的成员变量&lt;/td&gt;
&lt;td&gt;多个对象共享一个变量&lt;/td&gt;
&lt;td&gt;随着类的加载而存在，随着类的消失而消失&lt;/td&gt;
&lt;td&gt;可用类名或对象名访问&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;成员方法&#34;&gt;成员方法&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;方法是实体的功能实现&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
访问修饰符 返回值类型 函数名(参数类型 参数名) {

 //执行语句

 return 返回值;

}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;方法的重载&#34;&gt;方法的重载&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;相同的方法名，不同参数的类型、参数的个数和参数的顺序&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;返回值&lt;/strong&gt;与方法的重载无关。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;构造方法&#34;&gt;构造方法&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;在类实例化过程中有且仅调用一次的无返回值方法，对对象进行初始化。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;特点&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方法名&lt;strong&gt;与类名相同&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不可以显示调用&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;不需要&lt;/strong&gt;定义返回值类型，没有返回值&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;a.没有定义构造函数时，会自动生成无参构造函数，否则不会生成。&lt;/p&gt;

&lt;p&gt;b.多个构造函数是重载的体现。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;对象&#34;&gt;对象&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;对象是类的实例化&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ClasaName name=new ClassName();
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对象的创建 :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;声明变量 &amp;ndash;&amp;gt; 实例化 &amp;ndash;&amp;gt; 初始化&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;执行顺序（优先级从高到低）：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;静态代码块&amp;gt;mian方法&amp;gt;构造代码块&amp;gt;构造方法&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;创建一个对象都在内存中做了什么事情&#34;&gt;创建一个对象都在内存中做了什么事情？&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;加载硬盘中&lt;code&gt;.class&lt;/code&gt; 文件到内存&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;main()&lt;/code&gt;执行时，在栈内存中创建&lt;code&gt;main()&lt;/code&gt;的空间(压栈-入栈)，&lt;code&gt;main()&lt;/code&gt;的栈区中创建变量&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;new&lt;/code&gt;在堆内存中创建实体空间&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在实体空间中进行属性的空间分配，并且进行默认初始化&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对属性进行显示初始化，即对其赋值&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;进行实体的构造代码块初始化&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;调用该实体对应的构造函数，进行构造函数初始化&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将实体空间首地址赋值给变量，变量就引用了该实体，即指向了该对象&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;代码块&#34;&gt;代码块&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;用{ }封装的多行代码&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代码块&lt;/th&gt;
&lt;th&gt;定义&lt;/th&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;普通代码块&lt;/td&gt;
&lt;td&gt;方法或语句中出现的代码块&lt;/td&gt;
&lt;td&gt;按顺序执行，最小作用域&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;构造代码块&lt;/td&gt;
&lt;td&gt;在类中的未用static修饰的代码块&lt;/td&gt;
&lt;td&gt;对变量赋值，执行语句。创建对象时执行，早于构造函数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;静态代码块&lt;/td&gt;
&lt;td&gt;在类中用static修饰的代码块&lt;/td&gt;
&lt;td&gt;仅会在第一次对象实例化时创建执行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
  </channel>
</rss>