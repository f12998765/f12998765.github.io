<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>继承 on XIZERO</title>
    <link>https://www.xizero.com/tags/%E7%BB%A7%E6%89%BF/index.xml</link>
    <description>Recent content in 继承 on XIZERO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://www.xizero.com/tags/%E7%BB%A7%E6%89%BF/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Java 继承和封装</title>
      <link>https://www.xizero.com/java/java-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%B0%81%E8%A3%85/</link>
      <pubDate>Fri, 18 Nov 2016 18:20:00 +0800</pubDate>
      
      <guid>https://www.xizero.com/java/java-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%B0%81%E8%A3%85/</guid>
      <description>

&lt;h1 id=&#34;封装&#34;&gt;封装&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;隐藏对象的属性和实现细节，仅对外提供公共访问方式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一般将成员变量的访问修饰符设置为&lt;code&gt;private&lt;/code&gt;，通过&lt;code&gt;public&lt;/code&gt;的getName()和setName()进行访问和赋值。&lt;/p&gt;

&lt;h1 id=&#34;继承&#34;&gt;继承&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;类的继承是属性和方法的传递。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;关键字: &lt;strong&gt;&lt;code&gt;extends&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;可以用&lt;code&gt;instanceof&lt;/code&gt;判断对象是否属于当前类或者其子类。&lt;/p&gt;

&lt;p&gt;父类优先子类构造。&lt;/p&gt;

&lt;p&gt;Object 是所有的父类。&lt;/p&gt;

&lt;h2 id=&#34;this和super&#34;&gt;this和super&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;this&lt;/code&gt;代表当前类，&lt;code&gt;super&lt;/code&gt;代表父类，可以通过点运算符调用成员方法和成员方法。&lt;/p&gt;

&lt;h2 id=&#34;可访问性&#34;&gt;可访问性&lt;/h2&gt;

&lt;p&gt;子类可以访问超类的公有和保护方法字段，不能访问私有方法字段。&lt;/p&gt;

&lt;p&gt;如果，子类与超类在同一个包中，也可以访问超类的默认方法和字段。&lt;/p&gt;

&lt;h2 id=&#34;方法的重写-覆盖&#34;&gt;方法的重写/覆盖&lt;/h2&gt;

&lt;p&gt;子类中的函数，函数名、参数、返回值类型与父类中某方法完全相同，则为方法的重写。&lt;/p&gt;

&lt;p&gt;访问权限不可以缩小。&lt;/p&gt;

&lt;h2 id=&#34;类型转换&#34;&gt;类型转换&lt;/h2&gt;

&lt;p&gt;向上强制转型 ：&lt;strong&gt;子类 &amp;ndash;&amp;gt; 父类&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Child child = new Child();
Parent parent = child;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;向下强制转型： &lt;strong&gt;父类 &amp;ndash;&amp;gt; 子类&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;前提：&lt;strong&gt;父类的引用必须已指向了子类的一个实例&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Child child = new Child();
Parent parent = child;
Child child_ = (Child) parent;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>