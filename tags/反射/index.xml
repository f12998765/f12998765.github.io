<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>XIZERO</title>
    <link>http://f12998765.github.io/tags/%E5%8F%8D%E5%B0%84/index.xml</link>
    <description>Recent content on XIZERO</description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="http://f12998765.github.io/tags/%E5%8F%8D%E5%B0%84/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Java 反射</title>
      <link>http://f12998765.github.io/java-notes/java-%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Fri, 18 Nov 2016 18:20:00 +0800</pubDate>
      
      <guid>http://f12998765.github.io/java-notes/java-%E5%8F%8D%E5%B0%84/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;反射是将java 类中的各种成分映射成相应的类。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。&lt;/p&gt;

&lt;h2 id=&#34;class-name&#34;&gt;Class Name&lt;/h2&gt;

&lt;h3 id=&#34;获取完整类名&#34;&gt;获取完整类名&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String className = class.getName();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;获取不包含包名的类名&#34;&gt;获取不包含包名的类名&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String simpleClassName = class.getWSimpleName();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;class-modifies&#34;&gt;Class Modifies&lt;/h2&gt;

&lt;h3 id=&#34;获取修饰class-对象的访问修饰符&#34;&gt;获取修饰Class 对象的访问修饰符&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;int modifiers = class.getModifiers();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;检查修饰符&#34;&gt;检查修饰符&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import  java.lang.reflect.Modifier;

Modifier.isAbstract(int modifiers)
Modifier.isFinal(int modifiers)
Modifier.isInterface(int modifiers)
Modifier.isNative(int modifiers)
Modifier.isPrivate(int modifiers)
Modifier.isProtected(int modifiers)
Modifier.isPublic(int modifiers)
Modifier.isStatic(int modifiers)
Modifier.isStrict(int modifiers)
Modifier.isSynchronized(int modifiers)
Modifier.isTransient(int modifiers)
Modifier.isVolatile(int modifiers)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;package-info&#34;&gt;Package Info&lt;/h2&gt;

&lt;p&gt;获取包的相关信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Package package = class.getPackage();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;superclass&#34;&gt;Superclass&lt;/h2&gt;

&lt;p&gt;获取超类&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Class superclass = class.getSuperclass();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;implemented-interfaces&#34;&gt;Implemented Interfaces&lt;/h2&gt;

&lt;p&gt;获得类实现的接口的列表&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Class[] interfaces = class.getInterfaces();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要获取一个给定类的完整的所实现接口的列表，需要递归查询该类以及它的超类。&lt;/p&gt;

&lt;h2 id=&#34;constructors&#34;&gt;Constructors&lt;/h2&gt;

&lt;h3 id=&#34;获得构造函数&#34;&gt;获得构造函数&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Constructor[] constructors = class.getConstructors();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;获取指定参数的构造函数&#34;&gt;获取指定参数的构造函数&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Constructor constructor = class.getConstructor(new Class[]{String.class});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;获取构造函数的参数&#34;&gt;获取构造函数的参数&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Class[] parameterTypes = constructor.getParameterTypes();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;调用构造函数-实例化对象&#34;&gt;调用构造函数，实例化对象&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Constructor constructor = MyObject.class.getConstructor(String.class);
MyObject myObject = (MyObject) constructor.newInstance(&amp;quot;参数&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;methods&#34;&gt;Methods&lt;/h2&gt;

&lt;h3 id=&#34;获取类中的公共方法&#34;&gt;获取类中的公共方法&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Method[] method = class.getMethods();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;获取指定的方法&#34;&gt;获取指定的方法&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//不存在与参数匹配的方法时，报 NoSuchMethodException 异常
Method method = class.getMethod(&amp;quot;doSomething&amp;quot;, new Class[]{String.class});
Method method = aClass.getMethod(&amp;quot;doSomething&amp;quot;, null);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;获取方法的参数&#34;&gt;获取方法的参数&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Class[] parameterTypes = method.getParameterTypes();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;获取方法的返回值类型&#34;&gt;获取方法的返回值类型&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Class returnType = method.getReturnType();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;调用方法&#34;&gt;调用方法&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Method.invoke(Object target, Object... parameters)
//参数  target  是要调用方法的对象
//静态方法需要提供null作为参数，非静态方法需要提供对象的实例。

Method method = MyObject.class.getMethod(&amp;quot;doSomething&amp;quot;, String.class);
Object returnValue = method.invoke(null, &amp;quot;parameter-value1&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;fields&#34;&gt;Fields&lt;/h2&gt;

&lt;h3 id=&#34;获取类的公共字段&#34;&gt;获取类的公共字段&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Field[] fields = class.getFields();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;获取指定字段名的字段&#34;&gt;获取指定字段名的字段&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Field field = class.getField(&amp;quot;字段名&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;根据字段获取字段名&#34;&gt;根据字段获取字段名&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String fieldName = field.getName();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;根据字段获取字段类型&#34;&gt;根据字段获取字段类型&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Class fieldType = field.getType();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;通过字段获取设置字段的值&#34;&gt;通过字段获取设置字段的值&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//参数objectInstance必须是拥有该字段的实例
Class  class_  = MyObject.class
Field field = class_.getField(&amp;quot;字段名&amp;quot;);
MyObject objectInstance = new MyObject();
Object value = field.get(objectInstance);
field.set(objetInstance, value);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;annotations&#34;&gt;Annotations&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Annotation[] annotations = class.getAnnotations();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;关于私有成员&#34;&gt;关于私有成员&lt;/h2&gt;

&lt;h3 id=&#34;私有字段&#34;&gt;私有字段&lt;/h3&gt;

&lt;p&gt;获得私有字段，仅仅在当前类中&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Field field = class.getDeclaredField(String name);

Field[] fields = class.getDeclaredFields();

field.setAccessible(true); //关闭对特定的Field实例的访问检查
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;私有方法&#34;&gt;私有方法&lt;/h3&gt;

&lt;p&gt;获得私有方法，仅仅在当前类中&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Method  method = class.getDeclaredMethod(String name, Class[ ] parameterTypes);

Method[] method = class.getDeclaredMethods();

method.setAccessible(true); //关闭对特定的Method实例的访问检查
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;数组&#34;&gt;数组&lt;/h2&gt;

&lt;h3 id=&#34;创建数组&#34;&gt;创建数组&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.lang.reflect.Array;

int[] intArray = (int[]) Array.newInstance(int.class, 3);
//第一个参数int.class指定了数组类型。
//第二个参数声明了数组大小。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;get-和-set&#34;&gt;get 和 set&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Array.get(数组实例,序列);

Array.set(数组实例,序列,值);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;获取数组的类型&#34;&gt;获取数组的类型&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Class class_ = class.getComponentType();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#参考
- &lt;a href=&#34;http://www.cnblogs.com/penghongwei/p/3299688.html&#34;&gt;Java 反射 【译】&lt;/a&gt;
- &lt;a href=&#34;http://tutorials.jenkov.com/java-reflection/index.html&#34;&gt;java-reflection [英] &lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>