<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cors on XIZERO</title>
    <link>http://hugo.xizero.com/tags/cors/index.xml</link>
    <description>Recent content in Cors on XIZERO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://hugo.xizero.com/tags/cors/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CORS</title>
      <link>http://hugo.xizero.com/javaee/cors/</link>
      <pubDate>Mon, 27 Feb 2017 20:35:59 +0800</pubDate>
      
      <guid>http://hugo.xizero.com/javaee/cors/</guid>
      <description>

&lt;h1 id=&#34;cors&#34;&gt;CORS&lt;/h1&gt;

&lt;p&gt;跨域资源共享 ，Cross-Origin Resource Sharing ，简称 CORS。&lt;/p&gt;

&lt;p&gt;使用 XMLHttpRequest 对象和Fetch发起 HTTP 请求就必须遵守同源策略，CORS 是HTML5 的跨域解决方案。&lt;/p&gt;

&lt;p&gt;了解更多，参阅：&lt;a href=&#34;https://www.w3.org/TR/cors/&#34;&gt;https://www.w3.org/TR/cors/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;关于跨域请求&#34;&gt;关于跨域请求&lt;/h2&gt;

&lt;p&gt;理解上，跨域请求不是被服务器拒绝，而是&lt;strong&gt;返回结果被浏览器拦截&lt;/strong&gt;了，被拒绝的结果可以在浏览器的开发者工具中查看。&lt;/p&gt;

&lt;p&gt;其它，有些浏览器不允许从HTTPS的域跨域访问HTTP，比如Chrome和Firefox，会在请求发出前拦截。&lt;/p&gt;

&lt;p&gt;常用的跨域请求场景是：使用 XMLHttpRequest 或 Fetch发起跨站 HTTP 请求。&lt;/p&gt;

&lt;h2 id=&#34;cors-过程理解&#34;&gt;CORS 过程理解&lt;/h2&gt;

&lt;p&gt;首先明确，&lt;strong&gt;CORS 的关键是服务器&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;最简单的过程：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;浏览器发送 CORS 请求，在 header 中添加一个 &lt;code&gt;Origin&lt;/code&gt; 字段，其值为请求源（协议+地址+端口）&lt;/li&gt;
&lt;li&gt;服务器响应，并在 header 中添加 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 字段&lt;/li&gt;
&lt;li&gt;浏览器接收，判断 header 来确定是否拦截&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;cors-请求&#34;&gt;CORS 请求&lt;/h2&gt;

&lt;p&gt;浏览器将 CORS 请求分为两类，简单请求和预请求。&lt;/p&gt;

&lt;h3 id=&#34;简单请求&#34;&gt;简单请求&lt;/h3&gt;

&lt;p&gt;简单请求的定义：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;只使用 GET, HEAD 或者 POST 请求方法。&lt;/li&gt;
&lt;li&gt;使用 POST  请求时，数据类型(Content-Type)只能是 application/x-www-form-urlencoded, multipart/form-data 或 text/plain中的一种。&lt;/li&gt;
&lt;li&gt;不会使用自定义请求头&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;简单请求的响应就是最简单的过程，通过使用 Origin 和 Access-Control-Allow-Origin 就可以完成最简单的跨站请求。&lt;/p&gt;

&lt;h3 id=&#34;预请求&#34;&gt;预请求&lt;/h3&gt;

&lt;p&gt;预请求就是非简单请求。&lt;/p&gt;

&lt;p&gt;预请求的重点是必须发送一个 &lt;code&gt;OPTIONS&lt;/code&gt; 请求，来确定是否支持 CORS。浏览器确认之后，才会发送正式请求。原因是会对服务器的数据造成破坏。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;请求过程：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;发送一个 &lt;code&gt;OPEIONS&lt;/code&gt; 请求。一同发送的还包括三个请求头：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Origin - 源地址&lt;/li&gt;
&lt;li&gt;Access-Control-Request-Method - 跨域请求的 HTTP 方法列表&lt;/li&gt;
&lt;li&gt;Access-Control-Request-Headers - 跨域请求将发送的自定义头信息&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;服务器处理请求，返回响应。并且返回了相应的响应头：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Access-Control-Allow-Origin&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Methods&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Headers&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Credentials&lt;/li&gt;
&lt;li&gt;Access-Control-Max-Age&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之后的正常请求，与简单请求相同。&lt;/p&gt;

&lt;h2 id=&#34;http-请求头&#34;&gt;HTTP 请求头&lt;/h2&gt;

&lt;h3 id=&#34;origin&#34;&gt;Origin&lt;/h3&gt;

&lt;p&gt;请求的源地址，包含请求的协议，地址，以及端口&lt;/p&gt;

&lt;p&gt;不限于 CORS 请求，普通请求也会携带&lt;/p&gt;

&lt;p&gt;当 Origin 的值为 null 时，表示请求地址为本地&lt;/p&gt;

&lt;h3 id=&#34;access-control-request-method&#34;&gt;Access-Control-Request-Method&lt;/h3&gt;

&lt;p&gt;在发送预请求中携带&lt;/p&gt;

&lt;p&gt;告诉服务器在正式请求时使用的 HTTP 方法&lt;/p&gt;

&lt;h3 id=&#34;access-control-request-headers&#34;&gt;Access-Control-Request-Headers&lt;/h3&gt;

&lt;p&gt;在发送预请求中携带&lt;/p&gt;

&lt;p&gt;告诉服务器在正式请求时会携带的自定义头信息。&lt;/p&gt;

&lt;p&gt;多个值，使用逗号分开&lt;/p&gt;

&lt;h2 id=&#34;http-响应头&#34;&gt;HTTP 响应头&lt;/h2&gt;

&lt;h3 id=&#34;access-control-allow-origin&#34;&gt;Access-Control-Allow-Origin&lt;/h3&gt;

&lt;p&gt;服务器响应的响应&lt;/p&gt;

&lt;p&gt;允许请求的 URL&lt;/p&gt;

&lt;p&gt;当值为 &lt;code&gt;*&lt;/code&gt; 时，接受任意地址的请求&lt;/p&gt;

&lt;h3 id=&#34;access-control-expose-headers&#34;&gt;Access-Control-Expose-Headers&lt;/h3&gt;

&lt;p&gt;允许请求的自定义头&lt;/p&gt;

&lt;h3 id=&#34;access-control-max-age&#34;&gt;Access-Control-Max-Age&lt;/h3&gt;

&lt;p&gt;预请求结果的有效期，在有效期内，发送非简单请求，不需要再发送预请求。&lt;/p&gt;

&lt;h3 id=&#34;access-control-allow-credentials&#34;&gt;Access-Control-Allow-Credentials&lt;/h3&gt;

&lt;p&gt;是否允许发送 Cookie和HTTP认证信息&lt;/p&gt;

&lt;p&gt;首先，在请求中设置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;xhr.withCredentials = true;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使得 Cookies 能随请求一同发送&lt;/p&gt;

&lt;p&gt;服务器接收响应，在响应头中包含 &lt;code&gt;Access-Control-Allow-Credentials: true&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;如果响应头中没有该字段，浏览器会把响应结果丢弃，保证信息安全。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;特别注意：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;发送 Cookie 时，必须指定允许请求的域名。&lt;/p&gt;

&lt;p&gt;不能设置为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Access-Control-Allow-Origin: * 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;access-control-allow-methods&#34;&gt;Access-Control-Allow-Methods&lt;/h3&gt;

&lt;p&gt;在预请求的响应中携带&lt;/p&gt;

&lt;p&gt;在正式请求时可使用的 HTTP 方法&lt;/p&gt;

&lt;h3 id=&#34;access-control-allow-headers&#34;&gt;Access-Control-Allow-Headers&lt;/h3&gt;

&lt;p&gt;在预请求的响应中携带&lt;/p&gt;

&lt;p&gt;在正式请求时可使用的自定义HTTP请求头&lt;/p&gt;

&lt;h2 id=&#34;在服务器端支持-cors&#34;&gt;在服务器端支持 CORS&lt;/h2&gt;

&lt;p&gt;相关信息，参阅 &lt;a href=&#34;https://enable-cors.org/index.html&#34;&gt;enable cross-origin resource sharing&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;在-tomcat-中设置-cors&#34;&gt;在 tomcat 中设置 CORS&lt;/h3&gt;

&lt;p&gt;在项目的 web.xml 中添加过滤器：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;filter&amp;gt;
  &amp;lt;filter-name&amp;gt;CorsFilter&amp;lt;/filter-name&amp;gt;
  &amp;lt;filter-class&amp;gt;org.apache.catalina.filters.CorsFilter&amp;lt;/filter-class&amp;gt;
&amp;lt;/filter&amp;gt;
&amp;lt;filter-mapping&amp;gt;
  &amp;lt;filter-name&amp;gt;CorsFilter&amp;lt;/filter-name&amp;gt;
  &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;
&amp;lt;/filter-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更多参数，请看 &lt;a href=&#34;http://tomcat.apache.org/tomcat-7.0-doc/config/filter.html#CORS_Filter&#34;&gt;http://tomcat.apache.org/tomcat-7.0-doc/config/filter.html#CORS_Filter&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;在-nginx-中设置-cors&#34;&gt;在 nginx 中设置 CORS&lt;/h3&gt;

&lt;p&gt;请直接参阅，&lt;a href=&#34;https://enable-cors.org/server_nginx.html&#34;&gt;https://enable-cors.org/server_nginx.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;在-java-web-项目中自定义-cors-过滤器&#34;&gt;在 java web 项目中自定义 CORS 过滤器&lt;/h3&gt;

&lt;p&gt;一个简单的 CORS 过滤器&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.x.filter;
import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletResponse;
import org.springframework.stereotype.Component;

@Component
public class SimpleCORSFilter implements Filter {

    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {
        HttpServletResponse response = (HttpServletResponse) res;
        response.setHeader(&amp;quot;Access-Control-Allow-Origin&amp;quot;, &amp;quot;*&amp;quot;);
        response.setHeader(&amp;quot;Access-Control-Allow-Credentials&amp;quot;, &amp;quot;true&amp;quot;);
        response.setHeader(&amp;quot;Access-Control-Allow-Methods&amp;quot;, &amp;quot;POST, GET, OPTIONS, DELETE&amp;quot;);
        response.setHeader(&amp;quot;Access-Control-Max-Age&amp;quot;, &amp;quot;3600&amp;quot;);
        response.setHeader(&amp;quot;Access-Control-Allow-Headers&amp;quot;, &amp;quot;Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers,Authorization&amp;quot;);
        chain.doFilter(req, res);
    }

    public void init(FilterConfig filterConfig) {}

    public void destroy() {}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;记得在 web.xml 中配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;  &amp;lt;!--CORS 过滤器--&amp;gt;
  &amp;lt;filter&amp;gt;
    &amp;lt;filter-name&amp;gt;CORSFilter&amp;lt;/filter-name&amp;gt;
    &amp;lt;filter-class&amp;gt;com.x.filter.SimpleCORSFilter&amp;lt;/filter-class&amp;gt;
  &amp;lt;/filter&amp;gt;
  &amp;lt;filter-mapping&amp;gt;
    &amp;lt;filter-name&amp;gt;CORSFilter&amp;lt;/filter-name&amp;gt;
    &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;
  &amp;lt;/filter-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS&#34;&gt;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2016/04/cors.html&#34;&gt;跨域资源共享 CORS 详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/cors/&#34;&gt;https://www.w3.org/TR/cors/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>