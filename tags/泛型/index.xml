<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>泛型 on XIZERO</title>
    <link>http://127.0.0.1/tags/%E6%B3%9B%E5%9E%8B/index.xml</link>
    <description>Recent content in 泛型 on XIZERO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://127.0.0.1/tags/%E6%B3%9B%E5%9E%8B/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Java 泛型</title>
      <link>http://127.0.0.1/java/java-%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Fri, 18 Nov 2016 18:20:00 +0800</pubDate>
      
      <guid>http://127.0.0.1/java/java-%E6%B3%9B%E5%9E%8B/</guid>
      <description>

&lt;h2 id=&#34;容器类&#34;&gt;容器类&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;又叫泛型类型&lt;/li&gt;
&lt;li&gt;可以填充任意类型的容器类&lt;/li&gt;
&lt;li&gt;注意与泛型接口的使用&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Em&amp;lt;T&amp;gt; {
    private T num;
    private T name;

    public T getNum() {
        return num;
    }

    public void setNum(T num) {
        this.num = num;
    }

    public T getName() {
        return name;
    }

    public void setName(T name) {
        this.name = name;
    }

    public Em() {

    }

    public Em(T num, T name) {
        this.num = num;
        this.name = name;
    }

    @Override
    public String toString() {
        return &amp;quot;Em{&amp;quot; +
                &amp;quot;num=&amp;quot; + num +
                &amp;quot;, name=&amp;quot; + name +
                &#39;}&#39;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;泛型接口&#34;&gt;泛型接口&lt;/h2&gt;

&lt;h3 id=&#34;定义&#34;&gt;定义&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface Generator&amp;lt;T&amp;gt; {
    public T next();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;实现&#34;&gt;实现&lt;/h3&gt;

&lt;p&gt;看　&lt;a href=&#34;http://xizero.com/java-notes/java-%E6%8E%92%E5%BA%8F/&#34;&gt;Java 排序&lt;/a&gt; 中的&lt;code&gt;Comparator&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.util.Comparator;

public class EmComparable implements Comparator&amp;lt;Em&amp;lt;Integer&amp;gt;&amp;gt; {

    @Override
    public int compare(Em&amp;lt;Integer&amp;gt; o1,Em&amp;lt;Integer&amp;gt;o2) {
        if(o1.getNum()&amp;gt;o2.getNum())
            return 1;
        else if(o1.getNum()&amp;lt;o2.getNum())
            return -1;
        else
            return 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;泛型方法&#34;&gt;泛型方法&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;尽量使用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;出现在关键字 &lt;code&gt;final&lt;/code&gt; 之后，返回类型之前。&lt;/p&gt;

&lt;p&gt;不需要指定参数类型，可自动推断。&lt;/p&gt;

&lt;p&gt;和可变参数的例子&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public static &amp;lt;T&amp;gt; void out(T... args) {
        for (T t : args) {
            System.out.println(t);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;通配符&#34;&gt;通配符&lt;/h2&gt;

&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;

&lt;p&gt;List&lt;ClassType&gt; 中可以存放
- ClassType 的实例
- ClassType（类）的子类实例
- ClassType（接口）的实现类的实例&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;
List&lt;String&gt; 和 List&lt;Object&gt; 是不匹配的，即使 String 是 Object 的子类。&lt;/p&gt;

&lt;h3 id=&#34;通配符-1&#34;&gt;? 通配符&lt;/h3&gt;

&lt;p&gt;List&amp;lt;?&amp;gt; 可以表示任意类型的列表，即可以将 List&lt;String&gt; 传给下面的这个方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void test(List&amp;lt;?&amp;gt; list)
{
    //……
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;
在声明或创建一个容器类时，使用通配符是非法的。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;?&amp;gt; list = new ArrayList&amp;lt;?&amp;gt;(); // 这个是非法的
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;界限通配符&#34;&gt;界限通配符&lt;/h3&gt;

&lt;p&gt;上界&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&amp;lt;? extends 父类&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下界&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&amp;lt;? super 子类&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;泛型数组&#34;&gt;泛型数组&lt;/h2&gt;

&lt;p&gt;Google&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000002646193&#34;&gt;Java泛型：泛型类、泛型接口和泛型方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>