<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>XIZERO</title>
    <link>http://f12998765.github.io/tags/%E9%9B%86%E5%90%88/index.xml</link>
    <description>Recent content on XIZERO</description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="http://f12998765.github.io/tags/%E9%9B%86%E5%90%88/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Java 集合</title>
      <link>http://f12998765.github.io/java-notes/java-%E9%9B%86%E5%90%88/</link>
      <pubDate>Fri, 18 Nov 2016 18:20:00 +0800</pubDate>
      
      <guid>http://f12998765.github.io/java-notes/java-%E9%9B%86%E5%90%88/</guid>
      <description>

&lt;h2 id=&#34;uml&#34;&gt;UML&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;图片转载自&lt;a href=&#34;http://blog.csdn.net/ns_code/article/details/35564663&#34;&gt;兰亭风雨&lt;/a&gt;&lt;/strong&gt;
&lt;img src=&#34;https://moetu.org/images/2016/09/24/201406281442056253fd44.jpg&#34; alt=&#34;图片转载自兰亭风雨&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Collection&lt;/code&gt;：集合层次结构的根接口,主要的子接口是&lt;code&gt;List&lt;/code&gt;、&lt;code&gt;Set&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;List&lt;/code&gt;：一个有序的 Collection（序列），&lt;strong&gt;元素可重复&lt;/strong&gt;，常用的实现类是&lt;code&gt;ArrayList&lt;/code&gt;、&lt;code&gt;LinkedList&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Set&lt;/code&gt;：一个无序的 Collection（集合），&lt;strong&gt;元素不可重复&lt;/strong&gt;,e1.equals(e2)=false，常用的实现类是&lt;code&gt;HashSet&lt;/code&gt;、&lt;code&gt;EnumSet&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Map&lt;/code&gt;：一个键值对的集合（Key - Value），映射的键不可以重复，且最多映射到一个值，常用的实现类是&lt;code&gt;HashMap&lt;/code&gt;、&lt;code&gt;EnumMap&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Iterator&lt;/code&gt;：遍历集合的迭代器，不可以遍历&lt;code&gt;Map&lt;/code&gt;，&lt;code&gt;ListIterator&lt;/code&gt;专门用于遍历&lt;code&gt;List&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Arrays&lt;/code&gt;和&lt;code&gt;Collections&lt;/code&gt;是操作数组、集合的工具类。&lt;/p&gt;

&lt;h2 id=&#34;接口&#34;&gt;接口&lt;/h2&gt;

&lt;h3 id=&#34;collection&#34;&gt;Collection&lt;/h3&gt;

&lt;p&gt;实现 Collection 的类必须实现两个构造方法
- 无参构造方法，创建一个空的 Collection
- 一个 Collection 参数的构造函数，用于克隆 Collection
|成员方法|作用|
|&amp;mdash;|&amp;mdash;|
|int size() |返回当前集合中元素的数量 |
|boolean isEmpty() |判断集合是否为空 |
|Iterator iterator() |返回一个迭代器 |
|&lt;strong&gt;添加&lt;/strong&gt;| |
|boolean add(Object o) |添加对象到集合 |
|boolean addAll(Collection c) |将集合 C 中所有的元素添加给该集合 |
|&lt;strong&gt;删除&lt;/strong&gt;| |
|void clear() |删除集合中所有元素 |
|boolean remove(Object o) |删除指定的对象 |
|void removeAll(Collection c) |从集合中删除 C 集合中的元素 |
|void retainAll(Collection c) |从集合中删除集合 C 中不包含的元素 |
|&lt;strong&gt;查找&lt;/strong&gt;| |
|boolean contains(Object o) |查找集合中是否有指定的对象 |
|boolean containsAll(Collection c) |查找集合中是否有集合 C 中的元素 |
| Object[]  toArray() | 返回包含此 collection 中所有元素的数组|
|&lt;T&gt; T[]    toArray(T[] a)| 返回包含此 collection 中所有元素的数组，返回类型已确定|&lt;/p&gt;

&lt;h3 id=&#34;list&#34;&gt;List&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;成员方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;E  get(int index)&lt;/td&gt;
&lt;td&gt;返回列表中指定位置的元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;E  set(int index, E element)&lt;/td&gt;
&lt;td&gt;用指定元素替换列表中指定位置的元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;添加&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;boolean add(E e)&lt;/td&gt;
&lt;td&gt;向列表的尾部添加指定的元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;void add(int index,Object element)&lt;/td&gt;
&lt;td&gt;在指定位置上添加一个对象&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;boolean addAll(int index,Collection c)&lt;/td&gt;
&lt;td&gt;将集合 C 的元素添加到指定的位置&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;删除&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Object removeint(int index)&lt;/td&gt;
&lt;td&gt;删除指定位置的元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;查找&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;int    indexOf(Object o)&lt;/td&gt;
&lt;td&gt;返回此列表中第一次出现的指定元素的索引；如果此列表不包含该元素，则返回 -1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;int    lastIndexOf(Object o)&lt;/td&gt;
&lt;td&gt;返回此列表中最后出现的指定元素的索引；如果列表不包含此元素，则返回 -1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;替换&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Object set(int index,Object element)&lt;/td&gt;
&lt;td&gt;用元素 element 取代位置 index 上的元素, 返回被取代的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;set&#34;&gt;Set&lt;/h3&gt;

&lt;p&gt;Set 没有定义新的方法&lt;/p&gt;

&lt;h3 id=&#34;map&#34;&gt;Map&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;成员方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;int    size()&lt;/td&gt;
&lt;td&gt;返回此映射中的键-值映射关系数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;boolean    isEmpty()&lt;/td&gt;
&lt;td&gt;如果此映射未包含键-值映射关系，则返回 true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;取值&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;V  get(Object key)&lt;/td&gt;
&lt;td&gt;返回指定键所映射的值；否则则返回 null&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Set&lt;K&gt; keySet()&lt;/td&gt;
&lt;td&gt;返回此映射中包含的键的 Set 视图&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Set&lt;Map.Entry&lt;K,V&gt;&amp;gt;    entrySet()&lt;/td&gt;
&lt;td&gt;返回此映射中包含的映射关系的 Set 视图&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Collection&lt;V&gt;  values()&lt;/td&gt;
&lt;td&gt;返回此映射中包含的值的 Collection 视图&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;添加&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;V  put(K key, V value)&lt;/td&gt;
&lt;td&gt;将指定的值与此映射中的指定键关联&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;void   putAll(Map&amp;lt;? extends K,? extends V&amp;gt; m)&lt;/td&gt;
&lt;td&gt;从指定映射中将所有映射关系复制到此映射中&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;删除&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;V  remove(Object key)&lt;/td&gt;
&lt;td&gt;如果存在一个键的映射关系，则将其从此映射中移除&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;void   clear()&lt;/td&gt;
&lt;td&gt;从此映射中移除所有映射关系&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;查找&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;boolean    containsKey(Object key)&lt;/td&gt;
&lt;td&gt;如果此映射包含指定键的映射关系，则返回 true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;boolean    containsValue(Object value)&lt;/td&gt;
&lt;td&gt;如果此映射将一个或多个键映射到指定值，则返回 true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;实现类&#34;&gt;实现类&lt;/h2&gt;

&lt;h3 id=&#34;arraylist&#34;&gt;ArrayList&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;构造方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ArrayList(int initialCapacity)&lt;/td&gt;
&lt;td&gt;构造一个具有指定初始容量的空列表&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;成员方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Object clone()&lt;/td&gt;
&lt;td&gt;返回此 ArrayList 实例的浅表副本&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;void   ensureCapacity(int minCapacity)&lt;/td&gt;
&lt;td&gt;如有必要，增加此 ArrayList 实例的容量，以确保它至少能够容纳最小容量参数所指定的元素数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;protected  void    removeRange(int fromIndex, int toIndex)&lt;/td&gt;
&lt;td&gt;移除列表中索引在 fromIndex（包括）和 toIndex（不包括）之间的所有元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;void   trimToSize()&lt;/td&gt;
&lt;td&gt;将此 ArrayList 实例的容量调整为列表的当前大小&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;linkedlist&#34;&gt;LinkedList&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;成员方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Object clone()&lt;/td&gt;
&lt;td&gt;返回此 LinkedList 的浅表副本。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;添加&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;void   addFirst(E e)&lt;/td&gt;
&lt;td&gt;将指定元素插入此列表的开头&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;void   addLast(E e)&lt;/td&gt;
&lt;td&gt;将指定元素添加到此列表的结尾&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;删除&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;E  removeFirst()&lt;/td&gt;
&lt;td&gt;移除并返回此列表的第一个元素。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;E  removeLast()&lt;/td&gt;
&lt;td&gt;移除并返回此列表的最后一个元素。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;boolean    removeFirstOccurrence(Object o)&lt;/td&gt;
&lt;td&gt;从此列表中移除第一次出现的指定元素（从头部到尾部遍历列表时）。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;boolean    removeLastOccurrence(Object o)&lt;/td&gt;
&lt;td&gt;从此列表中移除最后一次出现的指定元素（从头部到尾部遍历列表时）。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;取值&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;E  element()&lt;/td&gt;
&lt;td&gt;获取但不移除此列表的头（第一个元素）。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;E  getFirst()&lt;/td&gt;
&lt;td&gt;返回此列表的第一个元素。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;E  getLast()&lt;/td&gt;
&lt;td&gt;返回此列表的最后一个元素。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;*&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;E  pop()&lt;/td&gt;
&lt;td&gt;从此列表所表示的堆栈处弹出一个元素。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;void   push(E e)&lt;/td&gt;
&lt;td&gt;将元素推入此列表所表示的堆栈。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;*&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;E  peek()&lt;/td&gt;
&lt;td&gt;获取但不移除此列表的头（第一个元素）。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;E  peekFirst()&lt;/td&gt;
&lt;td&gt;获取但不移除此列表的第一个元素；如果此列表为空，则返回 null。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;E  peekLast()&lt;/td&gt;
&lt;td&gt;获取但不移除此列表的最后一个元素；如果此列表为空，则返回 null。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;*&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;E  poll()&lt;/td&gt;
&lt;td&gt;获取并移除此列表的头（第一个元素）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;E  pollFirst()&lt;/td&gt;
&lt;td&gt;获取并移除此列表的第一个元素；如果此列表为空，则返回 null。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;E  pollLast()&lt;/td&gt;
&lt;td&gt;获取并移除此列表的最后一个元素；如果此列表为空，则返回 null。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;插入&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;boolean    offer(E e)&lt;/td&gt;
&lt;td&gt;将指定元素添加到此列表的末尾（最后一个元素）。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;boolean    offerFirst(E e)&lt;/td&gt;
&lt;td&gt;在此列表的开头插入指定的元素。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;boolean    offerLast(E e)&lt;/td&gt;
&lt;td&gt;在此列表末尾插入指定的元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;hashset&#34;&gt;HashSet&lt;/h3&gt;

&lt;p&gt;没有定义新的方法&lt;/p&gt;

&lt;h3 id=&#34;hashmap&#34;&gt;HashMap&lt;/h3&gt;

&lt;p&gt;没有定义新的方法&lt;/p&gt;

&lt;h2 id=&#34;工具类&#34;&gt;工具类&lt;/h2&gt;

&lt;h3 id=&#34;arrays&#34;&gt;Arrays&lt;/h3&gt;

&lt;p&gt;见数组一节。&lt;/p&gt;

&lt;h3 id=&#34;collections&#34;&gt;Collections&lt;/h3&gt;

&lt;p&gt;更多内容查看 &lt;a href=&#34;http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/Collections.html&#34;&gt;API&lt;/a&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;成员方法&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;static &lt;T&gt; void    copy(List&amp;lt;? super T&amp;gt; dest, List&amp;lt;? extends T&amp;gt; src)&lt;/td&gt;
&lt;td&gt;将所有元素从一个列表复制到另一个列表。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;添加&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;static &lt;T&gt; boolean addAll(Collection&amp;lt;? super T&amp;gt; c, T&amp;hellip; elements)&lt;/td&gt;
&lt;td&gt;将所有指定元素添加到指定 collection 中。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;查找&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;static int indexOfSubList(List&amp;lt;?&amp;gt; source, List&amp;lt;?&amp;gt; target)&lt;/td&gt;
&lt;td&gt;返回指定源列表中第一次出现指定目标列表的起始位置；如果没有出现这样的列表，则返回 -1。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;static int lastIndexOfSubList(List&amp;lt;?&amp;gt; source, List&amp;lt;?&amp;gt; target)&lt;/td&gt;
&lt;td&gt;返回指定源列表中最后一次出现指定目标列表的起始位置；如果没有出现这样的列表，则返回 -1。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;static boolean disjoint(Collection&amp;lt;?&amp;gt; c1, Collection&amp;lt;?&amp;gt; c2)&lt;/td&gt;
&lt;td&gt;如果两个指定 collection 中没有相同的元素，则返回 true。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;替换&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;static &lt;T&gt; void    fill(List&amp;lt;? super T&amp;gt; list, T obj)&lt;/td&gt;
&lt;td&gt;使用指定元素替换指定列表中的所有元素。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;static &lt;T&gt; boolean replaceAll(List&lt;T&gt; list, T oldVal, T newVal)&lt;/td&gt;
&lt;td&gt;使用另一个值替换列表中出现的所有某一指定值。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;排序&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;static void    reverse(List&amp;lt;?&amp;gt; list)&lt;/td&gt;
&lt;td&gt;反转指定列表中元素的顺序。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;static &lt;T extends Comparable&lt;? super T&gt;&amp;gt;  void sort(List&lt;T&gt; list)&lt;/td&gt;
&lt;td&gt;根据元素的自然顺序 对指定列表按升序进行排序。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;static &lt;T&gt; void    sort(List&lt;T&gt; list, Comparator&amp;lt;? super T&amp;gt; c)&lt;/td&gt;
&lt;td&gt;根据指定比较器产生的顺序对指定列表进行排序。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;static &lt;T extends Object &amp; Comparable&lt;? super T&gt;&amp;gt;  T   max(Collection&amp;lt;? extends T&amp;gt; coll)&lt;/td&gt;
&lt;td&gt;根据元素的自然顺序，返回给定 collection 的最大元素。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;static &lt;T&gt; T   max(Collection&amp;lt;? extends T&amp;gt; coll, Comparator&amp;lt;? super T&amp;gt; comp)&lt;/td&gt;
&lt;td&gt;根据指定比较器产生的顺序，返回给定 collection 的最大元素。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;static &lt;T extends Object &amp; Comparable&lt;? super T&gt;&amp;gt;  T   min(Collection&amp;lt;? extends T&amp;gt; coll)&lt;/td&gt;
&lt;td&gt;根据元素的自然顺序 返回给定 collection 的最小元素。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;static &lt;T&gt; T   min(Collection&amp;lt;? extends T&amp;gt; coll, Comparator&amp;lt;? super T&amp;gt; comp)&lt;/td&gt;
&lt;td&gt;根据指定比较器产生的顺序，返回给定 collection 的最小元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;备注&#34;&gt;备注&lt;/h2&gt;

&lt;p&gt;关于对象的比较和排序，请看另一篇。&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.bysocket.com/?cat=12&#34;&gt;容器和泛型 | BYSocket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/ns_code/article/details/35564663&#34;&gt;【Java集合源码剖析】Java集合框架 | 兰亭风雨&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>